/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.33
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */


#ifdef __cplusplus
template<typename T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTELC__)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" } };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


#if defined(SWIG_NOINCLUDE) || defined(SWIG_NOARRAYS)


int SWIG_JavaArrayInBool (JNIEnv *jenv, jboolean **jarr, bool **carr, jbooleanArray input);
void SWIG_JavaArrayArgoutBool (JNIEnv *jenv, jboolean *jarr, bool *carr, jbooleanArray input);
jbooleanArray SWIG_JavaArrayOutBool (JNIEnv *jenv, bool *result, jsize sz);


int SWIG_JavaArrayInSchar (JNIEnv *jenv, jbyte **jarr, signed char **carr, jbyteArray input);
void SWIG_JavaArrayArgoutSchar (JNIEnv *jenv, jbyte *jarr, signed char *carr, jbyteArray input);
jbyteArray SWIG_JavaArrayOutSchar (JNIEnv *jenv, signed char *result, jsize sz);


int SWIG_JavaArrayInUchar (JNIEnv *jenv, jshort **jarr, unsigned char **carr, jshortArray input);
void SWIG_JavaArrayArgoutUchar (JNIEnv *jenv, jshort *jarr, unsigned char *carr, jshortArray input);
jshortArray SWIG_JavaArrayOutUchar (JNIEnv *jenv, unsigned char *result, jsize sz);


int SWIG_JavaArrayInShort (JNIEnv *jenv, jshort **jarr, short **carr, jshortArray input);
void SWIG_JavaArrayArgoutShort (JNIEnv *jenv, jshort *jarr, short *carr, jshortArray input);
jshortArray SWIG_JavaArrayOutShort (JNIEnv *jenv, short *result, jsize sz);


int SWIG_JavaArrayInUshort (JNIEnv *jenv, jint **jarr, unsigned short **carr, jintArray input);
void SWIG_JavaArrayArgoutUshort (JNIEnv *jenv, jint *jarr, unsigned short *carr, jintArray input);
jintArray SWIG_JavaArrayOutUshort (JNIEnv *jenv, unsigned short *result, jsize sz);


int SWIG_JavaArrayInInt (JNIEnv *jenv, jint **jarr, int **carr, jintArray input);
void SWIG_JavaArrayArgoutInt (JNIEnv *jenv, jint *jarr, int *carr, jintArray input);
jintArray SWIG_JavaArrayOutInt (JNIEnv *jenv, int *result, jsize sz);


int SWIG_JavaArrayInUint (JNIEnv *jenv, jlong **jarr, unsigned int **carr, jlongArray input);
void SWIG_JavaArrayArgoutUint (JNIEnv *jenv, jlong *jarr, unsigned int *carr, jlongArray input);
jlongArray SWIG_JavaArrayOutUint (JNIEnv *jenv, unsigned int *result, jsize sz);


int SWIG_JavaArrayInLong (JNIEnv *jenv, jint **jarr, long **carr, jintArray input);
void SWIG_JavaArrayArgoutLong (JNIEnv *jenv, jint *jarr, long *carr, jintArray input);
jintArray SWIG_JavaArrayOutLong (JNIEnv *jenv, long *result, jsize sz);


int SWIG_JavaArrayInUlong (JNIEnv *jenv, jlong **jarr, unsigned long **carr, jlongArray input);
void SWIG_JavaArrayArgoutUlong (JNIEnv *jenv, jlong *jarr, unsigned long *carr, jlongArray input);
jlongArray SWIG_JavaArrayOutUlong (JNIEnv *jenv, unsigned long *result, jsize sz);


int SWIG_JavaArrayInLonglong (JNIEnv *jenv, jlong **jarr, jlong **carr, jlongArray input);
void SWIG_JavaArrayArgoutLonglong (JNIEnv *jenv, jlong *jarr, jlong *carr, jlongArray input);
jlongArray SWIG_JavaArrayOutLonglong (JNIEnv *jenv, jlong *result, jsize sz);


int SWIG_JavaArrayInFloat (JNIEnv *jenv, jfloat **jarr, float **carr, jfloatArray input);
void SWIG_JavaArrayArgoutFloat (JNIEnv *jenv, jfloat *jarr, float *carr, jfloatArray input);
jfloatArray SWIG_JavaArrayOutFloat (JNIEnv *jenv, float *result, jsize sz);


int SWIG_JavaArrayInDouble (JNIEnv *jenv, jdouble **jarr, double **carr, jdoubleArray input);
void SWIG_JavaArrayArgoutDouble (JNIEnv *jenv, jdouble *jarr, double *carr, jdoubleArray input);
jdoubleArray SWIG_JavaArrayOutDouble (JNIEnv *jenv, double *result, jsize sz);


#else


/* bool[] support */
int SWIG_JavaArrayInBool (JNIEnv *jenv, jboolean **jarr, bool **carr, jbooleanArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetBooleanArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new bool[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = ((*jarr)[i] != 0);
  return 1;
}

void SWIG_JavaArrayArgoutBool (JNIEnv *jenv, jboolean *jarr, bool *carr, jbooleanArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jboolean)carr[i];
  jenv->ReleaseBooleanArrayElements(input, jarr, 0);
}

jbooleanArray SWIG_JavaArrayOutBool (JNIEnv *jenv, bool *result, jsize sz) {
  jboolean *arr;
  int i;
  jbooleanArray jresult = jenv->NewBooleanArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetBooleanArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jboolean)result[i];
  jenv->ReleaseBooleanArrayElements(jresult, arr, 0);
  return jresult;
}


/* signed char[] support */
int SWIG_JavaArrayInSchar (JNIEnv *jenv, jbyte **jarr, signed char **carr, jbyteArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetByteArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new signed char[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (signed char)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutSchar (JNIEnv *jenv, jbyte *jarr, signed char *carr, jbyteArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jbyte)carr[i];
  jenv->ReleaseByteArrayElements(input, jarr, 0);
}

jbyteArray SWIG_JavaArrayOutSchar (JNIEnv *jenv, signed char *result, jsize sz) {
  jbyte *arr;
  int i;
  jbyteArray jresult = jenv->NewByteArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetByteArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jbyte)result[i];
  jenv->ReleaseByteArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned char[] support */
int SWIG_JavaArrayInUchar (JNIEnv *jenv, jshort **jarr, unsigned char **carr, jshortArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetShortArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned char[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned char)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutUchar (JNIEnv *jenv, jshort *jarr, unsigned char *carr, jshortArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jshort)carr[i];
  jenv->ReleaseShortArrayElements(input, jarr, 0);
}

jshortArray SWIG_JavaArrayOutUchar (JNIEnv *jenv, unsigned char *result, jsize sz) {
  jshort *arr;
  int i;
  jshortArray jresult = jenv->NewShortArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetShortArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jshort)result[i];
  jenv->ReleaseShortArrayElements(jresult, arr, 0);
  return jresult;
}


/* short[] support */
int SWIG_JavaArrayInShort (JNIEnv *jenv, jshort **jarr, short **carr, jshortArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetShortArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new short[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (short)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutShort (JNIEnv *jenv, jshort *jarr, short *carr, jshortArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jshort)carr[i];
  jenv->ReleaseShortArrayElements(input, jarr, 0);
}

jshortArray SWIG_JavaArrayOutShort (JNIEnv *jenv, short *result, jsize sz) {
  jshort *arr;
  int i;
  jshortArray jresult = jenv->NewShortArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetShortArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jshort)result[i];
  jenv->ReleaseShortArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned short[] support */
int SWIG_JavaArrayInUshort (JNIEnv *jenv, jint **jarr, unsigned short **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned short[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned short)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutUshort (JNIEnv *jenv, jint *jarr, unsigned short *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

jintArray SWIG_JavaArrayOutUshort (JNIEnv *jenv, unsigned short *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* int[] support */
int SWIG_JavaArrayInInt (JNIEnv *jenv, jint **jarr, int **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new int[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (int)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutInt (JNIEnv *jenv, jint *jarr, int *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

jintArray SWIG_JavaArrayOutInt (JNIEnv *jenv, int *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned int[] support */
int SWIG_JavaArrayInUint (JNIEnv *jenv, jlong **jarr, unsigned int **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned int[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned int)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutUint (JNIEnv *jenv, jlong *jarr, unsigned int *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

jlongArray SWIG_JavaArrayOutUint (JNIEnv *jenv, unsigned int *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* long[] support */
int SWIG_JavaArrayInLong (JNIEnv *jenv, jint **jarr, long **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new long[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (long)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutLong (JNIEnv *jenv, jint *jarr, long *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

jintArray SWIG_JavaArrayOutLong (JNIEnv *jenv, long *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned long[] support */
int SWIG_JavaArrayInUlong (JNIEnv *jenv, jlong **jarr, unsigned long **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned long[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned long)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutUlong (JNIEnv *jenv, jlong *jarr, unsigned long *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

jlongArray SWIG_JavaArrayOutUlong (JNIEnv *jenv, unsigned long *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* jlong[] support */
int SWIG_JavaArrayInLonglong (JNIEnv *jenv, jlong **jarr, jlong **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new jlong[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (jlong)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutLonglong (JNIEnv *jenv, jlong *jarr, jlong *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

jlongArray SWIG_JavaArrayOutLonglong (JNIEnv *jenv, jlong *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* float[] support */
int SWIG_JavaArrayInFloat (JNIEnv *jenv, jfloat **jarr, float **carr, jfloatArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetFloatArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new float[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (float)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutFloat (JNIEnv *jenv, jfloat *jarr, float *carr, jfloatArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jfloat)carr[i];
  jenv->ReleaseFloatArrayElements(input, jarr, 0);
}

jfloatArray SWIG_JavaArrayOutFloat (JNIEnv *jenv, float *result, jsize sz) {
  jfloat *arr;
  int i;
  jfloatArray jresult = jenv->NewFloatArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetFloatArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jfloat)result[i];
  jenv->ReleaseFloatArrayElements(jresult, arr, 0);
  return jresult;
}


/* double[] support */
int SWIG_JavaArrayInDouble (JNIEnv *jenv, jdouble **jarr, double **carr, jdoubleArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetDoubleArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new double[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (double)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutDouble (JNIEnv *jenv, jdouble *jarr, double *carr, jdoubleArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jdouble)carr[i];
  jenv->ReleaseDoubleArrayElements(input, jarr, 0);
}

jdoubleArray SWIG_JavaArrayOutDouble (JNIEnv *jenv, double *result, jsize sz) {
  jdouble *arr;
  int i;
  jdoubleArray jresult = jenv->NewDoubleArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetDoubleArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jdouble)result[i];
  jenv->ReleaseDoubleArrayElements(jresult, arr, 0);
  return jresult;
}


#endif


#include "DefDllExport.h"
#include "ApogeeCam.h"
#include "CamGen2Base.h"
#include "Alta.h"
#include "ApogeeFilterWheel.h"
#include "Ascent.h"
#include "CameraInfo.h"
#include "CameraStatusRegs.h"
#include "FindDeviceEthernet.h" 
#include "FindDeviceUsb.h" 
#include "Gee.h"
#include "HiC.h" 
#include "Quad.h" 


#include <stdexcept>


#include <string>


#include <vector>
#include <stdexcept>


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_delete_1ApogeeCam(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ApogeeCam **)&jarg1; 
  
  try {
    delete arg1;
    
  } catch (std::bad_alloc &) {
    return ;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return ;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_ApogeeCam_1Reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  
  try {
    (arg1)->Reset();
  } catch (std::bad_alloc &) {
    return ;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return ;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return ;
  }
  
}


SWIGEXPORT jlong JNICALL Java_JavalibapogeeJNI_ApogeeCam_1ReadReg(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  uint16_t arg2 ;
  uint16_t result;
  uint16_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  argp2 = *(uint16_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint16_t");
    return 0;
  }
  arg2 = *argp2; 
  
  try {
    result = (arg1)->ReadReg(arg2);
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  *(uint16_t **)&jresult = new uint16_t((uint16_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_ApogeeCam_1WriteReg(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  uint16_t arg2 ;
  uint16_t arg3 ;
  uint16_t *argp2 ;
  uint16_t *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  argp2 = *(uint16_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint16_t");
    return ;
  }
  arg2 = *argp2; 
  argp3 = *(uint16_t **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint16_t");
    return ;
  }
  arg3 = *argp3; 
  
  try {
    (arg1)->WriteReg(arg2,arg3);
  } catch (std::bad_alloc &) {
    return ;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return ;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_ApogeeCam_1SetRoiNumRows(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  uint16_t arg2 ;
  uint16_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  argp2 = *(uint16_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint16_t");
    return ;
  }
  arg2 = *argp2; 
  
  try {
    (arg1)->SetRoiNumRows(arg2);
  } catch (std::bad_alloc &) {
    return ;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return ;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_ApogeeCam_1SetRoiNumCols(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  uint16_t arg2 ;
  uint16_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  argp2 = *(uint16_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint16_t");
    return ;
  }
  arg2 = *argp2; 
  
  try {
    (arg1)->SetRoiNumCols(arg2);
  } catch (std::bad_alloc &) {
    return ;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return ;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return ;
  }
  
}


SWIGEXPORT jlong JNICALL Java_JavalibapogeeJNI_ApogeeCam_1GetRoiNumRows(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  
  try {
    result = (arg1)->GetRoiNumRows();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  *(uint16_t **)&jresult = new uint16_t((uint16_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_JavalibapogeeJNI_ApogeeCam_1GetRoiNumCols(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  
  try {
    result = (arg1)->GetRoiNumCols();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  *(uint16_t **)&jresult = new uint16_t((uint16_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_ApogeeCam_1SetRoiStartRow(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  uint16_t arg2 ;
  uint16_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  argp2 = *(uint16_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint16_t");
    return ;
  }
  arg2 = *argp2; 
  
  try {
    (arg1)->SetRoiStartRow(arg2);
  } catch (std::bad_alloc &) {
    return ;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return ;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_ApogeeCam_1SetRoiStartCol(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  uint16_t arg2 ;
  uint16_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  argp2 = *(uint16_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint16_t");
    return ;
  }
  arg2 = *argp2; 
  
  try {
    (arg1)->SetRoiStartCol(arg2);
  } catch (std::bad_alloc &) {
    return ;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return ;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return ;
  }
  
}


SWIGEXPORT jlong JNICALL Java_JavalibapogeeJNI_ApogeeCam_1GetRoiStartRow(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  
  try {
    result = (arg1)->GetRoiStartRow();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  *(uint16_t **)&jresult = new uint16_t((uint16_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_JavalibapogeeJNI_ApogeeCam_1GetRoiStartCol(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  
  try {
    result = (arg1)->GetRoiStartCol();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  *(uint16_t **)&jresult = new uint16_t((uint16_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_ApogeeCam_1SetRoiBinRow(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  uint16_t arg2 ;
  uint16_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  argp2 = *(uint16_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint16_t");
    return ;
  }
  arg2 = *argp2; 
  
  try {
    (arg1)->SetRoiBinRow(arg2);
  } catch (std::bad_alloc &) {
    return ;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return ;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return ;
  }
  
}


SWIGEXPORT jlong JNICALL Java_JavalibapogeeJNI_ApogeeCam_1GetRoiBinRow(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  
  try {
    result = (arg1)->GetRoiBinRow();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  *(uint16_t **)&jresult = new uint16_t((uint16_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_ApogeeCam_1SetRoiBinCol(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  uint16_t arg2 ;
  uint16_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  argp2 = *(uint16_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint16_t");
    return ;
  }
  arg2 = *argp2; 
  
  try {
    (arg1)->SetRoiBinCol(arg2);
  } catch (std::bad_alloc &) {
    return ;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return ;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return ;
  }
  
}


SWIGEXPORT jlong JNICALL Java_JavalibapogeeJNI_ApogeeCam_1GetRoiBinCol(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  
  try {
    result = (arg1)->GetRoiBinCol();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  *(uint16_t **)&jresult = new uint16_t((uint16_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_JavalibapogeeJNI_ApogeeCam_1GetFirmwareRev(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  
  try {
    result = (arg1)->GetFirmwareRev();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  *(uint16_t **)&jresult = new uint16_t((uint16_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_ApogeeCam_1SetImageCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  uint16_t arg2 ;
  uint16_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  argp2 = *(uint16_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint16_t");
    return ;
  }
  arg2 = *argp2; 
  
  try {
    (arg1)->SetImageCount(arg2);
  } catch (std::bad_alloc &) {
    return ;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return ;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return ;
  }
  
}


SWIGEXPORT jlong JNICALL Java_JavalibapogeeJNI_ApogeeCam_1GetImageCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  
  try {
    result = (arg1)->GetImageCount();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  *(uint16_t **)&jresult = new uint16_t((uint16_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_JavalibapogeeJNI_ApogeeCam_1GetImgSequenceCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  
  try {
    result = (arg1)->GetImgSequenceCount();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  *(uint16_t **)&jresult = new uint16_t((uint16_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_ApogeeCam_1SetSequenceDelay(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  arg2 = (double)jarg2; 
  
  try {
    (arg1)->SetSequenceDelay(arg2);
  } catch (std::bad_alloc &) {
    return ;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return ;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return ;
  }
  
}


SWIGEXPORT jdouble JNICALL Java_JavalibapogeeJNI_ApogeeCam_1GetSequenceDelay(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  
  try {
    result = (double)(arg1)->GetSequenceDelay();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_ApogeeCam_1SetVariableSequenceDelay(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  
  try {
    (arg1)->SetVariableSequenceDelay(arg2);
  } catch (std::bad_alloc &) {
    return ;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return ;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return ;
  }
  
}


SWIGEXPORT jboolean JNICALL Java_JavalibapogeeJNI_ApogeeCam_1GetVariableSequenceDelay(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  
  try {
    result = (bool)(arg1)->GetVariableSequenceDelay();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_ApogeeCam_1SetTdiRate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  arg2 = (double)jarg2; 
  
  try {
    (arg1)->SetTdiRate(arg2);
  } catch (std::bad_alloc &) {
    return ;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return ;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return ;
  }
  
}


SWIGEXPORT jdouble JNICALL Java_JavalibapogeeJNI_ApogeeCam_1GetTdiRate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  
  try {
    result = (double)(arg1)->GetTdiRate();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_ApogeeCam_1SetTdiRows(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  uint16_t arg2 ;
  uint16_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  argp2 = *(uint16_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint16_t");
    return ;
  }
  arg2 = *argp2; 
  
  try {
    (arg1)->SetTdiRows(arg2);
  } catch (std::bad_alloc &) {
    return ;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return ;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return ;
  }
  
}


SWIGEXPORT jlong JNICALL Java_JavalibapogeeJNI_ApogeeCam_1GetTdiRows(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  
  try {
    result = (arg1)->GetTdiRows();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  *(uint16_t **)&jresult = new uint16_t((uint16_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_JavalibapogeeJNI_ApogeeCam_1GetTdiCounter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  
  try {
    result = (arg1)->GetTdiCounter();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  *(uint16_t **)&jresult = new uint16_t((uint16_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_ApogeeCam_1SetTdiBinningRows(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  uint16_t arg2 ;
  uint16_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  argp2 = *(uint16_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint16_t");
    return ;
  }
  arg2 = *argp2; 
  
  try {
    (arg1)->SetTdiBinningRows(arg2);
  } catch (std::bad_alloc &) {
    return ;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return ;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return ;
  }
  
}


SWIGEXPORT jlong JNICALL Java_JavalibapogeeJNI_ApogeeCam_1GetTdiBinningRows(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  
  try {
    result = (arg1)->GetTdiBinningRows();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  *(uint16_t **)&jresult = new uint16_t((uint16_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_ApogeeCam_1SetKineticsSectionHeight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  uint16_t arg2 ;
  uint16_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  argp2 = *(uint16_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint16_t");
    return ;
  }
  arg2 = *argp2; 
  
  try {
    (arg1)->SetKineticsSectionHeight(arg2);
  } catch (std::bad_alloc &) {
    return ;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return ;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return ;
  }
  
}


SWIGEXPORT jlong JNICALL Java_JavalibapogeeJNI_ApogeeCam_1GetKineticsSectionHeight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  
  try {
    result = (arg1)->GetKineticsSectionHeight();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  *(uint16_t **)&jresult = new uint16_t((uint16_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_ApogeeCam_1SetKineticsSections(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  uint16_t arg2 ;
  uint16_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  argp2 = *(uint16_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint16_t");
    return ;
  }
  arg2 = *argp2; 
  
  try {
    (arg1)->SetKineticsSections(arg2);
  } catch (std::bad_alloc &) {
    return ;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return ;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return ;
  }
  
}


SWIGEXPORT jlong JNICALL Java_JavalibapogeeJNI_ApogeeCam_1GetKineticsSections(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  
  try {
    result = (arg1)->GetKineticsSections();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  *(uint16_t **)&jresult = new uint16_t((uint16_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_ApogeeCam_1SetKineticsShiftInterval(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  arg2 = (double)jarg2; 
  
  try {
    (arg1)->SetKineticsShiftInterval(arg2);
  } catch (std::bad_alloc &) {
    return ;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return ;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return ;
  }
  
}


SWIGEXPORT jdouble JNICALL Java_JavalibapogeeJNI_ApogeeCam_1GetKineticsShiftInterval(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  
  try {
    result = (double)(arg1)->GetKineticsShiftInterval();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_ApogeeCam_1SetShutterStrobePosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  arg2 = (double)jarg2; 
  
  try {
    (arg1)->SetShutterStrobePosition(arg2);
  } catch (std::bad_alloc &) {
    return ;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return ;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return ;
  }
  
}


SWIGEXPORT jdouble JNICALL Java_JavalibapogeeJNI_ApogeeCam_1GetShutterStrobePosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  
  try {
    result = (double)(arg1)->GetShutterStrobePosition();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_ApogeeCam_1SetShutterStrobePeriod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  arg2 = (double)jarg2; 
  
  try {
    (arg1)->SetShutterStrobePeriod(arg2);
  } catch (std::bad_alloc &) {
    return ;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return ;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return ;
  }
  
}


SWIGEXPORT jdouble JNICALL Java_JavalibapogeeJNI_ApogeeCam_1GetShutterStrobePeriod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  
  try {
    result = (double)(arg1)->GetShutterStrobePeriod();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_ApogeeCam_1SetShutterCloseDelay(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  arg2 = (double)jarg2; 
  
  try {
    (arg1)->SetShutterCloseDelay(arg2);
  } catch (std::bad_alloc &) {
    return ;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return ;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return ;
  }
  
}


SWIGEXPORT jdouble JNICALL Java_JavalibapogeeJNI_ApogeeCam_1GetShutterCloseDelay(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  
  try {
    result = (double)(arg1)->GetShutterCloseDelay();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_ApogeeCam_1SetCoolerBackoffPoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  arg2 = (double)jarg2; 
  
  try {
    (arg1)->SetCoolerBackoffPoint(arg2);
  } catch (std::bad_alloc &) {
    return ;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return ;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return ;
  }
  
}


SWIGEXPORT jdouble JNICALL Java_JavalibapogeeJNI_ApogeeCam_1GetCoolerBackoffPoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  
  try {
    result = (double)(arg1)->GetCoolerBackoffPoint();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_ApogeeCam_1SetCoolerSetPoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  arg2 = (double)jarg2; 
  
  try {
    (arg1)->SetCoolerSetPoint(arg2);
  } catch (std::bad_alloc &) {
    return ;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return ;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return ;
  }
  
}


SWIGEXPORT jdouble JNICALL Java_JavalibapogeeJNI_ApogeeCam_1GetCoolerSetPoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  
  try {
    result = (double)(arg1)->GetCoolerSetPoint();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JavalibapogeeJNI_ApogeeCam_1GetCameraMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  Apg::CameraMode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  
  try {
    result = (Apg::CameraMode)(arg1)->GetCameraMode();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_ApogeeCam_1SetCameraMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  Apg::CameraMode arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  arg2 = (Apg::CameraMode)jarg2; 
  
  try {
    (arg1)->SetCameraMode(arg2);
  } catch (std::bad_alloc &) {
    return ;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return ;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_ApogeeCam_1SetFastSequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  
  try {
    (arg1)->SetFastSequence(arg2);
  } catch (std::bad_alloc &) {
    return ;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return ;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return ;
  }
  
}


SWIGEXPORT jboolean JNICALL Java_JavalibapogeeJNI_ApogeeCam_1IsFastSequenceOn(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  
  try {
    result = (bool)(arg1)->IsFastSequenceOn();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_ApogeeCam_1SetBulkDownload(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  
  try {
    (arg1)->SetBulkDownload(arg2);
  } catch (std::bad_alloc &) {
    return ;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return ;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return ;
  }
  
}


SWIGEXPORT jboolean JNICALL Java_JavalibapogeeJNI_ApogeeCam_1IsBulkDownloadOn(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  
  try {
    result = (bool)(arg1)->IsBulkDownloadOn();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_ApogeeCam_1SetIoPortAssignment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  uint16_t arg2 ;
  uint16_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  argp2 = *(uint16_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint16_t");
    return ;
  }
  arg2 = *argp2; 
  
  try {
    (arg1)->SetIoPortAssignment(arg2);
  } catch (std::bad_alloc &) {
    return ;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return ;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return ;
  }
  
}


SWIGEXPORT jlong JNICALL Java_JavalibapogeeJNI_ApogeeCam_1GetIoPortAssignment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  
  try {
    result = (arg1)->GetIoPortAssignment();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  *(uint16_t **)&jresult = new uint16_t((uint16_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_ApogeeCam_1SetIoPortBlankingBits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  uint16_t arg2 ;
  uint16_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  argp2 = *(uint16_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint16_t");
    return ;
  }
  arg2 = *argp2; 
  
  try {
    (arg1)->SetIoPortBlankingBits(arg2);
  } catch (std::bad_alloc &) {
    return ;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return ;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return ;
  }
  
}


SWIGEXPORT jlong JNICALL Java_JavalibapogeeJNI_ApogeeCam_1GetIoPortBlankingBits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  
  try {
    result = (arg1)->GetIoPortBlankingBits();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  *(uint16_t **)&jresult = new uint16_t((uint16_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_ApogeeCam_1SetIoPortDirection(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  uint16_t arg2 ;
  uint16_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  argp2 = *(uint16_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint16_t");
    return ;
  }
  arg2 = *argp2; 
  
  try {
    (arg1)->SetIoPortDirection(arg2);
  } catch (std::bad_alloc &) {
    return ;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return ;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return ;
  }
  
}


SWIGEXPORT jlong JNICALL Java_JavalibapogeeJNI_ApogeeCam_1GetIoPortDirection(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  
  try {
    result = (arg1)->GetIoPortDirection();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  *(uint16_t **)&jresult = new uint16_t((uint16_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_ApogeeCam_1SetIoPortData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  uint16_t arg2 ;
  uint16_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  argp2 = *(uint16_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint16_t");
    return ;
  }
  arg2 = *argp2; 
  
  try {
    (arg1)->SetIoPortData(arg2);
  } catch (std::bad_alloc &) {
    return ;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return ;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return ;
  }
  
}


SWIGEXPORT jlong JNICALL Java_JavalibapogeeJNI_ApogeeCam_1GetIoPortData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  
  try {
    result = (arg1)->GetIoPortData();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  *(uint16_t **)&jresult = new uint16_t((uint16_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_ApogeeCam_1SetPreFlash(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  
  try {
    (arg1)->SetPreFlash(arg2);
  } catch (std::bad_alloc &) {
    return ;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return ;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return ;
  }
  
}


SWIGEXPORT jboolean JNICALL Java_JavalibapogeeJNI_ApogeeCam_1GetPreFlash(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  
  try {
    result = (bool)(arg1)->GetPreFlash();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_ApogeeCam_1SetExternalTrigger(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jint jarg3, jint jarg4) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  bool arg2 ;
  Apg::TriggerMode arg3 ;
  Apg::TriggerType arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (Apg::TriggerMode)jarg3; 
  arg4 = (Apg::TriggerType)jarg4; 
  
  try {
    (arg1)->SetExternalTrigger(arg2,arg3,arg4);
  } catch (std::bad_alloc &) {
    return ;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return ;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return ;
  }
  
}


SWIGEXPORT jboolean JNICALL Java_JavalibapogeeJNI_ApogeeCam_1IsTriggerNormEachOn(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  
  try {
    result = (bool)(arg1)->IsTriggerNormEachOn();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_JavalibapogeeJNI_ApogeeCam_1IsTriggerNormGroupOn(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  
  try {
    result = (bool)(arg1)->IsTriggerNormGroupOn();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_JavalibapogeeJNI_ApogeeCam_1IsTriggerTdiKinEachOn(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  
  try {
    result = (bool)(arg1)->IsTriggerTdiKinEachOn();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_JavalibapogeeJNI_ApogeeCam_1IsTriggerTdiKinGroupOn(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  
  try {
    result = (bool)(arg1)->IsTriggerTdiKinGroupOn();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_JavalibapogeeJNI_ApogeeCam_1IsTriggerExternalShutterOn(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  
  try {
    result = (bool)(arg1)->IsTriggerExternalShutterOn();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_JavalibapogeeJNI_ApogeeCam_1IsTriggerExternalReadoutOn(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  
  try {
    result = (bool)(arg1)->IsTriggerExternalReadoutOn();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_ApogeeCam_1SetShutterState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  Apg::ShutterState arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  arg2 = (Apg::ShutterState)jarg2; 
  
  try {
    (arg1)->SetShutterState(arg2);
  } catch (std::bad_alloc &) {
    return ;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return ;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return ;
  }
  
}


SWIGEXPORT jint JNICALL Java_JavalibapogeeJNI_ApogeeCam_1GetShutterState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  Apg::ShutterState result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  
  try {
    result = (Apg::ShutterState)(arg1)->GetShutterState();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_JavalibapogeeJNI_ApogeeCam_1IsShutterForcedOpen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  
  try {
    result = (bool)(arg1)->IsShutterForcedOpen();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_JavalibapogeeJNI_ApogeeCam_1IsShutterForcedClosed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  
  try {
    result = (bool)(arg1)->IsShutterForcedClosed();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_JavalibapogeeJNI_ApogeeCam_1IsShutterOpen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  
  try {
    result = (bool)(arg1)->IsShutterOpen();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_ApogeeCam_1SetShutterAmpCtrl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  
  try {
    (arg1)->SetShutterAmpCtrl(arg2);
  } catch (std::bad_alloc &) {
    return ;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return ;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return ;
  }
  
}


SWIGEXPORT jboolean JNICALL Java_JavalibapogeeJNI_ApogeeCam_1IsShutterAmpCtrlOn(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  
  try {
    result = (bool)(arg1)->IsShutterAmpCtrlOn();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_ApogeeCam_1Init(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  
  try {
    (arg1)->Init();
  } catch (std::bad_alloc &) {
    return ;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return ;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_ApogeeCam_1SetCooler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  
  try {
    (arg1)->SetCooler(arg2);
  } catch (std::bad_alloc &) {
    return ;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return ;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return ;
  }
  
}


SWIGEXPORT jint JNICALL Java_JavalibapogeeJNI_ApogeeCam_1GetCoolerStatus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  Apg::CoolerStatus result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  
  try {
    result = (Apg::CoolerStatus)(arg1)->GetCoolerStatus();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_JavalibapogeeJNI_ApogeeCam_1IsCoolerOn(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  
  try {
    result = (bool)(arg1)->IsCoolerOn();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_JavalibapogeeJNI_ApogeeCam_1GetTempCcd(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  
  try {
    result = (double)(arg1)->GetTempCcd();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_ApogeeCam_1SetCcdAdcResolution(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  Apg::Resolution arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  arg2 = (Apg::Resolution)jarg2; 
  
  try {
    (arg1)->SetCcdAdcResolution(arg2);
  } catch (std::bad_alloc &) {
    return ;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return ;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return ;
  }
  
}


SWIGEXPORT jint JNICALL Java_JavalibapogeeJNI_ApogeeCam_1GetCcdAdcResolution(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  Apg::Resolution result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  
  try {
    result = (Apg::Resolution)(arg1)->GetCcdAdcResolution();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_ApogeeCam_1SetCcdAdcSpeed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  Apg::AdcSpeed arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  arg2 = (Apg::AdcSpeed)jarg2; 
  
  try {
    (arg1)->SetCcdAdcSpeed(arg2);
  } catch (std::bad_alloc &) {
    return ;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return ;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return ;
  }
  
}


SWIGEXPORT jint JNICALL Java_JavalibapogeeJNI_ApogeeCam_1GetCcdAdcSpeed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  Apg::AdcSpeed result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  
  try {
    result = (Apg::AdcSpeed)(arg1)->GetCcdAdcSpeed();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_JavalibapogeeJNI_ApogeeCam_1GetMaxBinCols(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  
  try {
    result = (arg1)->GetMaxBinCols();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  *(uint16_t **)&jresult = new uint16_t((uint16_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_JavalibapogeeJNI_ApogeeCam_1GetMaxBinRows(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  
  try {
    result = (arg1)->GetMaxBinRows();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  *(uint16_t **)&jresult = new uint16_t((uint16_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_JavalibapogeeJNI_ApogeeCam_1GetMaxImgCols(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  
  try {
    result = (arg1)->GetMaxImgCols();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  *(uint16_t **)&jresult = new uint16_t((uint16_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_JavalibapogeeJNI_ApogeeCam_1GetMaxImgRows(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  
  try {
    result = (arg1)->GetMaxImgRows();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  *(uint16_t **)&jresult = new uint16_t((uint16_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_JavalibapogeeJNI_ApogeeCam_1GetTotalRows(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  
  try {
    result = (arg1)->GetTotalRows();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  *(uint16_t **)&jresult = new uint16_t((uint16_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_JavalibapogeeJNI_ApogeeCam_1GetTotalCols(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  
  try {
    result = (arg1)->GetTotalCols();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  *(uint16_t **)&jresult = new uint16_t((uint16_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_JavalibapogeeJNI_ApogeeCam_1GetNumOverscanCols(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  
  try {
    result = (arg1)->GetNumOverscanCols();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  *(uint16_t **)&jresult = new uint16_t((uint16_t &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_JavalibapogeeJNI_ApogeeCam_1IsInterline(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  
  try {
    result = (bool)(arg1)->IsInterline();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JavalibapogeeJNI_ApogeeCam_1GetPlatformType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  CamModel::PlatformType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  
  try {
    result = (CamModel::PlatformType)(arg1)->GetPlatformType();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_ApogeeCam_1SetLedAState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  Apg::LedState arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  arg2 = (Apg::LedState)jarg2; 
  
  try {
    (arg1)->SetLedAState(arg2);
  } catch (std::bad_alloc &) {
    return ;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return ;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return ;
  }
  
}


SWIGEXPORT jint JNICALL Java_JavalibapogeeJNI_ApogeeCam_1GetLedAState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  Apg::LedState result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  
  try {
    result = (Apg::LedState)(arg1)->GetLedAState();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_ApogeeCam_1SetLedBState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  Apg::LedState arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  arg2 = (Apg::LedState)jarg2; 
  
  try {
    (arg1)->SetLedBState(arg2);
  } catch (std::bad_alloc &) {
    return ;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return ;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return ;
  }
  
}


SWIGEXPORT jint JNICALL Java_JavalibapogeeJNI_ApogeeCam_1GetLedBState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  Apg::LedState result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  
  try {
    result = (Apg::LedState)(arg1)->GetLedBState();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_ApogeeCam_1SetLedMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  Apg::LedMode arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  arg2 = (Apg::LedMode)jarg2; 
  
  try {
    (arg1)->SetLedMode(arg2);
  } catch (std::bad_alloc &) {
    return ;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return ;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return ;
  }
  
}


SWIGEXPORT jint JNICALL Java_JavalibapogeeJNI_ApogeeCam_1GetLedMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  Apg::LedMode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  
  try {
    result = (Apg::LedMode)(arg1)->GetLedMode();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_JavalibapogeeJNI_ApogeeCam_1GetInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  
  try {
    result = (arg1)->GetInfo();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_JavalibapogeeJNI_ApogeeCam_1GetModel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  
  try {
    result = (arg1)->GetModel();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_JavalibapogeeJNI_ApogeeCam_1GetSensor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  
  try {
    result = (arg1)->GetSensor();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_ApogeeCam_1SetFlushCommands(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  
  try {
    (arg1)->SetFlushCommands(arg2);
  } catch (std::bad_alloc &) {
    return ;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return ;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return ;
  }
  
}


SWIGEXPORT jboolean JNICALL Java_JavalibapogeeJNI_ApogeeCam_1AreFlushCmdsDisabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  
  try {
    result = (bool)(arg1)->AreFlushCmdsDisabled();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_ApogeeCam_1SetPostExposeFlushing(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  
  try {
    (arg1)->SetPostExposeFlushing(arg2);
  } catch (std::bad_alloc &) {
    return ;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return ;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return ;
  }
  
}


SWIGEXPORT jboolean JNICALL Java_JavalibapogeeJNI_ApogeeCam_1IsPostExposeFlushingDisabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  
  try {
    result = (bool)(arg1)->IsPostExposeFlushingDisabled();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_JavalibapogeeJNI_ApogeeCam_1GetPixelWidth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  
  try {
    result = (double)(arg1)->GetPixelWidth();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_JavalibapogeeJNI_ApogeeCam_1GetPixelHeight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  
  try {
    result = (double)(arg1)->GetPixelHeight();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_JavalibapogeeJNI_ApogeeCam_1GetMinExposureTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  
  try {
    result = (double)(arg1)->GetMinExposureTime();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_JavalibapogeeJNI_ApogeeCam_1GetMaxExposureTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  
  try {
    result = (double)(arg1)->GetMaxExposureTime();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_JavalibapogeeJNI_ApogeeCam_1IsColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  
  try {
    result = (bool)(arg1)->IsColor();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_JavalibapogeeJNI_ApogeeCam_1IsCoolingSupported(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  
  try {
    result = (bool)(arg1)->IsCoolingSupported();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_JavalibapogeeJNI_ApogeeCam_1IsCoolingRegulated(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  
  try {
    result = (bool)(arg1)->IsCoolingRegulated();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_JavalibapogeeJNI_ApogeeCam_1GetInputVoltage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  
  try {
    result = (double)(arg1)->GetInputVoltage();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JavalibapogeeJNI_ApogeeCam_1GetInterfaceType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  CamModel::InterfaceType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  
  try {
    result = (CamModel::InterfaceType)(arg1)->GetInterfaceType();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_ApogeeCam_1GetUsbVendorInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  uint16_t *arg2 = 0 ;
  uint16_t *arg3 = 0 ;
  uint16_t *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  arg2 = *(uint16_t **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "uint16_t & reference is null");
    return ;
  } 
  arg3 = *(uint16_t **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "uint16_t & reference is null");
    return ;
  } 
  arg4 = *(uint16_t **)&jarg4;
  if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "uint16_t & reference is null");
    return ;
  } 
  
  try {
    (arg1)->GetUsbVendorInfo(*arg2,*arg3,*arg4);
  } catch (std::bad_alloc &) {
    return ;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return ;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return ;
  }
  
}


SWIGEXPORT jboolean JNICALL Java_JavalibapogeeJNI_ApogeeCam_1IsCCD(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  
  try {
    result = (bool)(arg1)->IsCCD();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_ApogeeCam_1PauseTimer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  
  try {
    (arg1)->PauseTimer(arg2);
  } catch (std::bad_alloc &) {
    return ;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return ;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return ;
  }
  
}


SWIGEXPORT jboolean JNICALL Java_JavalibapogeeJNI_ApogeeCam_1IsSerialASupported(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  
  try {
    result = (bool)(arg1)->IsSerialASupported();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_JavalibapogeeJNI_ApogeeCam_1IsSerialBSupported(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  
  try {
    result = (bool)(arg1)->IsSerialBSupported();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_ApogeeCam_1SetFlushBinningRows(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  uint16_t arg2 ;
  uint16_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  argp2 = *(uint16_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint16_t");
    return ;
  }
  arg2 = *argp2; 
  
  try {
    (arg1)->SetFlushBinningRows(arg2);
  } catch (std::bad_alloc &) {
    return ;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return ;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return ;
  }
  
}


SWIGEXPORT jlong JNICALL Java_JavalibapogeeJNI_ApogeeCam_1GetFlushBinningRows(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  
  try {
    result = (arg1)->GetFlushBinningRows();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  *(uint16_t **)&jresult = new uint16_t((uint16_t &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_JavalibapogeeJNI_ApogeeCam_1IsOverscanDigitized(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  
  try {
    result = (bool)(arg1)->IsOverscanDigitized();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_ApogeeCam_1SetDigitizeOverscan(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  
  try {
    (arg1)->SetDigitizeOverscan(arg2);
  } catch (std::bad_alloc &) {
    return ;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return ;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_ApogeeCam_1SetAdcGain(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  uint16_t arg2 ;
  int32_t arg3 ;
  int32_t arg4 ;
  uint16_t *argp2 ;
  int32_t *argp3 ;
  int32_t *argp4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  argp2 = *(uint16_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint16_t");
    return ;
  }
  arg2 = *argp2; 
  argp3 = *(int32_t **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null int32_t");
    return ;
  }
  arg3 = *argp3; 
  argp4 = *(int32_t **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null int32_t");
    return ;
  }
  arg4 = *argp4; 
  
  try {
    (arg1)->SetAdcGain(arg2,arg3,arg4);
  } catch (std::bad_alloc &) {
    return ;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return ;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return ;
  }
  
}


SWIGEXPORT jlong JNICALL Java_JavalibapogeeJNI_ApogeeCam_1GetAdcGain(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  int32_t arg2 ;
  int32_t arg3 ;
  uint16_t result;
  int32_t *argp2 ;
  int32_t *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  argp2 = *(int32_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null int32_t");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(int32_t **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null int32_t");
    return 0;
  }
  arg3 = *argp3; 
  
  try {
    result = (arg1)->GetAdcGain(arg2,arg3);
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  *(uint16_t **)&jresult = new uint16_t((uint16_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_ApogeeCam_1SetAdcOffset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  uint16_t arg2 ;
  int32_t arg3 ;
  int32_t arg4 ;
  uint16_t *argp2 ;
  int32_t *argp3 ;
  int32_t *argp4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  argp2 = *(uint16_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint16_t");
    return ;
  }
  arg2 = *argp2; 
  argp3 = *(int32_t **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null int32_t");
    return ;
  }
  arg3 = *argp3; 
  argp4 = *(int32_t **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null int32_t");
    return ;
  }
  arg4 = *argp4; 
  
  try {
    (arg1)->SetAdcOffset(arg2,arg3,arg4);
  } catch (std::bad_alloc &) {
    return ;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return ;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return ;
  }
  
}


SWIGEXPORT jlong JNICALL Java_JavalibapogeeJNI_ApogeeCam_1GetAdcOffset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  int32_t arg2 ;
  int32_t arg3 ;
  uint16_t result;
  int32_t *argp2 ;
  int32_t *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  argp2 = *(int32_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null int32_t");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(int32_t **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null int32_t");
    return 0;
  }
  arg3 = *argp3; 
  
  try {
    result = (arg1)->GetAdcOffset(arg2,arg3);
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  *(uint16_t **)&jresult = new uint16_t((uint16_t &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_JavalibapogeeJNI_ApogeeCam_1IsInitialized(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  
  try {
    result = (bool)(arg1)->IsInitialized();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_JavalibapogeeJNI_ApogeeCam_1IsConnected(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  
  try {
    result = (bool)(arg1)->IsConnected();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_ApogeeCam_1SetAdSimMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  
  try {
    (arg1)->SetAdSimMode(arg2);
  } catch (std::bad_alloc &) {
    return ;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return ;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return ;
  }
  
}


SWIGEXPORT jboolean JNICALL Java_JavalibapogeeJNI_ApogeeCam_1IsAdSimModeOn(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  
  try {
    result = (bool)(arg1)->IsAdSimModeOn();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_ApogeeCam_1SetLedBrightness(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  arg2 = (double)jarg2; 
  
  try {
    (arg1)->SetLedBrightness(arg2);
  } catch (std::bad_alloc &) {
    return ;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return ;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return ;
  }
  
}


SWIGEXPORT jdouble JNICALL Java_JavalibapogeeJNI_ApogeeCam_1GetLedBrightness(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  
  try {
    result = (double)(arg1)->GetLedBrightness();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_JavalibapogeeJNI_ApogeeCam_1GetDriverVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  
  try {
    result = (arg1)->GetDriverVersion();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_JavalibapogeeJNI_ApogeeCam_1GetUsbFirmwareVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  
  try {
    result = (arg1)->GetUsbFirmwareVersion();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_JavalibapogeeJNI_ApogeeCam_1GetSerialNumber(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  
  try {
    result = (arg1)->GetSerialNumber();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_ApogeeCam_1CloseConnection(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  
  try {
    (arg1)->CloseConnection();
  } catch (std::bad_alloc &) {
    return ;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return ;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_ApogeeCam_1OpenConnection(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jlong jarg5) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  uint16_t arg4 ;
  uint16_t arg5 ;
  uint16_t const *argp4 ;
  uint16_t const *argp5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  argp4 = *(uint16_t **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint16_t const");
    return ;
  }
  arg4 = *argp4; 
  argp5 = *(uint16_t **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint16_t const");
    return ;
  }
  arg5 = *argp5; 
  
  try {
    (arg1)->OpenConnection((std::string const &)*arg2,(std::string const &)*arg3,arg4,arg5);
  } catch (std::bad_alloc &) {
    return ;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return ;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_ApogeeCam_1StartExposure(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jboolean jarg3) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  double arg2 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = jarg3 ? true : false; 
  
  try {
    (arg1)->StartExposure(arg2,arg3);
  } catch (std::bad_alloc &) {
    return ;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return ;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return ;
  }
  
}


SWIGEXPORT jlong JNICALL Java_JavalibapogeeJNI_ApogeeCam_1GetStatus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  CameraStatusRegs result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  
  try {
    result = (arg1)->GetStatus();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  *(CameraStatusRegs **)&jresult = new CameraStatusRegs((CameraStatusRegs &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JavalibapogeeJNI_ApogeeCam_1GetImagingStatus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  Apg::Status result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  
  try {
    result = (Apg::Status)(arg1)->GetImagingStatus();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_ApogeeCam_1GetImage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  std::vector<uint16_t > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  arg2 = *(std::vector<uint16_t > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<uint16_t > & reference is null");
    return ;
  } 
  
  try {
    (arg1)->GetImage(*arg2);
  } catch (std::bad_alloc &) {
    return ;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return ;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_ApogeeCam_1StopExposure(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  
  try {
    (arg1)->StopExposure(arg2);
  } catch (std::bad_alloc &) {
    return ;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return ;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return ;
  }
  
}


SWIGEXPORT jlong JNICALL Java_JavalibapogeeJNI_ApogeeCam_1GetAvailableMemory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  
  try {
    result = (arg1)->GetAvailableMemory();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  *(uint32_t **)&jresult = new uint32_t((uint32_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_JavalibapogeeJNI_ApogeeCam_1GetNumAds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  
  try {
    result = (arg1)->GetNumAds();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  *(int32_t **)&jresult = new int32_t((int32_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_JavalibapogeeJNI_ApogeeCam_1GetNumAdChannels(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  
  try {
    result = (arg1)->GetNumAdChannels();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  *(int32_t **)&jresult = new int32_t((int32_t &)result); 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_JavalibapogeeJNI_ApogeeCam_1GetCoolerDrive(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  
  try {
    result = (double)(arg1)->GetCoolerDrive();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_ApogeeCam_1SetFanMode_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  Apg::FanMode arg2 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  arg2 = (Apg::FanMode)jarg2; 
  arg3 = jarg3 ? true : false; 
  
  try {
    (arg1)->SetFanMode(arg2,arg3);
  } catch (std::bad_alloc &) {
    return ;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return ;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_ApogeeCam_1SetFanMode_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  Apg::FanMode arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  arg2 = (Apg::FanMode)jarg2; 
  
  try {
    (arg1)->SetFanMode(arg2);
  } catch (std::bad_alloc &) {
    return ;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return ;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return ;
  }
  
}


SWIGEXPORT jint JNICALL Java_JavalibapogeeJNI_ApogeeCam_1GetFanMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  Apg::FanMode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  
  try {
    result = (Apg::FanMode)(arg1)->GetFanMode();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_JavalibapogeeJNI_ApogeeCam_1GetTempHeatsink(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeCam **)&jarg1; 
  
  try {
    result = (double)(arg1)->GetTempHeatsink();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_delete_1CamGen2Base(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CamGen2Base *arg1 = (CamGen2Base *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CamGen2Base **)&jarg1; 
  
  try {
    delete arg1;
    
  } catch (std::bad_alloc &) {
    return ;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return ;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return ;
  }
  
}


SWIGEXPORT jlong JNICALL Java_JavalibapogeeJNI_CamGen2Base_1GetStatus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CamGen2Base *arg1 = (CamGen2Base *) 0 ;
  CameraStatusRegs result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CamGen2Base **)&jarg1; 
  
  try {
    result = (arg1)->GetStatus();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  *(CameraStatusRegs **)&jresult = new CameraStatusRegs((CameraStatusRegs &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JavalibapogeeJNI_CamGen2Base_1GetImagingStatus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CamGen2Base *arg1 = (CamGen2Base *) 0 ;
  Apg::Status result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CamGen2Base **)&jarg1; 
  
  try {
    result = (Apg::Status)(arg1)->GetImagingStatus();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_CamGen2Base_1GetImage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  CamGen2Base *arg1 = (CamGen2Base *) 0 ;
  std::vector<uint16_t > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CamGen2Base **)&jarg1; 
  arg2 = *(std::vector<uint16_t > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<uint16_t > & reference is null");
    return ;
  } 
  
  try {
    (arg1)->GetImage(*arg2);
  } catch (std::bad_alloc &) {
    return ;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return ;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_CamGen2Base_1StopExposure(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  CamGen2Base *arg1 = (CamGen2Base *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CamGen2Base **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  
  try {
    (arg1)->StopExposure(arg2);
  } catch (std::bad_alloc &) {
    return ;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return ;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return ;
  }
  
}


SWIGEXPORT jlong JNICALL Java_JavalibapogeeJNI_CamGen2Base_1GetAvailableMemory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CamGen2Base *arg1 = (CamGen2Base *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CamGen2Base **)&jarg1; 
  
  try {
    result = (arg1)->GetAvailableMemory();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  *(uint32_t **)&jresult = new uint32_t((uint32_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_JavalibapogeeJNI_CamGen2Base_1GetNumAds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CamGen2Base *arg1 = (CamGen2Base *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CamGen2Base **)&jarg1; 
  
  try {
    result = (arg1)->GetNumAds();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  *(int32_t **)&jresult = new int32_t((int32_t &)result); 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_JavalibapogeeJNI_CamGen2Base_1GetCoolerDrive(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CamGen2Base *arg1 = (CamGen2Base *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CamGen2Base **)&jarg1; 
  
  try {
    result = (double)(arg1)->GetCoolerDrive();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_CamGen2Base_1SetFanMode_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  CamGen2Base *arg1 = (CamGen2Base *) 0 ;
  Apg::FanMode arg2 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CamGen2Base **)&jarg1; 
  arg2 = (Apg::FanMode)jarg2; 
  arg3 = jarg3 ? true : false; 
  
  try {
    (arg1)->SetFanMode(arg2,arg3);
  } catch (std::bad_alloc &) {
    return ;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return ;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_CamGen2Base_1SetFanMode_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CamGen2Base *arg1 = (CamGen2Base *) 0 ;
  Apg::FanMode arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CamGen2Base **)&jarg1; 
  arg2 = (Apg::FanMode)jarg2; 
  
  try {
    (arg1)->SetFanMode(arg2);
  } catch (std::bad_alloc &) {
    return ;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return ;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return ;
  }
  
}


SWIGEXPORT jint JNICALL Java_JavalibapogeeJNI_CamGen2Base_1GetFanMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CamGen2Base *arg1 = (CamGen2Base *) 0 ;
  Apg::FanMode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CamGen2Base **)&jarg1; 
  
  try {
    result = (Apg::FanMode)(arg1)->GetFanMode();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_JavalibapogeeJNI_new_1Alta(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Alta *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  try {
    result = (Alta *)new Alta();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  *(Alta **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_delete_1Alta(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Alta *arg1 = (Alta *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Alta **)&jarg1; 
  
  try {
    delete arg1;
    
  } catch (std::bad_alloc &) {
    return ;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return ;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_Alta_1OpenConnection(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jlong jarg5) {
  Alta *arg1 = (Alta *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  uint16_t arg4 ;
  uint16_t arg5 ;
  uint16_t const *argp4 ;
  uint16_t const *argp5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Alta **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  argp4 = *(uint16_t **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint16_t const");
    return ;
  }
  arg4 = *argp4; 
  argp5 = *(uint16_t **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint16_t const");
    return ;
  }
  arg5 = *argp5; 
  
  try {
    (arg1)->OpenConnection((std::string const &)*arg2,(std::string const &)*arg3,arg4,arg5);
  } catch (std::bad_alloc &) {
    return ;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return ;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_Alta_1StartExposure(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jboolean jarg3) {
  Alta *arg1 = (Alta *) 0 ;
  double arg2 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Alta **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = jarg3 ? true : false; 
  
  try {
    (arg1)->StartExposure(arg2,arg3);
  } catch (std::bad_alloc &) {
    return ;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return ;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return ;
  }
  
}


SWIGEXPORT jlong JNICALL Java_JavalibapogeeJNI_Alta_1GetStatus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Alta *arg1 = (Alta *) 0 ;
  CameraStatusRegs result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Alta **)&jarg1; 
  
  try {
    result = (arg1)->GetStatus();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  *(CameraStatusRegs **)&jresult = new CameraStatusRegs((CameraStatusRegs &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JavalibapogeeJNI_Alta_1GetImagingStatus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Alta *arg1 = (Alta *) 0 ;
  Apg::Status result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Alta **)&jarg1; 
  
  try {
    result = (Apg::Status)(arg1)->GetImagingStatus();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_Alta_1GetImage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Alta *arg1 = (Alta *) 0 ;
  std::vector<uint16_t > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Alta **)&jarg1; 
  arg2 = *(std::vector<uint16_t > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<uint16_t > & reference is null");
    return ;
  } 
  
  try {
    (arg1)->GetImage(*arg2);
  } catch (std::bad_alloc &) {
    return ;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return ;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_Alta_1StopExposure(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Alta *arg1 = (Alta *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Alta **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  
  try {
    (arg1)->StopExposure(arg2);
  } catch (std::bad_alloc &) {
    return ;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return ;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return ;
  }
  
}


SWIGEXPORT jlong JNICALL Java_JavalibapogeeJNI_Alta_1GetAvailableMemory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Alta *arg1 = (Alta *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Alta **)&jarg1; 
  
  try {
    result = (arg1)->GetAvailableMemory();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  *(uint32_t **)&jresult = new uint32_t((uint32_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_Alta_1SetCcdAdc12BitGain(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Alta *arg1 = (Alta *) 0 ;
  uint16_t arg2 ;
  uint16_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Alta **)&jarg1; 
  argp2 = *(uint16_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint16_t");
    return ;
  }
  arg2 = *argp2; 
  
  try {
    (arg1)->SetCcdAdc12BitGain(arg2);
  } catch (std::bad_alloc &) {
    return ;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return ;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_Alta_1SetCcdAdc12BitOffset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Alta *arg1 = (Alta *) 0 ;
  uint16_t arg2 ;
  uint16_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Alta **)&jarg1; 
  argp2 = *(uint16_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint16_t");
    return ;
  }
  arg2 = *argp2; 
  
  try {
    (arg1)->SetCcdAdc12BitOffset(arg2);
  } catch (std::bad_alloc &) {
    return ;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return ;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return ;
  }
  
}


SWIGEXPORT jlong JNICALL Java_JavalibapogeeJNI_Alta_1GetCcdAdc12BitGain(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Alta *arg1 = (Alta *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Alta **)&jarg1; 
  
  try {
    result = (arg1)->GetCcdAdc12BitGain();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  *(uint16_t **)&jresult = new uint16_t((uint16_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_JavalibapogeeJNI_Alta_1GetCcdAdc12BitOffset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Alta *arg1 = (Alta *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Alta **)&jarg1; 
  
  try {
    result = (arg1)->GetCcdAdc12BitOffset();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  *(uint16_t **)&jresult = new uint16_t((uint16_t &)result); 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_JavalibapogeeJNI_Alta_1GetCcdAdc16BitGain(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Alta *arg1 = (Alta *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Alta **)&jarg1; 
  
  try {
    result = (double)(arg1)->GetCcdAdc16BitGain();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_JavalibapogeeJNI_Alta_1GetNumAds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Alta *arg1 = (Alta *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Alta **)&jarg1; 
  
  try {
    result = (arg1)->GetNumAds();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  *(int32_t **)&jresult = new int32_t((int32_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_JavalibapogeeJNI_Alta_1GetNumAdChannels(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Alta *arg1 = (Alta *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Alta **)&jarg1; 
  
  try {
    result = (arg1)->GetNumAdChannels();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  *(int32_t **)&jresult = new int32_t((int32_t &)result); 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_JavalibapogeeJNI_Alta_1GetCoolerDrive(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Alta *arg1 = (Alta *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Alta **)&jarg1; 
  
  try {
    result = (double)(arg1)->GetCoolerDrive();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_Alta_1SetFanMode_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  Alta *arg1 = (Alta *) 0 ;
  Apg::FanMode arg2 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Alta **)&jarg1; 
  arg2 = (Apg::FanMode)jarg2; 
  arg3 = jarg3 ? true : false; 
  
  try {
    (arg1)->SetFanMode(arg2,arg3);
  } catch (std::bad_alloc &) {
    return ;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return ;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_Alta_1SetFanMode_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Alta *arg1 = (Alta *) 0 ;
  Apg::FanMode arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Alta **)&jarg1; 
  arg2 = (Apg::FanMode)jarg2; 
  
  try {
    (arg1)->SetFanMode(arg2);
  } catch (std::bad_alloc &) {
    return ;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return ;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return ;
  }
  
}


SWIGEXPORT jint JNICALL Java_JavalibapogeeJNI_Alta_1GetFanMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Alta *arg1 = (Alta *) 0 ;
  Apg::FanMode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Alta **)&jarg1; 
  
  try {
    result = (Apg::FanMode)(arg1)->GetFanMode();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_JavalibapogeeJNI_Alta_1GetTempHeatsink(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Alta *arg1 = (Alta *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Alta **)&jarg1; 
  
  try {
    result = (double)(arg1)->GetTempHeatsink();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_JavalibapogeeJNI_Alta_1GetMacAddress(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Alta *arg1 = (Alta *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Alta **)&jarg1; 
  
  try {
    result = (arg1)->GetMacAddress();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JavalibapogeeJNI_ApogeeFilterWheel_1UNKNOWN_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ApogeeFilterWheel::Type result;
  
  (void)jenv;
  (void)jcls;
  result = (ApogeeFilterWheel::Type)ApogeeFilterWheel::UNKNOWN_TYPE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JavalibapogeeJNI_ApogeeFilterWheel_1FW50_19R_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ApogeeFilterWheel::Type result;
  
  (void)jenv;
  (void)jcls;
  result = (ApogeeFilterWheel::Type)ApogeeFilterWheel::FW50_9R;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JavalibapogeeJNI_ApogeeFilterWheel_1FW50_17S_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ApogeeFilterWheel::Type result;
  
  (void)jenv;
  (void)jcls;
  result = (ApogeeFilterWheel::Type)ApogeeFilterWheel::FW50_7S;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JavalibapogeeJNI_ApogeeFilterWheel_1AFW50_110S_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ApogeeFilterWheel::Type result;
  
  (void)jenv;
  (void)jcls;
  result = (ApogeeFilterWheel::Type)ApogeeFilterWheel::AFW50_10S;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_JavalibapogeeJNI_new_1ApogeeFilterWheel(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ApogeeFilterWheel *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  try {
    result = (ApogeeFilterWheel *)new ApogeeFilterWheel();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  *(ApogeeFilterWheel **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_delete_1ApogeeFilterWheel(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ApogeeFilterWheel *arg1 = (ApogeeFilterWheel *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ApogeeFilterWheel **)&jarg1; 
  
  try {
    delete arg1;
    
  } catch (std::bad_alloc &) {
    return ;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return ;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_ApogeeFilterWheel_1Init(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  ApogeeFilterWheel *arg1 = (ApogeeFilterWheel *) 0 ;
  ApogeeFilterWheel::Type arg2 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeFilterWheel **)&jarg1; 
  arg2 = (ApogeeFilterWheel::Type)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  
  try {
    (arg1)->Init(arg2,(std::string const &)*arg3);
  } catch (std::bad_alloc &) {
    return ;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return ;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_ApogeeFilterWheel_1Close(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ApogeeFilterWheel *arg1 = (ApogeeFilterWheel *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeFilterWheel **)&jarg1; 
  
  try {
    (arg1)->Close();
  } catch (std::bad_alloc &) {
    return ;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return ;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return ;
  }
  
}


SWIGEXPORT jlong JNICALL Java_JavalibapogeeJNI_ApogeeFilterWheel_1GetVendorId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ApogeeFilterWheel *arg1 = (ApogeeFilterWheel *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeFilterWheel **)&jarg1; 
  
  try {
    result = (arg1)->GetVendorId();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  *(uint16_t **)&jresult = new uint16_t((uint16_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_JavalibapogeeJNI_ApogeeFilterWheel_1GetProductId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ApogeeFilterWheel *arg1 = (ApogeeFilterWheel *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeFilterWheel **)&jarg1; 
  
  try {
    result = (arg1)->GetProductId();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  *(uint16_t **)&jresult = new uint16_t((uint16_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_JavalibapogeeJNI_ApogeeFilterWheel_1GetDeviceId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ApogeeFilterWheel *arg1 = (ApogeeFilterWheel *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeFilterWheel **)&jarg1; 
  
  try {
    result = (arg1)->GetDeviceId();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  *(uint16_t **)&jresult = new uint16_t((uint16_t &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_JavalibapogeeJNI_ApogeeFilterWheel_1GetUsbFirmwareRev(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ApogeeFilterWheel *arg1 = (ApogeeFilterWheel *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeFilterWheel **)&jarg1; 
  
  try {
    result = (arg1)->GetUsbFirmwareRev();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JavalibapogeeJNI_ApogeeFilterWheel_1GetType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ApogeeFilterWheel *arg1 = (ApogeeFilterWheel *) 0 ;
  ApogeeFilterWheel::Type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeFilterWheel **)&jarg1; 
  
  try {
    result = (ApogeeFilterWheel::Type)(arg1)->GetType();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_JavalibapogeeJNI_ApogeeFilterWheel_1GetName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ApogeeFilterWheel *arg1 = (ApogeeFilterWheel *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeFilterWheel **)&jarg1; 
  
  try {
    result = (arg1)->GetName();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JavalibapogeeJNI_ApogeeFilterWheel_1GetStatus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ApogeeFilterWheel *arg1 = (ApogeeFilterWheel *) 0 ;
  ApogeeFilterWheel::Status result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeFilterWheel **)&jarg1; 
  
  try {
    result = (ApogeeFilterWheel::Status)(arg1)->GetStatus();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_JavalibapogeeJNI_ApogeeFilterWheel_1GetMaxPositions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ApogeeFilterWheel *arg1 = (ApogeeFilterWheel *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeFilterWheel **)&jarg1; 
  
  try {
    result = (arg1)->GetMaxPositions();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  *(uint16_t **)&jresult = new uint16_t((uint16_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_ApogeeFilterWheel_1SetPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ApogeeFilterWheel *arg1 = (ApogeeFilterWheel *) 0 ;
  uint16_t arg2 ;
  uint16_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeFilterWheel **)&jarg1; 
  argp2 = *(uint16_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint16_t");
    return ;
  }
  arg2 = *argp2; 
  
  try {
    (arg1)->SetPosition(arg2);
  } catch (std::bad_alloc &) {
    return ;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return ;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return ;
  }
  
}


SWIGEXPORT jlong JNICALL Java_JavalibapogeeJNI_ApogeeFilterWheel_1GetPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ApogeeFilterWheel *arg1 = (ApogeeFilterWheel *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ApogeeFilterWheel **)&jarg1; 
  
  try {
    result = (arg1)->GetPosition();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  *(uint16_t **)&jresult = new uint16_t((uint16_t &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JavalibapogeeJNI_Ascent_1FW_1UNKNOWN_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Ascent::FilterWheelType result;
  
  (void)jenv;
  (void)jcls;
  result = (Ascent::FilterWheelType)Ascent::FW_UNKNOWN_TYPE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JavalibapogeeJNI_Ascent_1CFW25_16R_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Ascent::FilterWheelType result;
  
  (void)jenv;
  (void)jcls;
  result = (Ascent::FilterWheelType)Ascent::CFW25_6R;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JavalibapogeeJNI_Ascent_1CFW31_18R_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Ascent::FilterWheelType result;
  
  (void)jenv;
  (void)jcls;
  result = (Ascent::FilterWheelType)Ascent::CFW31_8R;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_JavalibapogeeJNI_new_1Ascent(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Ascent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  try {
    result = (Ascent *)new Ascent();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  *(Ascent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_Ascent_1OpenConnection(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jlong jarg5) {
  Ascent *arg1 = (Ascent *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  uint16_t arg4 ;
  uint16_t arg5 ;
  uint16_t const *argp4 ;
  uint16_t const *argp5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ascent **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  argp4 = *(uint16_t **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint16_t const");
    return ;
  }
  arg4 = *argp4; 
  argp5 = *(uint16_t **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint16_t const");
    return ;
  }
  arg5 = *argp5; 
  
  try {
    (arg1)->OpenConnection((std::string const &)*arg2,(std::string const &)*arg3,arg4,arg5);
  } catch (std::bad_alloc &) {
    return ;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return ;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_delete_1Ascent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Ascent *arg1 = (Ascent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Ascent **)&jarg1; 
  
  try {
    delete arg1;
    
  } catch (std::bad_alloc &) {
    return ;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return ;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_Ascent_1FilterWheelOpen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Ascent *arg1 = (Ascent *) 0 ;
  Ascent::FilterWheelType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ascent **)&jarg1; 
  arg2 = (Ascent::FilterWheelType)jarg2; 
  
  try {
    (arg1)->FilterWheelOpen(arg2);
  } catch (std::bad_alloc &) {
    return ;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return ;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_Ascent_1FilterWheelClose(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Ascent *arg1 = (Ascent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ascent **)&jarg1; 
  
  try {
    (arg1)->FilterWheelClose();
  } catch (std::bad_alloc &) {
    return ;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return ;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_Ascent_1SetFilterWheelPos(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Ascent *arg1 = (Ascent *) 0 ;
  uint16_t arg2 ;
  uint16_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ascent **)&jarg1; 
  argp2 = *(uint16_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint16_t");
    return ;
  }
  arg2 = *argp2; 
  
  try {
    (arg1)->SetFilterWheelPos(arg2);
  } catch (std::bad_alloc &) {
    return ;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return ;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return ;
  }
  
}


SWIGEXPORT jlong JNICALL Java_JavalibapogeeJNI_Ascent_1GetFilterWheelPos(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Ascent *arg1 = (Ascent *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ascent **)&jarg1; 
  
  try {
    result = (arg1)->GetFilterWheelPos();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  *(uint16_t **)&jresult = new uint16_t((uint16_t &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JavalibapogeeJNI_Ascent_1GetFilterWheelStatus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Ascent *arg1 = (Ascent *) 0 ;
  ApogeeFilterWheel::Status result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ascent **)&jarg1; 
  
  try {
    result = (ApogeeFilterWheel::Status)(arg1)->GetFilterWheelStatus();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JavalibapogeeJNI_Ascent_1GetFilterWheelType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Ascent *arg1 = (Ascent *) 0 ;
  Ascent::FilterWheelType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ascent **)&jarg1; 
  
  try {
    result = (Ascent::FilterWheelType)(arg1)->GetFilterWheelType();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_JavalibapogeeJNI_Ascent_1GetFilterWheelName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Ascent *arg1 = (Ascent *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ascent **)&jarg1; 
  
  try {
    result = (arg1)->GetFilterWheelName();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_JavalibapogeeJNI_Ascent_1GetFilterWheelMaxPositions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Ascent *arg1 = (Ascent *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ascent **)&jarg1; 
  
  try {
    result = (arg1)->GetFilterWheelMaxPositions();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  *(uint16_t **)&jresult = new uint16_t((uint16_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_Ascent_1StartExposure(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jboolean jarg3) {
  Ascent *arg1 = (Ascent *) 0 ;
  double arg2 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ascent **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = jarg3 ? true : false; 
  
  try {
    (arg1)->StartExposure(arg2,arg3);
  } catch (std::bad_alloc &) {
    return ;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return ;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return ;
  }
  
}


SWIGEXPORT jlong JNICALL Java_JavalibapogeeJNI_Ascent_1GetNumAdChannels(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Ascent *arg1 = (Ascent *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ascent **)&jarg1; 
  
  try {
    result = (arg1)->GetNumAdChannels();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  *(int32_t **)&jresult = new int32_t((int32_t &)result); 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_JavalibapogeeJNI_Ascent_1GetTempHeatsink(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Ascent *arg1 = (Ascent *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ascent **)&jarg1; 
  
  try {
    result = (double)(arg1)->GetTempHeatsink();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_StrDb_1FactorySn_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CamInfo::StrDb **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->FactorySn = *arg2;
  
}


SWIGEXPORT jstring JNICALL Java_JavalibapogeeJNI_StrDb_1FactorySn_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CamInfo::StrDb **)&jarg1; 
  {
    std::string const &_result_ref =  ((arg1)->FactorySn);
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_StrDb_1CustomerSn_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CamInfo::StrDb **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->CustomerSn = *arg2;
  
}


SWIGEXPORT jstring JNICALL Java_JavalibapogeeJNI_StrDb_1CustomerSn_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CamInfo::StrDb **)&jarg1; 
  {
    std::string const &_result_ref =  ((arg1)->CustomerSn);
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_StrDb_1Id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CamInfo::StrDb **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->Id = *arg2;
  
}


SWIGEXPORT jstring JNICALL Java_JavalibapogeeJNI_StrDb_1Id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CamInfo::StrDb **)&jarg1; 
  {
    std::string const &_result_ref =  ((arg1)->Id);
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_StrDb_1Platform_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CamInfo::StrDb **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->Platform = *arg2;
  
}


SWIGEXPORT jstring JNICALL Java_JavalibapogeeJNI_StrDb_1Platform_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CamInfo::StrDb **)&jarg1; 
  {
    std::string const &_result_ref =  ((arg1)->Platform);
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_StrDb_1PartNum_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CamInfo::StrDb **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->PartNum = *arg2;
  
}


SWIGEXPORT jstring JNICALL Java_JavalibapogeeJNI_StrDb_1PartNum_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CamInfo::StrDb **)&jarg1; 
  {
    std::string const &_result_ref =  ((arg1)->PartNum);
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_StrDb_1Ccd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CamInfo::StrDb **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->Ccd = *arg2;
  
}


SWIGEXPORT jstring JNICALL Java_JavalibapogeeJNI_StrDb_1Ccd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CamInfo::StrDb **)&jarg1; 
  {
    std::string const &_result_ref =  ((arg1)->Ccd);
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_StrDb_1CcdSn_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CamInfo::StrDb **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->CcdSn = *arg2;
  
}


SWIGEXPORT jstring JNICALL Java_JavalibapogeeJNI_StrDb_1CcdSn_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CamInfo::StrDb **)&jarg1; 
  {
    std::string const &_result_ref =  ((arg1)->CcdSn);
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_StrDb_1CcdGrade_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CamInfo::StrDb **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->CcdGrade = *arg2;
  
}


SWIGEXPORT jstring JNICALL Java_JavalibapogeeJNI_StrDb_1CcdGrade_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CamInfo::StrDb **)&jarg1; 
  {
    std::string const &_result_ref =  ((arg1)->CcdGrade);
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_StrDb_1ProcBoardRev_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CamInfo::StrDb **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->ProcBoardRev = *arg2;
  
}


SWIGEXPORT jstring JNICALL Java_JavalibapogeeJNI_StrDb_1ProcBoardRev_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CamInfo::StrDb **)&jarg1; 
  {
    std::string const &_result_ref =  ((arg1)->ProcBoardRev);
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_StrDb_1DriveBoardRev_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CamInfo::StrDb **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->DriveBoardRev = *arg2;
  
}


SWIGEXPORT jstring JNICALL Java_JavalibapogeeJNI_StrDb_1DriveBoardRev_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CamInfo::StrDb **)&jarg1; 
  {
    std::string const &_result_ref =  ((arg1)->DriveBoardRev);
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_StrDb_1Shutter_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CamInfo::StrDb **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->Shutter = *arg2;
  
}


SWIGEXPORT jstring JNICALL Java_JavalibapogeeJNI_StrDb_1Shutter_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CamInfo::StrDb **)&jarg1; 
  {
    std::string const &_result_ref =  ((arg1)->Shutter);
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_StrDb_1WindowType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CamInfo::StrDb **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->WindowType = *arg2;
  
}


SWIGEXPORT jstring JNICALL Java_JavalibapogeeJNI_StrDb_1WindowType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CamInfo::StrDb **)&jarg1; 
  {
    std::string const &_result_ref =  ((arg1)->WindowType);
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_StrDb_1MechCfg_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CamInfo::StrDb **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->MechCfg = *arg2;
  
}


SWIGEXPORT jstring JNICALL Java_JavalibapogeeJNI_StrDb_1MechCfg_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CamInfo::StrDb **)&jarg1; 
  {
    std::string const &_result_ref =  ((arg1)->MechCfg);
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_StrDb_1MechRev_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CamInfo::StrDb **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->MechRev = *arg2;
  
}


SWIGEXPORT jstring JNICALL Java_JavalibapogeeJNI_StrDb_1MechRev_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CamInfo::StrDb **)&jarg1; 
  {
    std::string const &_result_ref =  ((arg1)->MechRev);
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_StrDb_1CoolingType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CamInfo::StrDb **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->CoolingType = *arg2;
  
}


SWIGEXPORT jstring JNICALL Java_JavalibapogeeJNI_StrDb_1CoolingType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CamInfo::StrDb **)&jarg1; 
  {
    std::string const &_result_ref =  ((arg1)->CoolingType);
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_StrDb_1FinishFront_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CamInfo::StrDb **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->FinishFront = *arg2;
  
}


SWIGEXPORT jstring JNICALL Java_JavalibapogeeJNI_StrDb_1FinishFront_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CamInfo::StrDb **)&jarg1; 
  {
    std::string const &_result_ref =  ((arg1)->FinishFront);
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_StrDb_1FinishBack_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CamInfo::StrDb **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->FinishBack = *arg2;
  
}


SWIGEXPORT jstring JNICALL Java_JavalibapogeeJNI_StrDb_1FinishBack_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CamInfo::StrDb **)&jarg1; 
  {
    std::string const &_result_ref =  ((arg1)->FinishBack);
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_StrDb_1MpiRev_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CamInfo::StrDb **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->MpiRev = *arg2;
  
}


SWIGEXPORT jstring JNICALL Java_JavalibapogeeJNI_StrDb_1MpiRev_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CamInfo::StrDb **)&jarg1; 
  {
    std::string const &_result_ref =  ((arg1)->MpiRev);
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_StrDb_1TestDate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CamInfo::StrDb **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->TestDate = *arg2;
  
}


SWIGEXPORT jstring JNICALL Java_JavalibapogeeJNI_StrDb_1TestDate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CamInfo::StrDb **)&jarg1; 
  {
    std::string const &_result_ref =  ((arg1)->TestDate);
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_StrDb_1TestedBy_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CamInfo::StrDb **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->TestedBy = *arg2;
  
}


SWIGEXPORT jstring JNICALL Java_JavalibapogeeJNI_StrDb_1TestedBy_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CamInfo::StrDb **)&jarg1; 
  {
    std::string const &_result_ref =  ((arg1)->TestedBy);
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_StrDb_1TestedDllRev_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CamInfo::StrDb **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->TestedDllRev = *arg2;
  
}


SWIGEXPORT jstring JNICALL Java_JavalibapogeeJNI_StrDb_1TestedDllRev_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CamInfo::StrDb **)&jarg1; 
  {
    std::string const &_result_ref =  ((arg1)->TestedDllRev);
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_StrDb_1TestedFwRev_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CamInfo::StrDb **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->TestedFwRev = *arg2;
  
}


SWIGEXPORT jstring JNICALL Java_JavalibapogeeJNI_StrDb_1TestedFwRev_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CamInfo::StrDb **)&jarg1; 
  {
    std::string const &_result_ref =  ((arg1)->TestedFwRev);
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_StrDb_1Gain_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CamInfo::StrDb **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->Gain = *arg2;
  
}


SWIGEXPORT jstring JNICALL Java_JavalibapogeeJNI_StrDb_1Gain_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CamInfo::StrDb **)&jarg1; 
  {
    std::string const &_result_ref =  ((arg1)->Gain);
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_StrDb_1Noise_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CamInfo::StrDb **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->Noise = *arg2;
  
}


SWIGEXPORT jstring JNICALL Java_JavalibapogeeJNI_StrDb_1Noise_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CamInfo::StrDb **)&jarg1; 
  {
    std::string const &_result_ref =  ((arg1)->Noise);
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_StrDb_1Bias_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CamInfo::StrDb **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->Bias = *arg2;
  
}


SWIGEXPORT jstring JNICALL Java_JavalibapogeeJNI_StrDb_1Bias_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CamInfo::StrDb **)&jarg1; 
  {
    std::string const &_result_ref =  ((arg1)->Bias);
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_StrDb_1TestTemp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CamInfo::StrDb **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->TestTemp = *arg2;
  
}


SWIGEXPORT jstring JNICALL Java_JavalibapogeeJNI_StrDb_1TestTemp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CamInfo::StrDb **)&jarg1; 
  {
    std::string const &_result_ref =  ((arg1)->TestTemp);
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_StrDb_1DarkCount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CamInfo::StrDb **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->DarkCount = *arg2;
  
}


SWIGEXPORT jstring JNICALL Java_JavalibapogeeJNI_StrDb_1DarkCount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CamInfo::StrDb **)&jarg1; 
  {
    std::string const &_result_ref =  ((arg1)->DarkCount);
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_StrDb_1DarkDuration_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CamInfo::StrDb **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->DarkDuration = *arg2;
  
}


SWIGEXPORT jstring JNICALL Java_JavalibapogeeJNI_StrDb_1DarkDuration_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CamInfo::StrDb **)&jarg1; 
  {
    std::string const &_result_ref =  ((arg1)->DarkDuration);
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_StrDb_1DarkTemp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CamInfo::StrDb **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->DarkTemp = *arg2;
  
}


SWIGEXPORT jstring JNICALL Java_JavalibapogeeJNI_StrDb_1DarkTemp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CamInfo::StrDb **)&jarg1; 
  {
    std::string const &_result_ref =  ((arg1)->DarkTemp);
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_StrDb_1CoolingDelta_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CamInfo::StrDb **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->CoolingDelta = *arg2;
  
}


SWIGEXPORT jstring JNICALL Java_JavalibapogeeJNI_StrDb_1CoolingDelta_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CamInfo::StrDb **)&jarg1; 
  {
    std::string const &_result_ref =  ((arg1)->CoolingDelta);
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_StrDb_1Ad1Offset_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CamInfo::StrDb **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->Ad1Offset = *arg2;
  
}


SWIGEXPORT jstring JNICALL Java_JavalibapogeeJNI_StrDb_1Ad1Offset_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CamInfo::StrDb **)&jarg1; 
  {
    std::string const &_result_ref =  ((arg1)->Ad1Offset);
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_StrDb_1Ad1Gain_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CamInfo::StrDb **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->Ad1Gain = *arg2;
  
}


SWIGEXPORT jstring JNICALL Java_JavalibapogeeJNI_StrDb_1Ad1Gain_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CamInfo::StrDb **)&jarg1; 
  {
    std::string const &_result_ref =  ((arg1)->Ad1Gain);
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_StrDb_1Ad2Offset_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CamInfo::StrDb **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->Ad2Offset = *arg2;
  
}


SWIGEXPORT jstring JNICALL Java_JavalibapogeeJNI_StrDb_1Ad2Offset_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CamInfo::StrDb **)&jarg1; 
  {
    std::string const &_result_ref =  ((arg1)->Ad2Offset);
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_StrDb_1Ad2Gain_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CamInfo::StrDb **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->Ad2Gain = *arg2;
  
}


SWIGEXPORT jstring JNICALL Java_JavalibapogeeJNI_StrDb_1Ad2Gain_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CamInfo::StrDb **)&jarg1; 
  {
    std::string const &_result_ref =  ((arg1)->Ad2Gain);
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_StrDb_1Rma1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CamInfo::StrDb **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->Rma1 = *arg2;
  
}


SWIGEXPORT jstring JNICALL Java_JavalibapogeeJNI_StrDb_1Rma1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CamInfo::StrDb **)&jarg1; 
  {
    std::string const &_result_ref =  ((arg1)->Rma1);
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_StrDb_1Rma2_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CamInfo::StrDb **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->Rma2 = *arg2;
  
}


SWIGEXPORT jstring JNICALL Java_JavalibapogeeJNI_StrDb_1Rma2_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CamInfo::StrDb **)&jarg1; 
  {
    std::string const &_result_ref =  ((arg1)->Rma2);
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_StrDb_1Comment1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CamInfo::StrDb **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->Comment1 = *arg2;
  
}


SWIGEXPORT jstring JNICALL Java_JavalibapogeeJNI_StrDb_1Comment1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CamInfo::StrDb **)&jarg1; 
  {
    std::string const &_result_ref =  ((arg1)->Comment1);
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_StrDb_1Comment2_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CamInfo::StrDb **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->Comment2 = *arg2;
  
}


SWIGEXPORT jstring JNICALL Java_JavalibapogeeJNI_StrDb_1Comment2_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CamInfo::StrDb **)&jarg1; 
  {
    std::string const &_result_ref =  ((arg1)->Comment2);
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_StrDb_1Comment3_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CamInfo::StrDb **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->Comment3 = *arg2;
  
}


SWIGEXPORT jstring JNICALL Java_JavalibapogeeJNI_StrDb_1Comment3_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CamInfo::StrDb **)&jarg1; 
  {
    std::string const &_result_ref =  ((arg1)->Comment3);
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_JavalibapogeeJNI_new_1StrDb(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CamInfo::StrDb *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  try {
    result = (CamInfo::StrDb *)new CamInfo::StrDb();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  *(CamInfo::StrDb **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_delete_1StrDb(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CamInfo::StrDb **)&jarg1; 
  
  try {
    delete arg1;
    
  } catch (std::bad_alloc &) {
    return ;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return ;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return ;
  }
  
}


SWIGEXPORT jlong JNICALL Java_JavalibapogeeJNI_MkStrVectFromStrDb(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CamInfo::StrDb *arg1 = 0 ;
  SwigValueWrapper< std::vector<std::string > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CamInfo::StrDb **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CamInfo::StrDb const & reference is null");
    return 0;
  } 
  
  try {
    result = CamInfo::MkStrVectFromStrDb((CamInfo::StrDb const &)*arg1);
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  *(std::vector<std::string > **)&jresult = new std::vector<std::string >((std::vector<std::string > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_JavalibapogeeJNI_MkStrDbFromStrVect(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector<std::string > *arg1 = 0 ;
  CamInfo::StrDb result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector<std::string > **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<std::string > const & reference is null");
    return 0;
  } 
  
  try {
    result = CamInfo::MkStrDbFromStrVect((std::vector<std::string > const &)*arg1);
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  *(CamInfo::StrDb **)&jresult = new CamInfo::StrDb((CamInfo::StrDb &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_JavalibapogeeJNI_GetNoOpDb(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CamInfo::StrDb result;
  
  (void)jenv;
  (void)jcls;
  
  try {
    result = CamInfo::GetNoOpDb();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  *(CamInfo::StrDb **)&jresult = new CamInfo::StrDb((CamInfo::StrDb &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_JavalibapogeeJNI_IsAlta(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  uint16_t arg1 ;
  bool result;
  uint16_t *argp1 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(uint16_t **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint16_t");
    return 0;
  }
  arg1 = *argp1; 
  
  try {
    result = (bool)CamModel::IsAlta(arg1);
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_JavalibapogeeJNI_IsGen2Platform(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  uint16_t arg1 ;
  bool result;
  uint16_t *argp1 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(uint16_t **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint16_t");
    return 0;
  }
  arg1 = *argp1; 
  
  try {
    result = (bool)CamModel::IsGen2Platform(arg1);
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_JavalibapogeeJNI_IsFirmwareRevGood(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  uint16_t arg1 ;
  bool result;
  uint16_t *argp1 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(uint16_t **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint16_t");
    return 0;
  }
  arg1 = *argp1; 
  
  try {
    result = (bool)CamModel::IsFirmwareRevGood(arg1);
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_JavalibapogeeJNI_MaskRawId(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  uint16_t arg1 ;
  uint16_t arg2 ;
  uint16_t result;
  uint16_t *argp1 ;
  uint16_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(uint16_t **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint16_t");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(uint16_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint16_t");
    return 0;
  }
  arg2 = *argp2; 
  
  try {
    result = CamModel::MaskRawId(arg1,arg2);
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  *(uint16_t **)&jresult = new uint16_t((uint16_t &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JavalibapogeeJNI_GetPlatformType_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  jint jresult = 0 ;
  uint16_t arg1 ;
  bool arg2 ;
  CamModel::PlatformType result;
  uint16_t *argp1 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(uint16_t **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint16_t");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = jarg2 ? true : false; 
  
  try {
    result = (CamModel::PlatformType)CamModel::GetPlatformType(arg1,arg2);
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JavalibapogeeJNI_GetPlatformType_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  uint16_t arg1 ;
  CamModel::PlatformType result;
  uint16_t *argp1 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(uint16_t **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint16_t");
    return 0;
  }
  arg1 = *argp1; 
  
  try {
    result = (CamModel::PlatformType)CamModel::GetPlatformType(arg1);
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JavalibapogeeJNI_GetPlatformType_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  CamModel::PlatformType result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  
  try {
    result = (CamModel::PlatformType)CamModel::GetPlatformType((std::string const &)*arg1);
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_JavalibapogeeJNI_GetPlatformStr_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  jstring jresult = 0 ;
  uint16_t arg1 ;
  bool arg2 ;
  std::string result;
  uint16_t *argp1 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(uint16_t **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint16_t");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = jarg2 ? true : false; 
  
  try {
    result = CamModel::GetPlatformStr(arg1,arg2);
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_JavalibapogeeJNI_GetPlatformStr_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  uint16_t arg1 ;
  std::string result;
  uint16_t *argp1 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(uint16_t **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint16_t");
    return 0;
  }
  arg1 = *argp1; 
  
  try {
    result = CamModel::GetPlatformStr(arg1);
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_JavalibapogeeJNI_GetModelStr(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  uint16_t arg1 ;
  std::string result;
  uint16_t *argp1 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(uint16_t **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint16_t");
    return 0;
  }
  arg1 = *argp1; 
  
  try {
    result = CamModel::GetModelStr(arg1);
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_JavalibapogeeJNI_GetNoOpFirmwareRev(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  
  try {
    result = CamModel::GetNoOpFirmwareRev();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_JavalibapogeeJNI_FIRMWARE_1PLATFORM_1MASK_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  result = (uint16_t)CamModel::FIRMWARE_PLATFORM_MASK;
  *(uint16_t **)&jresult = new uint16_t((uint16_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_JavalibapogeeJNI_MAX_1ALTA_1FIRMWARE_1REV_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  result = (uint16_t)CamModel::MAX_ALTA_FIRMWARE_REV;
  *(uint16_t **)&jresult = new uint16_t((uint16_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_JavalibapogeeJNI_MIN_1GEN2_1FIRMWARE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  result = (uint16_t)CamModel::MIN_GEN2_FIRMWARE;
  *(uint16_t **)&jresult = new uint16_t((uint16_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_JavalibapogeeJNI_MAX_1GEN2_1FIRMWARE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  result = (uint16_t)CamModel::MAX_GEN2_FIRMWARE;
  *(uint16_t **)&jresult = new uint16_t((uint16_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_JavalibapogeeJNI_ALTA_1CAMERA_1ID_1MASK_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  result = (uint16_t)CamModel::ALTA_CAMERA_ID_MASK;
  *(uint16_t **)&jresult = new uint16_t((uint16_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_JavalibapogeeJNI_GEN2_1CAMERA_1ID_1MASK_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  result = (uint16_t)CamModel::GEN2_CAMERA_ID_MASK;
  *(uint16_t **)&jresult = new uint16_t((uint16_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_JavalibapogeeJNI_NO_1OP_1FRMWR_1REV_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  result = (uint16_t)CamModel::NO_OP_FRMWR_REV;
  *(uint16_t **)&jresult = new uint16_t((uint16_t &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JavalibapogeeJNI_Status_1ConnectionError_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Apg::Status result;
  
  (void)jenv;
  (void)jcls;
  
  try {
    result = (Apg::Status)Apg::Status_ConnectionError;
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JavalibapogeeJNI_Status_1DataError_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Apg::Status result;
  
  (void)jenv;
  (void)jcls;
  
  try {
    result = (Apg::Status)Apg::Status_DataError;
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JavalibapogeeJNI_Status_1PatternError_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Apg::Status result;
  
  (void)jenv;
  (void)jcls;
  
  try {
    result = (Apg::Status)Apg::Status_PatternError;
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JavalibapogeeJNI_Status_1Idle_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Apg::Status result;
  
  (void)jenv;
  (void)jcls;
  
  try {
    result = (Apg::Status)Apg::Status_Idle;
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JavalibapogeeJNI_Status_1Exposing_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Apg::Status result;
  
  (void)jenv;
  (void)jcls;
  
  try {
    result = (Apg::Status)Apg::Status_Exposing;
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JavalibapogeeJNI_Status_1ImagingActive_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Apg::Status result;
  
  (void)jenv;
  (void)jcls;
  
  try {
    result = (Apg::Status)Apg::Status_ImagingActive;
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JavalibapogeeJNI_Status_1ImageReady_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Apg::Status result;
  
  (void)jenv;
  (void)jcls;
  
  try {
    result = (Apg::Status)Apg::Status_ImageReady;
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JavalibapogeeJNI_Status_1Flushing_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Apg::Status result;
  
  (void)jenv;
  (void)jcls;
  
  try {
    result = (Apg::Status)Apg::Status_Flushing;
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JavalibapogeeJNI_Status_1WaitingOnTrigger_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Apg::Status result;
  
  (void)jenv;
  (void)jcls;
  
  try {
    result = (Apg::Status)Apg::Status_WaitingOnTrigger;
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JavalibapogeeJNI_CameraMode_1Normal_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Apg::CameraMode result;
  
  (void)jenv;
  (void)jcls;
  
  try {
    result = (Apg::CameraMode)Apg::CameraMode_Normal;
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JavalibapogeeJNI_CameraMode_1TDI_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Apg::CameraMode result;
  
  (void)jenv;
  (void)jcls;
  
  try {
    result = (Apg::CameraMode)Apg::CameraMode_TDI;
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JavalibapogeeJNI_CameraMode_1Test_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Apg::CameraMode result;
  
  (void)jenv;
  (void)jcls;
  
  try {
    result = (Apg::CameraMode)Apg::CameraMode_Test;
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JavalibapogeeJNI_CameraMode_1ExternalTrigger_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Apg::CameraMode result;
  
  (void)jenv;
  (void)jcls;
  
  try {
    result = (Apg::CameraMode)Apg::CameraMode_ExternalTrigger;
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JavalibapogeeJNI_CameraMode_1ExternalShutter_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Apg::CameraMode result;
  
  (void)jenv;
  (void)jcls;
  
  try {
    result = (Apg::CameraMode)Apg::CameraMode_ExternalShutter;
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JavalibapogeeJNI_CameraMode_1Kinetics_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Apg::CameraMode result;
  
  (void)jenv;
  (void)jcls;
  
  try {
    result = (Apg::CameraMode)Apg::CameraMode_Kinetics;
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JavalibapogeeJNI_CameraMode_1Unknown_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Apg::CameraMode result;
  
  (void)jenv;
  (void)jcls;
  
  try {
    result = (Apg::CameraMode)Apg::CameraMode_Unknown;
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JavalibapogeeJNI_Resolution_1SixteenBit_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Apg::Resolution result;
  
  (void)jenv;
  (void)jcls;
  
  try {
    result = (Apg::Resolution)Apg::Resolution_SixteenBit;
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JavalibapogeeJNI_Resolution_1TwelveBit_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Apg::Resolution result;
  
  (void)jenv;
  (void)jcls;
  
  try {
    result = (Apg::Resolution)Apg::Resolution_TwelveBit;
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JavalibapogeeJNI_CoolerStatus_1Off_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Apg::CoolerStatus result;
  
  (void)jenv;
  (void)jcls;
  
  try {
    result = (Apg::CoolerStatus)Apg::CoolerStatus_Off;
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JavalibapogeeJNI_CoolerStatus_1RampingToSetPoint_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Apg::CoolerStatus result;
  
  (void)jenv;
  (void)jcls;
  
  try {
    result = (Apg::CoolerStatus)Apg::CoolerStatus_RampingToSetPoint;
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JavalibapogeeJNI_CoolerStatus_1AtSetPoint_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Apg::CoolerStatus result;
  
  (void)jenv;
  (void)jcls;
  
  try {
    result = (Apg::CoolerStatus)Apg::CoolerStatus_AtSetPoint;
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JavalibapogeeJNI_CoolerStatus_1Revision_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Apg::CoolerStatus result;
  
  (void)jenv;
  (void)jcls;
  
  try {
    result = (Apg::CoolerStatus)Apg::CoolerStatus_Revision;
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JavalibapogeeJNI_CoolerStatus_1Suspended_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Apg::CoolerStatus result;
  
  (void)jenv;
  (void)jcls;
  
  try {
    result = (Apg::CoolerStatus)Apg::CoolerStatus_Suspended;
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JavalibapogeeJNI_FanMode_1Off_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Apg::FanMode result;
  
  (void)jenv;
  (void)jcls;
  
  try {
    result = (Apg::FanMode)Apg::FanMode_Off;
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JavalibapogeeJNI_FanMode_1Low_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Apg::FanMode result;
  
  (void)jenv;
  (void)jcls;
  
  try {
    result = (Apg::FanMode)Apg::FanMode_Low;
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JavalibapogeeJNI_FanMode_1Medium_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Apg::FanMode result;
  
  (void)jenv;
  (void)jcls;
  
  try {
    result = (Apg::FanMode)Apg::FanMode_Medium;
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JavalibapogeeJNI_FanMode_1High_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Apg::FanMode result;
  
  (void)jenv;
  (void)jcls;
  
  try {
    result = (Apg::FanMode)Apg::FanMode_High;
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JavalibapogeeJNI_FanMode_1Unknown_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Apg::FanMode result;
  
  (void)jenv;
  (void)jcls;
  
  try {
    result = (Apg::FanMode)Apg::FanMode_Unknown;
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JavalibapogeeJNI_LedState_1Expose_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Apg::LedState result;
  
  (void)jenv;
  (void)jcls;
  
  try {
    result = (Apg::LedState)Apg::LedState_Expose;
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JavalibapogeeJNI_LedState_1ImageActive_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Apg::LedState result;
  
  (void)jenv;
  (void)jcls;
  
  try {
    result = (Apg::LedState)Apg::LedState_ImageActive;
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JavalibapogeeJNI_LedState_1Flushing_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Apg::LedState result;
  
  (void)jenv;
  (void)jcls;
  
  try {
    result = (Apg::LedState)Apg::LedState_Flushing;
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JavalibapogeeJNI_LedState_1ExtTriggerWaiting_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Apg::LedState result;
  
  (void)jenv;
  (void)jcls;
  
  try {
    result = (Apg::LedState)Apg::LedState_ExtTriggerWaiting;
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JavalibapogeeJNI_LedState_1ExtTriggerReceived_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Apg::LedState result;
  
  (void)jenv;
  (void)jcls;
  
  try {
    result = (Apg::LedState)Apg::LedState_ExtTriggerReceived;
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JavalibapogeeJNI_LedState_1ExtShutterInput_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Apg::LedState result;
  
  (void)jenv;
  (void)jcls;
  
  try {
    result = (Apg::LedState)Apg::LedState_ExtShutterInput;
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JavalibapogeeJNI_LedState_1ExtStartReadout_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Apg::LedState result;
  
  (void)jenv;
  (void)jcls;
  
  try {
    result = (Apg::LedState)Apg::LedState_ExtStartReadout;
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JavalibapogeeJNI_LedState_1AtTemp_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Apg::LedState result;
  
  (void)jenv;
  (void)jcls;
  
  try {
    result = (Apg::LedState)Apg::LedState_AtTemp;
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JavalibapogeeJNI_LedState_1Unknown_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Apg::LedState result;
  
  (void)jenv;
  (void)jcls;
  
  try {
    result = (Apg::LedState)Apg::LedState_Unknown;
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JavalibapogeeJNI_LedMode_1DisableAll_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Apg::LedMode result;
  
  (void)jenv;
  (void)jcls;
  
  try {
    result = (Apg::LedMode)Apg::LedMode_DisableAll;
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JavalibapogeeJNI_LedMode_1DisableWhileExpose_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Apg::LedMode result;
  
  (void)jenv;
  (void)jcls;
  
  try {
    result = (Apg::LedMode)Apg::LedMode_DisableWhileExpose;
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JavalibapogeeJNI_LedMode_1EnableAll_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Apg::LedMode result;
  
  (void)jenv;
  (void)jcls;
  
  try {
    result = (Apg::LedMode)Apg::LedMode_EnableAll;
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JavalibapogeeJNI_LedMode_1Unknown_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Apg::LedMode result;
  
  (void)jenv;
  (void)jcls;
  
  try {
    result = (Apg::LedMode)Apg::LedMode_Unknown;
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JavalibapogeeJNI_ErrorType_1Connection_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Apg::ErrorType result;
  
  (void)jenv;
  (void)jcls;
  
  try {
    result = (Apg::ErrorType)Apg::ErrorType_Connection;
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JavalibapogeeJNI_ErrorType_1Critical_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Apg::ErrorType result;
  
  (void)jenv;
  (void)jcls;
  
  try {
    result = (Apg::ErrorType)Apg::ErrorType_Critical;
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_JavalibapogeeJNI_ErrorType_1Serious_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Apg::ErrorType result;
  
  (void)jenv;
  (void)jcls;
  
  try {
    result = (Apg::ErrorType)Apg::ErrorType_Serious;
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_JavalibapogeeJNI_new_1CameraStatusRegs_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CameraStatusRegs *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  try {
    result = (CameraStatusRegs *)new CameraStatusRegs();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  *(CameraStatusRegs **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_JavalibapogeeJNI_new_1CameraStatusRegs_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  CameraStatusRegs::AdvStatus *arg1 = 0 ;
  CameraStatusRegs *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CameraStatusRegs::AdvStatus **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CameraStatusRegs::AdvStatus const & reference is null");
    return 0;
  } 
  
  try {
    result = (CameraStatusRegs *)new CameraStatusRegs((CameraStatusRegs::AdvStatus const &)*arg1);
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  *(CameraStatusRegs **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_JavalibapogeeJNI_new_1CameraStatusRegs_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  CameraStatusRegs::BasicStatus *arg1 = 0 ;
  CameraStatusRegs *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CameraStatusRegs::BasicStatus **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CameraStatusRegs::BasicStatus const & reference is null");
    return 0;
  } 
  
  try {
    result = (CameraStatusRegs *)new CameraStatusRegs((CameraStatusRegs::BasicStatus const &)*arg1);
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  *(CameraStatusRegs **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_delete_1CameraStatusRegs(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CameraStatusRegs *arg1 = (CameraStatusRegs *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CameraStatusRegs **)&jarg1; 
  
  try {
    delete arg1;
    
  } catch (std::bad_alloc &) {
    return ;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return ;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return ;
  }
  
}


SWIGEXPORT jlong JNICALL Java_JavalibapogeeJNI_CameraStatusRegs_1GetTempHeatSink(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CameraStatusRegs *arg1 = (CameraStatusRegs *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CameraStatusRegs **)&jarg1; 
  
  try {
    result = (arg1)->GetTempHeatSink();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  *(uint16_t **)&jresult = new uint16_t((uint16_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_JavalibapogeeJNI_CameraStatusRegs_1GetTempCcd(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CameraStatusRegs *arg1 = (CameraStatusRegs *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CameraStatusRegs **)&jarg1; 
  
  try {
    result = (arg1)->GetTempCcd();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  *(uint16_t **)&jresult = new uint16_t((uint16_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_JavalibapogeeJNI_CameraStatusRegs_1GetCoolerDrive(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CameraStatusRegs *arg1 = (CameraStatusRegs *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CameraStatusRegs **)&jarg1; 
  
  try {
    result = (arg1)->GetCoolerDrive();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  *(uint16_t **)&jresult = new uint16_t((uint16_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_JavalibapogeeJNI_CameraStatusRegs_1GetInputVoltage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CameraStatusRegs *arg1 = (CameraStatusRegs *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CameraStatusRegs **)&jarg1; 
  
  try {
    result = (arg1)->GetInputVoltage();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  *(uint16_t **)&jresult = new uint16_t((uint16_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_JavalibapogeeJNI_CameraStatusRegs_1GetTdiCounter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CameraStatusRegs *arg1 = (CameraStatusRegs *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CameraStatusRegs **)&jarg1; 
  
  try {
    result = (arg1)->GetTdiCounter();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  *(uint16_t **)&jresult = new uint16_t((uint16_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_JavalibapogeeJNI_CameraStatusRegs_1GetSequenceCounter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CameraStatusRegs *arg1 = (CameraStatusRegs *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CameraStatusRegs **)&jarg1; 
  
  try {
    result = (arg1)->GetSequenceCounter();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  *(uint16_t **)&jresult = new uint16_t((uint16_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_JavalibapogeeJNI_CameraStatusRegs_1GetStatus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CameraStatusRegs *arg1 = (CameraStatusRegs *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CameraStatusRegs **)&jarg1; 
  
  try {
    result = ((CameraStatusRegs const *)arg1)->GetStatus();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  *(uint16_t **)&jresult = new uint16_t((uint16_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_JavalibapogeeJNI_CameraStatusRegs_1GetuFrame(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CameraStatusRegs *arg1 = (CameraStatusRegs *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CameraStatusRegs **)&jarg1; 
  
  try {
    result = (arg1)->GetuFrame();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  *(uint16_t **)&jresult = new uint16_t((uint16_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_JavalibapogeeJNI_CameraStatusRegs_1GetMostRecentFrame(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CameraStatusRegs *arg1 = (CameraStatusRegs *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CameraStatusRegs **)&jarg1; 
  
  try {
    result = (arg1)->GetMostRecentFrame();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  *(uint16_t **)&jresult = new uint16_t((uint16_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_JavalibapogeeJNI_CameraStatusRegs_1GetReadyFrame(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CameraStatusRegs *arg1 = (CameraStatusRegs *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CameraStatusRegs **)&jarg1; 
  
  try {
    result = (arg1)->GetReadyFrame();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  *(uint16_t **)&jresult = new uint16_t((uint16_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_JavalibapogeeJNI_CameraStatusRegs_1GetCurrentFrame(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CameraStatusRegs *arg1 = (CameraStatusRegs *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CameraStatusRegs **)&jarg1; 
  
  try {
    result = (arg1)->GetCurrentFrame();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  *(uint16_t **)&jresult = new uint16_t((uint16_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_JavalibapogeeJNI_CameraStatusRegs_1GetFetchCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CameraStatusRegs *arg1 = (CameraStatusRegs *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CameraStatusRegs **)&jarg1; 
  
  try {
    result = (arg1)->GetFetchCount();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  *(uint32_t **)&jresult = new uint32_t((uint32_t &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_JavalibapogeeJNI_CameraStatusRegs_1GetDataAvailFlag(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  CameraStatusRegs *arg1 = (CameraStatusRegs *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CameraStatusRegs **)&jarg1; 
  
  try {
    result = (bool)((CameraStatusRegs const *)arg1)->GetDataAvailFlag();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_CameraStatusRegs_1QueryStatusRegs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6, jlong jarg7, jlong jarg8, jlong jarg9, jlong jarg10, jlong jarg11) {
  CameraStatusRegs *arg1 = (CameraStatusRegs *) 0 ;
  uint16_t *arg2 = 0 ;
  uint16_t *arg3 = 0 ;
  uint16_t *arg4 = 0 ;
  uint16_t *arg5 = 0 ;
  uint16_t *arg6 = 0 ;
  uint16_t *arg7 = 0 ;
  uint16_t *arg8 = 0 ;
  uint16_t *arg9 = 0 ;
  uint16_t *arg10 = 0 ;
  uint16_t *arg11 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CameraStatusRegs **)&jarg1; 
  arg2 = *(uint16_t **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "uint16_t & reference is null");
    return ;
  } 
  arg3 = *(uint16_t **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "uint16_t & reference is null");
    return ;
  } 
  arg4 = *(uint16_t **)&jarg4;
  if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "uint16_t & reference is null");
    return ;
  } 
  arg5 = *(uint16_t **)&jarg5;
  if(!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "uint16_t & reference is null");
    return ;
  } 
  arg6 = *(uint16_t **)&jarg6;
  if(!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "uint16_t & reference is null");
    return ;
  } 
  arg7 = *(uint16_t **)&jarg7;
  if(!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "uint16_t & reference is null");
    return ;
  } 
  arg8 = *(uint16_t **)&jarg8;
  if(!arg8) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "uint16_t & reference is null");
    return ;
  } 
  arg9 = *(uint16_t **)&jarg9;
  if(!arg9) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "uint16_t & reference is null");
    return ;
  } 
  arg10 = *(uint16_t **)&jarg10;
  if(!arg10) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "uint16_t & reference is null");
    return ;
  } 
  arg11 = *(uint16_t **)&jarg11;
  if(!arg11) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "uint16_t & reference is null");
    return ;
  } 
  
  try {
    (arg1)->QueryStatusRegs(*arg2,*arg3,*arg4,*arg5,*arg6,*arg7,*arg8,*arg9,*arg10,*arg11);
  } catch (std::bad_alloc &) {
    return ;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return ;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return ;
  }
  
}


SWIGEXPORT jstring JNICALL Java_JavalibapogeeJNI_CameraStatusRegs_1GetStatusStr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CameraStatusRegs *arg1 = (CameraStatusRegs *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CameraStatusRegs **)&jarg1; 
  
  try {
    result = ((CameraStatusRegs const *)arg1)->GetStatusStr();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_CameraStatusRegs_1Update_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  CameraStatusRegs *arg1 = (CameraStatusRegs *) 0 ;
  CameraStatusRegs::AdvStatus *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CameraStatusRegs **)&jarg1; 
  arg2 = *(CameraStatusRegs::AdvStatus **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CameraStatusRegs::AdvStatus const & reference is null");
    return ;
  } 
  
  try {
    (arg1)->Update((CameraStatusRegs::AdvStatus const &)*arg2);
  } catch (std::bad_alloc &) {
    return ;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return ;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_CameraStatusRegs_1Update_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  CameraStatusRegs *arg1 = (CameraStatusRegs *) 0 ;
  CameraStatusRegs::BasicStatus *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CameraStatusRegs **)&jarg1; 
  arg2 = *(CameraStatusRegs::BasicStatus **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CameraStatusRegs::BasicStatus const & reference is null");
    return ;
  } 
  
  try {
    (arg1)->Update((CameraStatusRegs::BasicStatus const &)*arg2);
  } catch (std::bad_alloc &) {
    return ;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return ;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return ;
  }
  
}


SWIGEXPORT jlong JNICALL Java_JavalibapogeeJNI_new_1FindDeviceEthernet(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  FindDeviceEthernet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  try {
    result = (FindDeviceEthernet *)new FindDeviceEthernet();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  *(FindDeviceEthernet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_delete_1FindDeviceEthernet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FindDeviceEthernet *arg1 = (FindDeviceEthernet *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FindDeviceEthernet **)&jarg1; 
  
  try {
    delete arg1;
    
  } catch (std::bad_alloc &) {
    return ;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return ;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return ;
  }
  
}


SWIGEXPORT jstring JNICALL Java_JavalibapogeeJNI_FindDeviceEthernet_1Find(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  FindDeviceEthernet *arg1 = (FindDeviceEthernet *) 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FindDeviceEthernet **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  
  try {
    result = (arg1)->Find((std::string const &)*arg2);
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_JavalibapogeeJNI_FindDeviceEthernet_1GetElapsedSecs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FindDeviceEthernet *arg1 = (FindDeviceEthernet *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FindDeviceEthernet **)&jarg1; 
  
  try {
    result = (arg1)->GetElapsedSecs();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  *(int32_t **)&jresult = new int32_t((int32_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_JavalibapogeeJNI_FindDeviceEthernet_1GetTimeout(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FindDeviceEthernet *arg1 = (FindDeviceEthernet *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FindDeviceEthernet **)&jarg1; 
  
  try {
    result = (arg1)->GetTimeout();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  *(int32_t **)&jresult = new int32_t((int32_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_delete_1FindDeviceUsb(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FindDeviceUsb *arg1 = (FindDeviceUsb *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FindDeviceUsb **)&jarg1; 
  
  try {
    delete arg1;
    
  } catch (std::bad_alloc &) {
    return ;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return ;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return ;
  }
  
}


SWIGEXPORT jstring JNICALL Java_JavalibapogeeJNI_FindDeviceUsb_1Find(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  FindDeviceUsb *arg1 = (FindDeviceUsb *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FindDeviceUsb **)&jarg1; 
  
  try {
    result = (arg1)->Find();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_JavalibapogeeJNI_new_1FindDeviceUsb(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  FindDeviceUsb *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  try {
    result = (FindDeviceUsb *)new FindDeviceUsb();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  *(FindDeviceUsb **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_JavalibapogeeJNI_new_1Gee(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Gee *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  try {
    result = (Gee *)new Gee();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  *(Gee **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_delete_1Gee(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Gee *arg1 = (Gee *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Gee **)&jarg1; 
  
  try {
    delete arg1;
    
  } catch (std::bad_alloc &) {
    return ;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return ;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_Gee_1OpenConnection(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jlong jarg5) {
  Gee *arg1 = (Gee *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  uint16_t arg4 ;
  uint16_t arg5 ;
  uint16_t const *argp4 ;
  uint16_t const *argp5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Gee **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  argp4 = *(uint16_t **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint16_t const");
    return ;
  }
  arg4 = *argp4; 
  argp5 = *(uint16_t **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint16_t const");
    return ;
  }
  arg5 = *argp5; 
  
  try {
    (arg1)->OpenConnection((std::string const &)*arg2,(std::string const &)*arg3,arg4,arg5);
  } catch (std::bad_alloc &) {
    return ;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return ;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_Gee_1CloseConnection(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Gee *arg1 = (Gee *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Gee **)&jarg1; 
  
  try {
    (arg1)->CloseConnection();
  } catch (std::bad_alloc &) {
    return ;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return ;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_Gee_1StartExposure(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jboolean jarg3) {
  Gee *arg1 = (Gee *) 0 ;
  double arg2 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Gee **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = jarg3 ? true : false; 
  
  try {
    (arg1)->StartExposure(arg2,arg3);
  } catch (std::bad_alloc &) {
    return ;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return ;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return ;
  }
  
}


SWIGEXPORT jlong JNICALL Java_JavalibapogeeJNI_Gee_1GetNumAdChannels(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Gee *arg1 = (Gee *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Gee **)&jarg1; 
  
  try {
    result = (arg1)->GetNumAdChannels();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  *(int32_t **)&jresult = new int32_t((int32_t &)result); 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_JavalibapogeeJNI_Gee_1GetTempHeatsink(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Gee *arg1 = (Gee *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Gee **)&jarg1; 
  
  try {
    result = (double)(arg1)->GetTempHeatsink();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_JavalibapogeeJNI_Gee_1GetMacAddress(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Gee *arg1 = (Gee *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Gee **)&jarg1; 
  
  try {
    result = (arg1)->GetMacAddress();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_JavalibapogeeJNI_new_1Quad(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Quad *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  try {
    result = (Quad *)new Quad();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  *(Quad **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_delete_1Quad(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Quad *arg1 = (Quad *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Quad **)&jarg1; 
  
  try {
    delete arg1;
    
  } catch (std::bad_alloc &) {
    return ;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return ;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_Quad_1OpenConnection(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jlong jarg5) {
  Quad *arg1 = (Quad *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  uint16_t arg4 ;
  uint16_t arg5 ;
  uint16_t const *argp4 ;
  uint16_t const *argp5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Quad **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  argp4 = *(uint16_t **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint16_t const");
    return ;
  }
  arg4 = *argp4; 
  argp5 = *(uint16_t **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint16_t const");
    return ;
  }
  arg5 = *argp5; 
  
  try {
    (arg1)->OpenConnection((std::string const &)*arg2,(std::string const &)*arg3,arg4,arg5);
  } catch (std::bad_alloc &) {
    return ;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return ;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_Quad_1StartExposure(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jboolean jarg3) {
  Quad *arg1 = (Quad *) 0 ;
  double arg2 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Quad **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = jarg3 ? true : false; 
  
  try {
    (arg1)->StartExposure(arg2,arg3);
  } catch (std::bad_alloc &) {
    return ;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return ;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return ;
  }
  
}


SWIGEXPORT jboolean JNICALL Java_JavalibapogeeJNI_Quad_1IsPixelReorderOn(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Quad *arg1 = (Quad *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Quad **)&jarg1; 
  
  try {
    result = (bool)(arg1)->IsPixelReorderOn();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_Quad_1SetPixelReorder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Quad *arg1 = (Quad *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Quad **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  
  try {
    (arg1)->SetPixelReorder(arg2);
  } catch (std::bad_alloc &) {
    return ;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return ;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return ;
  }
  
}


SWIGEXPORT jlong JNICALL Java_JavalibapogeeJNI_Quad_1GetNumAdChannels(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Quad *arg1 = (Quad *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Quad **)&jarg1; 
  
  try {
    result = (arg1)->GetNumAdChannels();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  *(int32_t **)&jresult = new int32_t((int32_t &)result); 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_JavalibapogeeJNI_Quad_1GetTempHeatsink(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Quad *arg1 = (Quad *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Quad **)&jarg1; 
  
  try {
    result = (double)(arg1)->GetTempHeatsink();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_JavalibapogeeJNI_new_1HiC(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  HiC *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  try {
    result = (HiC *)new HiC();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  *(HiC **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_delete_1HiC(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  HiC *arg1 = (HiC *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(HiC **)&jarg1; 
  
  try {
    delete arg1;
    
  } catch (std::bad_alloc &) {
    return ;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return ;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_HiC_1SetSerialNumber(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  HiC *arg1 = (HiC *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HiC **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  
  try {
    (arg1)->SetSerialNumber((std::string const &)*arg2);
  } catch (std::bad_alloc &) {
    return ;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return ;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return ;
  }
  
}


SWIGEXPORT jlong JNICALL Java_JavalibapogeeJNI_HiC_1GetCamInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  HiC *arg1 = (HiC *) 0 ;
  CamInfo::StrDb result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HiC **)&jarg1; 
  
  try {
    result = (arg1)->GetCamInfo();
  } catch (std::bad_alloc &) {
    return 0;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return 0;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return 0;
  }
  
  *(CamInfo::StrDb **)&jresult = new CamInfo::StrDb((CamInfo::StrDb &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_HiC_1SetCamInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  HiC *arg1 = (HiC *) 0 ;
  CamInfo::StrDb *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(HiC **)&jarg1; 
  arg2 = *(CamInfo::StrDb **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CamInfo::StrDb & reference is null");
    return ;
  } 
  
  try {
    (arg1)->SetCamInfo(*arg2);
  } catch (std::bad_alloc &) {
    return ;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return ;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_JavalibapogeeJNI_HiC_1Get4kby4kImage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  HiC *arg1 = (HiC *) 0 ;
  std::vector<uint16_t > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HiC **)&jarg1; 
  arg2 = *(std::vector<uint16_t > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<uint16_t > & reference is null");
    return ;
  } 
  
  try {
    (arg1)->Get4kby4kImage(*arg2);
  } catch (std::bad_alloc &) {
    return ;
  } catch (std::exception &e) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, e.what());
    return ;
  } catch (...) {
    jclass clazz = jenv->FindClass("java/lang/Exception");
    jenv->ThrowNew(clazz, "Unknown exception");
    return ;
  }
  
}


SWIGEXPORT jlong JNICALL Java_JavalibapogeeJNI_SWIGCamGen2BaseUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ApogeeCam **)&baseptr = *(CamGen2Base **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_JavalibapogeeJNI_SWIGAltaUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ApogeeCam **)&baseptr = *(Alta **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_JavalibapogeeJNI_SWIGAscentUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(CamGen2Base **)&baseptr = *(Ascent **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_JavalibapogeeJNI_SWIGGeeUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(CamGen2Base **)&baseptr = *(Gee **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_JavalibapogeeJNI_SWIGQuadUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(CamGen2Base **)&baseptr = *(Quad **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_JavalibapogeeJNI_SWIGHiCUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Quad **)&baseptr = *(HiC **)&jarg1;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

