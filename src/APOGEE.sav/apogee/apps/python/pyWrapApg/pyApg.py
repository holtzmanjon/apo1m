# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyApg', [dirname(__file__)])
        except ImportError:
            import _pyApg
            return _pyApg
        if fp is not None:
            try:
                _mod = imp.load_module('_pyApg', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyApg = swig_import_helper()
    del swig_import_helper
else:
    import _pyApg
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class ApogeeCam(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ApogeeCam, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ApogeeCam, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyApg.delete_ApogeeCam
    __del__ = lambda self : None;
    def Reset(self): return _pyApg.ApogeeCam_Reset(self)
    def ReadReg(self, *args): return _pyApg.ApogeeCam_ReadReg(self, *args)
    def WriteReg(self, *args): return _pyApg.ApogeeCam_WriteReg(self, *args)
    def SetRoiNumRows(self, *args): return _pyApg.ApogeeCam_SetRoiNumRows(self, *args)
    def SetRoiNumCols(self, *args): return _pyApg.ApogeeCam_SetRoiNumCols(self, *args)
    def GetRoiNumRows(self): return _pyApg.ApogeeCam_GetRoiNumRows(self)
    def GetRoiNumCols(self): return _pyApg.ApogeeCam_GetRoiNumCols(self)
    def SetRoiStartRow(self, *args): return _pyApg.ApogeeCam_SetRoiStartRow(self, *args)
    def SetRoiStartCol(self, *args): return _pyApg.ApogeeCam_SetRoiStartCol(self, *args)
    def GetRoiStartRow(self): return _pyApg.ApogeeCam_GetRoiStartRow(self)
    def GetRoiStartCol(self): return _pyApg.ApogeeCam_GetRoiStartCol(self)
    def SetRoiBinRow(self, *args): return _pyApg.ApogeeCam_SetRoiBinRow(self, *args)
    def GetRoiBinRow(self): return _pyApg.ApogeeCam_GetRoiBinRow(self)
    def SetRoiBinCol(self, *args): return _pyApg.ApogeeCam_SetRoiBinCol(self, *args)
    def GetRoiBinCol(self): return _pyApg.ApogeeCam_GetRoiBinCol(self)
    def GetFirmwareRev(self): return _pyApg.ApogeeCam_GetFirmwareRev(self)
    def SetImageCount(self, *args): return _pyApg.ApogeeCam_SetImageCount(self, *args)
    def GetImageCount(self): return _pyApg.ApogeeCam_GetImageCount(self)
    def GetImgSequenceCount(self): return _pyApg.ApogeeCam_GetImgSequenceCount(self)
    def SetSequenceDelay(self, *args): return _pyApg.ApogeeCam_SetSequenceDelay(self, *args)
    def GetSequenceDelay(self): return _pyApg.ApogeeCam_GetSequenceDelay(self)
    def SetVariableSequenceDelay(self, *args): return _pyApg.ApogeeCam_SetVariableSequenceDelay(self, *args)
    def GetVariableSequenceDelay(self): return _pyApg.ApogeeCam_GetVariableSequenceDelay(self)
    def SetTdiRate(self, *args): return _pyApg.ApogeeCam_SetTdiRate(self, *args)
    def GetTdiRate(self): return _pyApg.ApogeeCam_GetTdiRate(self)
    def SetTdiRows(self, *args): return _pyApg.ApogeeCam_SetTdiRows(self, *args)
    def GetTdiRows(self): return _pyApg.ApogeeCam_GetTdiRows(self)
    def GetTdiCounter(self): return _pyApg.ApogeeCam_GetTdiCounter(self)
    def SetTdiBinningRows(self, *args): return _pyApg.ApogeeCam_SetTdiBinningRows(self, *args)
    def GetTdiBinningRows(self): return _pyApg.ApogeeCam_GetTdiBinningRows(self)
    def SetKineticsSectionHeight(self, *args): return _pyApg.ApogeeCam_SetKineticsSectionHeight(self, *args)
    def GetKineticsSectionHeight(self): return _pyApg.ApogeeCam_GetKineticsSectionHeight(self)
    def SetKineticsSections(self, *args): return _pyApg.ApogeeCam_SetKineticsSections(self, *args)
    def GetKineticsSections(self): return _pyApg.ApogeeCam_GetKineticsSections(self)
    def SetKineticsShiftInterval(self, *args): return _pyApg.ApogeeCam_SetKineticsShiftInterval(self, *args)
    def GetKineticsShiftInterval(self): return _pyApg.ApogeeCam_GetKineticsShiftInterval(self)
    def SetShutterStrobePosition(self, *args): return _pyApg.ApogeeCam_SetShutterStrobePosition(self, *args)
    def GetShutterStrobePosition(self): return _pyApg.ApogeeCam_GetShutterStrobePosition(self)
    def SetShutterStrobePeriod(self, *args): return _pyApg.ApogeeCam_SetShutterStrobePeriod(self, *args)
    def GetShutterStrobePeriod(self): return _pyApg.ApogeeCam_GetShutterStrobePeriod(self)
    def SetShutterCloseDelay(self, *args): return _pyApg.ApogeeCam_SetShutterCloseDelay(self, *args)
    def GetShutterCloseDelay(self): return _pyApg.ApogeeCam_GetShutterCloseDelay(self)
    def SetCoolerBackoffPoint(self, *args): return _pyApg.ApogeeCam_SetCoolerBackoffPoint(self, *args)
    def GetCoolerBackoffPoint(self): return _pyApg.ApogeeCam_GetCoolerBackoffPoint(self)
    def SetCoolerSetPoint(self, *args): return _pyApg.ApogeeCam_SetCoolerSetPoint(self, *args)
    def GetCoolerSetPoint(self): return _pyApg.ApogeeCam_GetCoolerSetPoint(self)
    def GetCameraMode(self): return _pyApg.ApogeeCam_GetCameraMode(self)
    def SetCameraMode(self, *args): return _pyApg.ApogeeCam_SetCameraMode(self, *args)
    def SetFastSequence(self, *args): return _pyApg.ApogeeCam_SetFastSequence(self, *args)
    def IsFastSequenceOn(self): return _pyApg.ApogeeCam_IsFastSequenceOn(self)
    def SetBulkDownload(self, *args): return _pyApg.ApogeeCam_SetBulkDownload(self, *args)
    def IsBulkDownloadOn(self): return _pyApg.ApogeeCam_IsBulkDownloadOn(self)
    def SetPipelineDownload(self, *args): return _pyApg.ApogeeCam_SetPipelineDownload(self, *args)
    def IsPipelineDownloadOn(self): return _pyApg.ApogeeCam_IsPipelineDownloadOn(self)
    def SetIoPortAssignment(self, *args): return _pyApg.ApogeeCam_SetIoPortAssignment(self, *args)
    def GetIoPortAssignment(self): return _pyApg.ApogeeCam_GetIoPortAssignment(self)
    def SetIoPortBlankingBits(self, *args): return _pyApg.ApogeeCam_SetIoPortBlankingBits(self, *args)
    def GetIoPortBlankingBits(self): return _pyApg.ApogeeCam_GetIoPortBlankingBits(self)
    def SetIoPortDirection(self, *args): return _pyApg.ApogeeCam_SetIoPortDirection(self, *args)
    def GetIoPortDirection(self): return _pyApg.ApogeeCam_GetIoPortDirection(self)
    def SetIoPortData(self, *args): return _pyApg.ApogeeCam_SetIoPortData(self, *args)
    def GetIoPortData(self): return _pyApg.ApogeeCam_GetIoPortData(self)
    def SetPreFlash(self, *args): return _pyApg.ApogeeCam_SetPreFlash(self, *args)
    def GetPreFlash(self): return _pyApg.ApogeeCam_GetPreFlash(self)
    def SetExternalTrigger(self, *args): return _pyApg.ApogeeCam_SetExternalTrigger(self, *args)
    def IsTriggerNormEachOn(self): return _pyApg.ApogeeCam_IsTriggerNormEachOn(self)
    def IsTriggerNormGroupOn(self): return _pyApg.ApogeeCam_IsTriggerNormGroupOn(self)
    def IsTriggerTdiKinEachOn(self): return _pyApg.ApogeeCam_IsTriggerTdiKinEachOn(self)
    def IsTriggerTdiKinGroupOn(self): return _pyApg.ApogeeCam_IsTriggerTdiKinGroupOn(self)
    def IsTriggerExternalShutterOn(self): return _pyApg.ApogeeCam_IsTriggerExternalShutterOn(self)
    def IsTriggerExternalReadoutOn(self): return _pyApg.ApogeeCam_IsTriggerExternalReadoutOn(self)
    def SetShutterState(self, *args): return _pyApg.ApogeeCam_SetShutterState(self, *args)
    def GetShutterState(self): return _pyApg.ApogeeCam_GetShutterState(self)
    def IsShutterForcedOpen(self): return _pyApg.ApogeeCam_IsShutterForcedOpen(self)
    def IsShutterForcedClosed(self): return _pyApg.ApogeeCam_IsShutterForcedClosed(self)
    def IsShutterOpen(self): return _pyApg.ApogeeCam_IsShutterOpen(self)
    def SetShutterAmpCtrl(self, *args): return _pyApg.ApogeeCam_SetShutterAmpCtrl(self, *args)
    def IsShutterAmpCtrlOn(self): return _pyApg.ApogeeCam_IsShutterAmpCtrlOn(self)
    def SetCooler(self, *args): return _pyApg.ApogeeCam_SetCooler(self, *args)
    def GetCoolerStatus(self): return _pyApg.ApogeeCam_GetCoolerStatus(self)
    def IsCoolerOn(self): return _pyApg.ApogeeCam_IsCoolerOn(self)
    def GetTempCcd(self): return _pyApg.ApogeeCam_GetTempCcd(self)
    def SetCcdAdcResolution(self, *args): return _pyApg.ApogeeCam_SetCcdAdcResolution(self, *args)
    def GetCcdAdcResolution(self): return _pyApg.ApogeeCam_GetCcdAdcResolution(self)
    def SetCcdAdcSpeed(self, *args): return _pyApg.ApogeeCam_SetCcdAdcSpeed(self, *args)
    def GetCcdAdcSpeed(self): return _pyApg.ApogeeCam_GetCcdAdcSpeed(self)
    def GetMaxBinCols(self): return _pyApg.ApogeeCam_GetMaxBinCols(self)
    def GetMaxBinRows(self): return _pyApg.ApogeeCam_GetMaxBinRows(self)
    def GetMaxImgCols(self): return _pyApg.ApogeeCam_GetMaxImgCols(self)
    def GetMaxImgRows(self): return _pyApg.ApogeeCam_GetMaxImgRows(self)
    def GetTotalRows(self): return _pyApg.ApogeeCam_GetTotalRows(self)
    def GetTotalCols(self): return _pyApg.ApogeeCam_GetTotalCols(self)
    def GetNumOverscanCols(self): return _pyApg.ApogeeCam_GetNumOverscanCols(self)
    def IsInterline(self): return _pyApg.ApogeeCam_IsInterline(self)
    def GetPlatformType(self): return _pyApg.ApogeeCam_GetPlatformType(self)
    def SetLedAState(self, *args): return _pyApg.ApogeeCam_SetLedAState(self, *args)
    def GetLedAState(self): return _pyApg.ApogeeCam_GetLedAState(self)
    def SetLedBState(self, *args): return _pyApg.ApogeeCam_SetLedBState(self, *args)
    def GetLedBState(self): return _pyApg.ApogeeCam_GetLedBState(self)
    def SetLedMode(self, *args): return _pyApg.ApogeeCam_SetLedMode(self, *args)
    def GetLedMode(self): return _pyApg.ApogeeCam_GetLedMode(self)
    def GetInfo(self): return _pyApg.ApogeeCam_GetInfo(self)
    def GetModel(self): return _pyApg.ApogeeCam_GetModel(self)
    def GetSensor(self): return _pyApg.ApogeeCam_GetSensor(self)
    def SetFlushCommands(self, *args): return _pyApg.ApogeeCam_SetFlushCommands(self, *args)
    def AreFlushCmdsDisabled(self): return _pyApg.ApogeeCam_AreFlushCmdsDisabled(self)
    def SetPostExposeFlushing(self, *args): return _pyApg.ApogeeCam_SetPostExposeFlushing(self, *args)
    def IsPostExposeFlushingDisabled(self): return _pyApg.ApogeeCam_IsPostExposeFlushingDisabled(self)
    def GetPixelWidth(self): return _pyApg.ApogeeCam_GetPixelWidth(self)
    def GetPixelHeight(self): return _pyApg.ApogeeCam_GetPixelHeight(self)
    def GetMinExposureTime(self): return _pyApg.ApogeeCam_GetMinExposureTime(self)
    def GetMaxExposureTime(self): return _pyApg.ApogeeCam_GetMaxExposureTime(self)
    def IsColor(self): return _pyApg.ApogeeCam_IsColor(self)
    def IsCoolingSupported(self): return _pyApg.ApogeeCam_IsCoolingSupported(self)
    def IsCoolingRegulated(self): return _pyApg.ApogeeCam_IsCoolingRegulated(self)
    def GetInputVoltage(self): return _pyApg.ApogeeCam_GetInputVoltage(self)
    def GetInterfaceType(self): return _pyApg.ApogeeCam_GetInterfaceType(self)
    def GetUsbVendorInfo(self, *args): return _pyApg.ApogeeCam_GetUsbVendorInfo(self, *args)
    def IsCCD(self): return _pyApg.ApogeeCam_IsCCD(self)
    def PauseTimer(self, *args): return _pyApg.ApogeeCam_PauseTimer(self, *args)
    def IsSerialASupported(self): return _pyApg.ApogeeCam_IsSerialASupported(self)
    def IsSerialBSupported(self): return _pyApg.ApogeeCam_IsSerialBSupported(self)
    def SetFlushBinningRows(self, *args): return _pyApg.ApogeeCam_SetFlushBinningRows(self, *args)
    def GetFlushBinningRows(self): return _pyApg.ApogeeCam_GetFlushBinningRows(self)
    def IsOverscanDigitized(self): return _pyApg.ApogeeCam_IsOverscanDigitized(self)
    def SetDigitizeOverscan(self, *args): return _pyApg.ApogeeCam_SetDigitizeOverscan(self, *args)
    def SetAdcGain(self, *args): return _pyApg.ApogeeCam_SetAdcGain(self, *args)
    def GetAdcGain(self, *args): return _pyApg.ApogeeCam_GetAdcGain(self, *args)
    def SetAdcOffset(self, *args): return _pyApg.ApogeeCam_SetAdcOffset(self, *args)
    def GetAdcOffset(self, *args): return _pyApg.ApogeeCam_GetAdcOffset(self, *args)
    def IsInitialized(self): return _pyApg.ApogeeCam_IsInitialized(self)
    def IsConnected(self): return _pyApg.ApogeeCam_IsConnected(self)
    def SetAdSimMode(self, *args): return _pyApg.ApogeeCam_SetAdSimMode(self, *args)
    def IsAdSimModeOn(self): return _pyApg.ApogeeCam_IsAdSimModeOn(self)
    def SetLedBrightness(self, *args): return _pyApg.ApogeeCam_SetLedBrightness(self, *args)
    def GetLedBrightness(self): return _pyApg.ApogeeCam_GetLedBrightness(self)
    def GetDriverVersion(self): return _pyApg.ApogeeCam_GetDriverVersion(self)
    def GetUsbFirmwareVersion(self): return _pyApg.ApogeeCam_GetUsbFirmwareVersion(self)
    def GetSerialNumber(self): return _pyApg.ApogeeCam_GetSerialNumber(self)
    def ReadStrDatabase(self): return _pyApg.ApogeeCam_ReadStrDatabase(self)
    def WriteStrDatabase(self, *args): return _pyApg.ApogeeCam_WriteStrDatabase(self, *args)
    def OpenConnection(self, *args): return _pyApg.ApogeeCam_OpenConnection(self, *args)
    def CloseConnection(self): return _pyApg.ApogeeCam_CloseConnection(self)
    def Init(self): return _pyApg.ApogeeCam_Init(self)
    def StartExposure(self, *args): return _pyApg.ApogeeCam_StartExposure(self, *args)
    def GetStatus(self): return _pyApg.ApogeeCam_GetStatus(self)
    def GetImagingStatus(self): return _pyApg.ApogeeCam_GetImagingStatus(self)
    def GetImage(self): return _pyApg.ApogeeCam_GetImage(self)
    def StopExposure(self, *args): return _pyApg.ApogeeCam_StopExposure(self, *args)
    def GetAvailableMemory(self): return _pyApg.ApogeeCam_GetAvailableMemory(self)
    def GetNumAds(self): return _pyApg.ApogeeCam_GetNumAds(self)
    def GetNumAdChannels(self): return _pyApg.ApogeeCam_GetNumAdChannels(self)
    def GetCoolerDrive(self): return _pyApg.ApogeeCam_GetCoolerDrive(self)
    def SetFanMode(self, *args): return _pyApg.ApogeeCam_SetFanMode(self, *args)
    def GetFanMode(self): return _pyApg.ApogeeCam_GetFanMode(self)
    def GetTempHeatsink(self): return _pyApg.ApogeeCam_GetTempHeatsink(self)
    def UpdateAlta(self, *args): return _pyApg.ApogeeCam_UpdateAlta(self, *args)
    def UpdateAscentOrAltaF(self, *args): return _pyApg.ApogeeCam_UpdateAscentOrAltaF(self, *args)
    def UpdateAspen(self, *args): return _pyApg.ApogeeCam_UpdateAspen(self, *args)
ApogeeCam_swigregister = _pyApg.ApogeeCam_swigregister
ApogeeCam_swigregister(ApogeeCam)

class Alta(ApogeeCam):
    __swig_setmethods__ = {}
    for _s in [ApogeeCam]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Alta, name, value)
    __swig_getmethods__ = {}
    for _s in [ApogeeCam]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Alta, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyApg.new_Alta()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyApg.delete_Alta
    __del__ = lambda self : None;
    def OpenConnection(self, *args): return _pyApg.Alta_OpenConnection(self, *args)
    def CloseConnection(self): return _pyApg.Alta_CloseConnection(self)
    def Init(self): return _pyApg.Alta_Init(self)
    def StartExposure(self, *args): return _pyApg.Alta_StartExposure(self, *args)
    def GetStatus(self): return _pyApg.Alta_GetStatus(self)
    def GetImagingStatus(self): return _pyApg.Alta_GetImagingStatus(self)
    def GetImage(self): return _pyApg.Alta_GetImage(self)
    def StopExposure(self, *args): return _pyApg.Alta_StopExposure(self, *args)
    def GetAvailableMemory(self): return _pyApg.Alta_GetAvailableMemory(self)
    def SetCcdAdc12BitGain(self, *args): return _pyApg.Alta_SetCcdAdc12BitGain(self, *args)
    def SetCcdAdc12BitOffset(self, *args): return _pyApg.Alta_SetCcdAdc12BitOffset(self, *args)
    def GetCcdAdc12BitGain(self): return _pyApg.Alta_GetCcdAdc12BitGain(self)
    def GetCcdAdc12BitOffset(self): return _pyApg.Alta_GetCcdAdc12BitOffset(self)
    def GetCcdAdc16BitGain(self): return _pyApg.Alta_GetCcdAdc16BitGain(self)
    def GetNumAds(self): return _pyApg.Alta_GetNumAds(self)
    def GetNumAdChannels(self): return _pyApg.Alta_GetNumAdChannels(self)
    def GetCoolerDrive(self): return _pyApg.Alta_GetCoolerDrive(self)
    def SetFanMode(self, *args): return _pyApg.Alta_SetFanMode(self, *args)
    def GetFanMode(self): return _pyApg.Alta_GetFanMode(self)
    def GetTempHeatsink(self): return _pyApg.Alta_GetTempHeatsink(self)
    def GetMacAddress(self): return _pyApg.Alta_GetMacAddress(self)
    def OpenSerial(self, *args): return _pyApg.Alta_OpenSerial(self, *args)
    def CloseSerial(self, *args): return _pyApg.Alta_CloseSerial(self, *args)
    def SetSerialBaudRate(self, *args): return _pyApg.Alta_SetSerialBaudRate(self, *args)
    def GetSerialBaudRate(self, *args): return _pyApg.Alta_GetSerialBaudRate(self, *args)
    def GetSerialFlowControl(self, *args): return _pyApg.Alta_GetSerialFlowControl(self, *args)
    def SetSerialFlowControl(self, *args): return _pyApg.Alta_SetSerialFlowControl(self, *args)
    def GetSerialParity(self, *args): return _pyApg.Alta_GetSerialParity(self, *args)
    def SetSerialParity(self, *args): return _pyApg.Alta_SetSerialParity(self, *args)
    def ReadSerial(self, *args): return _pyApg.Alta_ReadSerial(self, *args)
    def WriteSerial(self, *args): return _pyApg.Alta_WriteSerial(self, *args)
Alta_swigregister = _pyApg.Alta_swigregister
Alta_swigregister(Alta)

class TestCamAlta(Alta):
    __swig_setmethods__ = {}
    for _s in [Alta]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TestCamAlta, name, value)
    __swig_getmethods__ = {}
    for _s in [Alta]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TestCamAlta, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyApg.new_TestCamAlta(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyApg.delete_TestCamAlta
    __del__ = lambda self : None;
    def CfgCamFromId(self, *args): return _pyApg.TestCamAlta_CfgCamFromId(self, *args)
    def CfgCamFromFile(self, *args): return _pyApg.TestCamAlta_CfgCamFromFile(self, *args)
    def CfgCamFromIni(self, *args): return _pyApg.TestCamAlta_CfgCamFromIni(self, *args)
    def GetFirmwareHdr(self): return _pyApg.TestCamAlta_GetFirmwareHdr(self)
    def SetSerialNumber(self, *args): return _pyApg.TestCamAlta_SetSerialNumber(self, *args)
    def ProgramAlta(self, *args): return _pyApg.TestCamAlta_ProgramAlta(self, *args)
    def RunFifoTest(self, *args): return _pyApg.TestCamAlta_RunFifoTest(self, *args)
    def RunAdsTest(self, *args): return _pyApg.TestCamAlta_RunAdsTest(self, *args)
    def GetTestingGetImgTime(self): return _pyApg.TestCamAlta_GetTestingGetImgTime(self)
    def ReadBufConReg(self, *args): return _pyApg.TestCamAlta_ReadBufConReg(self, *args)
    def WriteBufConReg(self, *args): return _pyApg.TestCamAlta_WriteBufConReg(self, *args)
    def ReadFx2Reg(self, *args): return _pyApg.TestCamAlta_ReadFx2Reg(self, *args)
    def WriteFx2Reg(self, *args): return _pyApg.TestCamAlta_WriteFx2Reg(self, *args)
TestCamAlta_swigregister = _pyApg.TestCamAlta_swigregister
TestCamAlta_swigregister(TestCamAlta)

class CamGen2Base(ApogeeCam):
    __swig_setmethods__ = {}
    for _s in [ApogeeCam]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CamGen2Base, name, value)
    __swig_getmethods__ = {}
    for _s in [ApogeeCam]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CamGen2Base, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyApg.delete_CamGen2Base
    __del__ = lambda self : None;
    def GetStatus(self): return _pyApg.CamGen2Base_GetStatus(self)
    def GetImagingStatus(self): return _pyApg.CamGen2Base_GetImagingStatus(self)
    def GetImage(self): return _pyApg.CamGen2Base_GetImage(self)
    def StopExposure(self, *args): return _pyApg.CamGen2Base_StopExposure(self, *args)
    def GetAvailableMemory(self): return _pyApg.CamGen2Base_GetAvailableMemory(self)
    def GetNumAds(self): return _pyApg.CamGen2Base_GetNumAds(self)
    def GetCoolerDrive(self): return _pyApg.CamGen2Base_GetCoolerDrive(self)
    def GetTempHeatsink(self): return _pyApg.CamGen2Base_GetTempHeatsink(self)
CamGen2Base_swigregister = _pyApg.CamGen2Base_swigregister
CamGen2Base_swigregister(CamGen2Base)

class Ascent(CamGen2Base):
    __swig_setmethods__ = {}
    for _s in [CamGen2Base]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Ascent, name, value)
    __swig_getmethods__ = {}
    for _s in [CamGen2Base]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Ascent, name)
    __repr__ = _swig_repr
    FW_UNKNOWN_TYPE = _pyApg.Ascent_FW_UNKNOWN_TYPE
    CFW25_6R = _pyApg.Ascent_CFW25_6R
    CFW31_8R = _pyApg.Ascent_CFW31_8R
    def __init__(self): 
        this = _pyApg.new_Ascent()
        try: self.this.append(this)
        except: self.this = this
    def OpenConnection(self, *args): return _pyApg.Ascent_OpenConnection(self, *args)
    def CloseConnection(self): return _pyApg.Ascent_CloseConnection(self)
    __swig_destroy__ = _pyApg.delete_Ascent
    __del__ = lambda self : None;
    def FilterWheelOpen(self, *args): return _pyApg.Ascent_FilterWheelOpen(self, *args)
    def FilterWheelClose(self): return _pyApg.Ascent_FilterWheelClose(self)
    def SetFilterWheelPos(self, *args): return _pyApg.Ascent_SetFilterWheelPos(self, *args)
    def GetFilterWheelPos(self): return _pyApg.Ascent_GetFilterWheelPos(self)
    def GetFilterWheelStatus(self): return _pyApg.Ascent_GetFilterWheelStatus(self)
    def GetFilterWheelType(self): return _pyApg.Ascent_GetFilterWheelType(self)
    def GetFilterWheelName(self): return _pyApg.Ascent_GetFilterWheelName(self)
    def GetFilterWheelMaxPositions(self): return _pyApg.Ascent_GetFilterWheelMaxPositions(self)
    def StartExposure(self, *args): return _pyApg.Ascent_StartExposure(self, *args)
    def GetNumAdChannels(self): return _pyApg.Ascent_GetNumAdChannels(self)
    def Init(self): return _pyApg.Ascent_Init(self)
    def IsDualReadoutSupported(self): return _pyApg.Ascent_IsDualReadoutSupported(self)
    def SetDualReadout(self, *args): return _pyApg.Ascent_SetDualReadout(self, *args)
    def GetDualReadout(self): return _pyApg.Ascent_GetDualReadout(self)
    def GetFanMode(self): return _pyApg.Ascent_GetFanMode(self)
    def SetFanMode(self, *args): return _pyApg.Ascent_SetFanMode(self, *args)
Ascent_swigregister = _pyApg.Ascent_swigregister
Ascent_swigregister(Ascent)

class TestCamAscent(Ascent):
    __swig_setmethods__ = {}
    for _s in [Ascent]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TestCamAscent, name, value)
    __swig_getmethods__ = {}
    for _s in [Ascent]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TestCamAscent, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyApg.new_TestCamAscent(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyApg.delete_TestCamAscent
    __del__ = lambda self : None;
    def CfgCamFromId(self, *args): return _pyApg.TestCamAscent_CfgCamFromId(self, *args)
    def CfgCamFromFile(self, *args): return _pyApg.TestCamAscent_CfgCamFromFile(self, *args)
    def CfgCamFromIni(self, *args): return _pyApg.TestCamAscent_CfgCamFromIni(self, *args)
    def GetFirmwareHdr(self): return _pyApg.TestCamAscent_GetFirmwareHdr(self)
    def SetSerialNumber(self, *args): return _pyApg.TestCamAscent_SetSerialNumber(self, *args)
    def RunFifoTest(self, *args): return _pyApg.TestCamAscent_RunFifoTest(self, *args)
    def RunAdsTest(self, *args): return _pyApg.TestCamAscent_RunAdsTest(self, *args)
    def GetTestingGetImgTime(self): return _pyApg.TestCamAscent_GetTestingGetImgTime(self)
    def ProgramAscent(self, *args): return _pyApg.TestCamAscent_ProgramAscent(self, *args)
    def ReadBufConReg(self, *args): return _pyApg.TestCamAscent_ReadBufConReg(self, *args)
    def WriteBufConReg(self, *args): return _pyApg.TestCamAscent_WriteBufConReg(self, *args)
    def ReadFx2Reg(self, *args): return _pyApg.TestCamAscent_ReadFx2Reg(self, *args)
    def WriteFx2Reg(self, *args): return _pyApg.TestCamAscent_WriteFx2Reg(self, *args)
    def GetCamInfo(self): return _pyApg.TestCamAscent_GetCamInfo(self)
    def SetCamInfo(self, *args): return _pyApg.TestCamAscent_SetCamInfo(self, *args)
TestCamAscent_swigregister = _pyApg.TestCamAscent_swigregister
TestCamAscent_swigregister(TestCamAscent)

class Aspen(CamGen2Base):
    __swig_setmethods__ = {}
    for _s in [CamGen2Base]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Aspen, name, value)
    __swig_getmethods__ = {}
    for _s in [CamGen2Base]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Aspen, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyApg.new_Aspen()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyApg.delete_Aspen
    __del__ = lambda self : None;
    def OpenConnection(self, *args): return _pyApg.Aspen_OpenConnection(self, *args)
    def CloseConnection(self): return _pyApg.Aspen_CloseConnection(self)
    def StartExposure(self, *args): return _pyApg.Aspen_StartExposure(self, *args)
    def GetNumAdChannels(self): return _pyApg.Aspen_GetNumAdChannels(self)
    def GetMacAddress(self): return _pyApg.Aspen_GetMacAddress(self)
    def Init(self): return _pyApg.Aspen_Init(self)
    def GetFanMode(self): return _pyApg.Aspen_GetFanMode(self)
    def SetFanMode(self, *args): return _pyApg.Aspen_SetFanMode(self, *args)
    def IsDualReadoutSupported(self): return _pyApg.Aspen_IsDualReadoutSupported(self)
    def SetDualReadout(self, *args): return _pyApg.Aspen_SetDualReadout(self, *args)
    def GetDualReadout(self): return _pyApg.Aspen_GetDualReadout(self)
Aspen_swigregister = _pyApg.Aspen_swigregister
Aspen_swigregister(Aspen)

class TestCamAspen(Aspen):
    __swig_setmethods__ = {}
    for _s in [Aspen]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TestCamAspen, name, value)
    __swig_getmethods__ = {}
    for _s in [Aspen]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TestCamAspen, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyApg.new_TestCamAspen(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyApg.delete_TestCamAspen
    __del__ = lambda self : None;
    def CfgCamFromId(self, *args): return _pyApg.TestCamAspen_CfgCamFromId(self, *args)
    def CfgCamFromFile(self, *args): return _pyApg.TestCamAspen_CfgCamFromFile(self, *args)
    def CfgCamFromIni(self, *args): return _pyApg.TestCamAspen_CfgCamFromIni(self, *args)
    def GetFirmwareHdr(self): return _pyApg.TestCamAspen_GetFirmwareHdr(self)
    def SetSerialNumber(self, *args): return _pyApg.TestCamAspen_SetSerialNumber(self, *args)
    def RunFifoTest(self, *args): return _pyApg.TestCamAspen_RunFifoTest(self, *args)
    def RunAdsTest(self, *args): return _pyApg.TestCamAspen_RunAdsTest(self, *args)
    def GetTestingGetImgTime(self): return _pyApg.TestCamAspen_GetTestingGetImgTime(self)
    def ProgramAspen(self, *args): return _pyApg.TestCamAspen_ProgramAspen(self, *args)
    def ReadBufConReg(self, *args): return _pyApg.TestCamAspen_ReadBufConReg(self, *args)
    def WriteBufConReg(self, *args): return _pyApg.TestCamAspen_WriteBufConReg(self, *args)
    def ReadFx2Reg(self, *args): return _pyApg.TestCamAspen_ReadFx2Reg(self, *args)
    def WriteFx2Reg(self, *args): return _pyApg.TestCamAspen_WriteFx2Reg(self, *args)
    def GetCamInfo(self): return _pyApg.TestCamAspen_GetCamInfo(self)
    def SetCamInfo(self, *args): return _pyApg.TestCamAspen_SetCamInfo(self, *args)
    def GetCamNetDb(self): return _pyApg.TestCamAspen_GetCamNetDb(self)
    def SetCamNetDb(self, *args): return _pyApg.TestCamAspen_SetCamNetDb(self, *args)
    def ReadAndSaveFlash(self, *args): return _pyApg.TestCamAspen_ReadAndSaveFlash(self, *args)
TestCamAspen_swigregister = _pyApg.TestCamAspen_swigregister
TestCamAspen_swigregister(TestCamAspen)

class Quad(CamGen2Base):
    __swig_setmethods__ = {}
    for _s in [CamGen2Base]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Quad, name, value)
    __swig_getmethods__ = {}
    for _s in [CamGen2Base]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Quad, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyApg.new_Quad()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyApg.delete_Quad
    __del__ = lambda self : None;
    def OpenConnection(self, *args): return _pyApg.Quad_OpenConnection(self, *args)
    def CloseConnection(self): return _pyApg.Quad_CloseConnection(self)
    def StartExposure(self, *args): return _pyApg.Quad_StartExposure(self, *args)
    def IsPixelReorderOn(self): return _pyApg.Quad_IsPixelReorderOn(self)
    def SetPixelReorder(self, *args): return _pyApg.Quad_SetPixelReorder(self, *args)
    def GetNumAdChannels(self): return _pyApg.Quad_GetNumAdChannels(self)
    def SetIsQuadBit(self): return _pyApg.Quad_SetIsQuadBit(self)
    def Init(self): return _pyApg.Quad_Init(self)
    def GetFanMode(self): return _pyApg.Quad_GetFanMode(self)
    def SetFanMode(self, *args): return _pyApg.Quad_SetFanMode(self, *args)
Quad_swigregister = _pyApg.Quad_swigregister
Quad_swigregister(Quad)

class TestCamQuad(Quad):
    __swig_setmethods__ = {}
    for _s in [Quad]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TestCamQuad, name, value)
    __swig_getmethods__ = {}
    for _s in [Quad]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TestCamQuad, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyApg.new_TestCamQuad(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyApg.delete_TestCamQuad
    __del__ = lambda self : None;
    def CfgCamFromFile(self, *args): return _pyApg.TestCamQuad_CfgCamFromFile(self, *args)
    def GetFirmwareHdr(self): return _pyApg.TestCamQuad_GetFirmwareHdr(self)
    def CfgCamFromIni(self, *args): return _pyApg.TestCamQuad_CfgCamFromIni(self, *args)
    def CfgCamFromId(self, *args): return _pyApg.TestCamQuad_CfgCamFromId(self, *args)
    def ReadBufConReg(self, *args): return _pyApg.TestCamQuad_ReadBufConReg(self, *args)
    def WriteBufConReg(self, *args): return _pyApg.TestCamQuad_WriteBufConReg(self, *args)
    def ReadFx2Reg(self, *args): return _pyApg.TestCamQuad_ReadFx2Reg(self, *args)
    def WriteFx2Reg(self, *args): return _pyApg.TestCamQuad_WriteFx2Reg(self, *args)
    def SetSerialNumber(self, *args): return _pyApg.TestCamQuad_SetSerialNumber(self, *args)
    def RunFifoTest(self, *args): return _pyApg.TestCamQuad_RunFifoTest(self, *args)
    def RunAdsTest(self, *args): return _pyApg.TestCamQuad_RunAdsTest(self, *args)
    def GetTestingGetImgTime(self): return _pyApg.TestCamQuad_GetTestingGetImgTime(self)
    def ProgramQuad(self, *args): return _pyApg.TestCamQuad_ProgramQuad(self, *args)
    def GetCamInfo(self): return _pyApg.TestCamQuad_GetCamInfo(self)
    def SetCamInfo(self, *args): return _pyApg.TestCamQuad_SetCamInfo(self, *args)
TestCamQuad_swigregister = _pyApg.TestCamQuad_swigregister
TestCamQuad_swigregister(TestCamQuad)

class HiC(Quad):
    __swig_setmethods__ = {}
    for _s in [Quad]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HiC, name, value)
    __swig_getmethods__ = {}
    for _s in [Quad]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, HiC, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyApg.new_HiC()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyApg.delete_HiC
    __del__ = lambda self : None;
    def SetSerialNumber(self, *args): return _pyApg.HiC_SetSerialNumber(self, *args)
    def GetCamInfo(self): return _pyApg.HiC_GetCamInfo(self)
    def SetCamInfo(self, *args): return _pyApg.HiC_SetCamInfo(self, *args)
    def Get4kby4kImage(self): return _pyApg.HiC_Get4kby4kImage(self)
HiC_swigregister = _pyApg.HiC_swigregister
HiC_swigregister(HiC)

class TestCamHiC(HiC):
    __swig_setmethods__ = {}
    for _s in [HiC]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TestCamHiC, name, value)
    __swig_getmethods__ = {}
    for _s in [HiC]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TestCamHiC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyApg.new_TestCamHiC(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyApg.delete_TestCamHiC
    __del__ = lambda self : None;
    def CfgCamFromFile(self, *args): return _pyApg.TestCamHiC_CfgCamFromFile(self, *args)
    def GetFirmwareHdr(self): return _pyApg.TestCamHiC_GetFirmwareHdr(self)
    def CfgCamFromIni(self, *args): return _pyApg.TestCamHiC_CfgCamFromIni(self, *args)
    def CfgCamFromId(self, *args): return _pyApg.TestCamHiC_CfgCamFromId(self, *args)
    def ReadBufConReg(self, *args): return _pyApg.TestCamHiC_ReadBufConReg(self, *args)
    def WriteBufConReg(self, *args): return _pyApg.TestCamHiC_WriteBufConReg(self, *args)
    def ReadFx2Reg(self, *args): return _pyApg.TestCamHiC_ReadFx2Reg(self, *args)
    def WriteFx2Reg(self, *args): return _pyApg.TestCamHiC_WriteFx2Reg(self, *args)
    def SetSerialNumber(self, *args): return _pyApg.TestCamHiC_SetSerialNumber(self, *args)
    def RunFifoTest(self, *args): return _pyApg.TestCamHiC_RunFifoTest(self, *args)
    def RunAdsTest(self, *args): return _pyApg.TestCamHiC_RunAdsTest(self, *args)
    def GetTestingGetImgTime(self): return _pyApg.TestCamHiC_GetTestingGetImgTime(self)
    def ProgramHiC(self, *args): return _pyApg.TestCamHiC_ProgramHiC(self, *args)
TestCamHiC_swigregister = _pyApg.TestCamHiC_swigregister
TestCamHiC_swigregister(TestCamHiC)

class AltaF(CamGen2Base):
    __swig_setmethods__ = {}
    for _s in [CamGen2Base]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AltaF, name, value)
    __swig_getmethods__ = {}
    for _s in [CamGen2Base]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AltaF, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyApg.new_AltaF()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyApg.delete_AltaF
    __del__ = lambda self : None;
    def OpenConnection(self, *args): return _pyApg.AltaF_OpenConnection(self, *args)
    def CloseConnection(self): return _pyApg.AltaF_CloseConnection(self)
    def StartExposure(self, *args): return _pyApg.AltaF_StartExposure(self, *args)
    def GetNumAdChannels(self): return _pyApg.AltaF_GetNumAdChannels(self)
    def Init(self): return _pyApg.AltaF_Init(self)
    def GetFanMode(self): return _pyApg.AltaF_GetFanMode(self)
    def SetFanMode(self, *args): return _pyApg.AltaF_SetFanMode(self, *args)
AltaF_swigregister = _pyApg.AltaF_swigregister
AltaF_swigregister(AltaF)

class TestCamAltaF(AltaF):
    __swig_setmethods__ = {}
    for _s in [AltaF]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TestCamAltaF, name, value)
    __swig_getmethods__ = {}
    for _s in [AltaF]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TestCamAltaF, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyApg.new_TestCamAltaF(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyApg.delete_TestCamAltaF
    __del__ = lambda self : None;
    def CfgCamFromId(self, *args): return _pyApg.TestCamAltaF_CfgCamFromId(self, *args)
    def CfgCamFromFile(self, *args): return _pyApg.TestCamAltaF_CfgCamFromFile(self, *args)
    def CfgCamFromIni(self, *args): return _pyApg.TestCamAltaF_CfgCamFromIni(self, *args)
    def GetFirmwareHdr(self): return _pyApg.TestCamAltaF_GetFirmwareHdr(self)
    def SetSerialNumber(self, *args): return _pyApg.TestCamAltaF_SetSerialNumber(self, *args)
    def RunFifoTest(self, *args): return _pyApg.TestCamAltaF_RunFifoTest(self, *args)
    def RunAdsTest(self, *args): return _pyApg.TestCamAltaF_RunAdsTest(self, *args)
    def GetTestingGetImgTime(self): return _pyApg.TestCamAltaF_GetTestingGetImgTime(self)
    def ReadBufConReg(self, *args): return _pyApg.TestCamAltaF_ReadBufConReg(self, *args)
    def WriteBufConReg(self, *args): return _pyApg.TestCamAltaF_WriteBufConReg(self, *args)
    def ReadFx2Reg(self, *args): return _pyApg.TestCamAltaF_ReadFx2Reg(self, *args)
    def WriteFx2Reg(self, *args): return _pyApg.TestCamAltaF_WriteFx2Reg(self, *args)
    def GetCamInfo(self): return _pyApg.TestCamAltaF_GetCamInfo(self)
    def SetCamInfo(self, *args): return _pyApg.TestCamAltaF_SetCamInfo(self, *args)
    def ProgramAltaF(self, *args): return _pyApg.TestCamAltaF_ProgramAltaF(self, *args)
TestCamAltaF_swigregister = _pyApg.TestCamAltaF_swigregister
TestCamAltaF_swigregister(TestCamAltaF)


def GetListOfIds():
  return _pyApg.GetListOfIds()
GetListOfIds = _pyApg.GetListOfIds

def GetSoftwareVersions():
  return _pyApg.GetSoftwareVersions()
GetSoftwareVersions = _pyApg.GetSoftwareVersions

def MkPatternFileName(*args):
  return _pyApg.MkPatternFileName(*args)
MkPatternFileName = _pyApg.MkPatternFileName

def CreateCApnCamDataFromFile(*args):
  return _pyApg.CreateCApnCamDataFromFile(*args)
CreateCApnCamDataFromFile = _pyApg.CreateCApnCamDataFromFile

def RunFifoTest(*args):
  return _pyApg.RunFifoTest(*args)
RunFifoTest = _pyApg.RunFifoTest

def RunAdsTest(*args):
  return _pyApg.RunAdsTest(*args)
RunAdsTest = _pyApg.RunAdsTest

def MkMetaDataFromIni(*args):
  return _pyApg.MkMetaDataFromIni(*args)
MkMetaDataFromIni = _pyApg.MkMetaDataFromIni

def GetHPattern(*args):
  return _pyApg.GetHPattern(*args)
GetHPattern = _pyApg.GetHPattern
class StrDb(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StrDb, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StrDb, name)
    __repr__ = _swig_repr
    __swig_setmethods__["FactorySn"] = _pyApg.StrDb_FactorySn_set
    __swig_getmethods__["FactorySn"] = _pyApg.StrDb_FactorySn_get
    if _newclass:FactorySn = _swig_property(_pyApg.StrDb_FactorySn_get, _pyApg.StrDb_FactorySn_set)
    __swig_setmethods__["CustomerSn"] = _pyApg.StrDb_CustomerSn_set
    __swig_getmethods__["CustomerSn"] = _pyApg.StrDb_CustomerSn_get
    if _newclass:CustomerSn = _swig_property(_pyApg.StrDb_CustomerSn_get, _pyApg.StrDb_CustomerSn_set)
    __swig_setmethods__["Id"] = _pyApg.StrDb_Id_set
    __swig_getmethods__["Id"] = _pyApg.StrDb_Id_get
    if _newclass:Id = _swig_property(_pyApg.StrDb_Id_get, _pyApg.StrDb_Id_set)
    __swig_setmethods__["Platform"] = _pyApg.StrDb_Platform_set
    __swig_getmethods__["Platform"] = _pyApg.StrDb_Platform_get
    if _newclass:Platform = _swig_property(_pyApg.StrDb_Platform_get, _pyApg.StrDb_Platform_set)
    __swig_setmethods__["PartNum"] = _pyApg.StrDb_PartNum_set
    __swig_getmethods__["PartNum"] = _pyApg.StrDb_PartNum_get
    if _newclass:PartNum = _swig_property(_pyApg.StrDb_PartNum_get, _pyApg.StrDb_PartNum_set)
    __swig_setmethods__["Ccd"] = _pyApg.StrDb_Ccd_set
    __swig_getmethods__["Ccd"] = _pyApg.StrDb_Ccd_get
    if _newclass:Ccd = _swig_property(_pyApg.StrDb_Ccd_get, _pyApg.StrDb_Ccd_set)
    __swig_setmethods__["CcdSn"] = _pyApg.StrDb_CcdSn_set
    __swig_getmethods__["CcdSn"] = _pyApg.StrDb_CcdSn_get
    if _newclass:CcdSn = _swig_property(_pyApg.StrDb_CcdSn_get, _pyApg.StrDb_CcdSn_set)
    __swig_setmethods__["CcdGrade"] = _pyApg.StrDb_CcdGrade_set
    __swig_getmethods__["CcdGrade"] = _pyApg.StrDb_CcdGrade_get
    if _newclass:CcdGrade = _swig_property(_pyApg.StrDb_CcdGrade_get, _pyApg.StrDb_CcdGrade_set)
    __swig_setmethods__["ProcBoardRev"] = _pyApg.StrDb_ProcBoardRev_set
    __swig_getmethods__["ProcBoardRev"] = _pyApg.StrDb_ProcBoardRev_get
    if _newclass:ProcBoardRev = _swig_property(_pyApg.StrDb_ProcBoardRev_get, _pyApg.StrDb_ProcBoardRev_set)
    __swig_setmethods__["DriveBoardRev"] = _pyApg.StrDb_DriveBoardRev_set
    __swig_getmethods__["DriveBoardRev"] = _pyApg.StrDb_DriveBoardRev_get
    if _newclass:DriveBoardRev = _swig_property(_pyApg.StrDb_DriveBoardRev_get, _pyApg.StrDb_DriveBoardRev_set)
    __swig_setmethods__["Shutter"] = _pyApg.StrDb_Shutter_set
    __swig_getmethods__["Shutter"] = _pyApg.StrDb_Shutter_get
    if _newclass:Shutter = _swig_property(_pyApg.StrDb_Shutter_get, _pyApg.StrDb_Shutter_set)
    __swig_setmethods__["WindowType"] = _pyApg.StrDb_WindowType_set
    __swig_getmethods__["WindowType"] = _pyApg.StrDb_WindowType_get
    if _newclass:WindowType = _swig_property(_pyApg.StrDb_WindowType_get, _pyApg.StrDb_WindowType_set)
    __swig_setmethods__["MechCfg"] = _pyApg.StrDb_MechCfg_set
    __swig_getmethods__["MechCfg"] = _pyApg.StrDb_MechCfg_get
    if _newclass:MechCfg = _swig_property(_pyApg.StrDb_MechCfg_get, _pyApg.StrDb_MechCfg_set)
    __swig_setmethods__["MechRev"] = _pyApg.StrDb_MechRev_set
    __swig_getmethods__["MechRev"] = _pyApg.StrDb_MechRev_get
    if _newclass:MechRev = _swig_property(_pyApg.StrDb_MechRev_get, _pyApg.StrDb_MechRev_set)
    __swig_setmethods__["CoolingType"] = _pyApg.StrDb_CoolingType_set
    __swig_getmethods__["CoolingType"] = _pyApg.StrDb_CoolingType_get
    if _newclass:CoolingType = _swig_property(_pyApg.StrDb_CoolingType_get, _pyApg.StrDb_CoolingType_set)
    __swig_setmethods__["FinishFront"] = _pyApg.StrDb_FinishFront_set
    __swig_getmethods__["FinishFront"] = _pyApg.StrDb_FinishFront_get
    if _newclass:FinishFront = _swig_property(_pyApg.StrDb_FinishFront_get, _pyApg.StrDb_FinishFront_set)
    __swig_setmethods__["FinishBack"] = _pyApg.StrDb_FinishBack_set
    __swig_getmethods__["FinishBack"] = _pyApg.StrDb_FinishBack_get
    if _newclass:FinishBack = _swig_property(_pyApg.StrDb_FinishBack_get, _pyApg.StrDb_FinishBack_set)
    __swig_setmethods__["MpiRev"] = _pyApg.StrDb_MpiRev_set
    __swig_getmethods__["MpiRev"] = _pyApg.StrDb_MpiRev_get
    if _newclass:MpiRev = _swig_property(_pyApg.StrDb_MpiRev_get, _pyApg.StrDb_MpiRev_set)
    __swig_setmethods__["TestDate"] = _pyApg.StrDb_TestDate_set
    __swig_getmethods__["TestDate"] = _pyApg.StrDb_TestDate_get
    if _newclass:TestDate = _swig_property(_pyApg.StrDb_TestDate_get, _pyApg.StrDb_TestDate_set)
    __swig_setmethods__["TestedBy"] = _pyApg.StrDb_TestedBy_set
    __swig_getmethods__["TestedBy"] = _pyApg.StrDb_TestedBy_get
    if _newclass:TestedBy = _swig_property(_pyApg.StrDb_TestedBy_get, _pyApg.StrDb_TestedBy_set)
    __swig_setmethods__["TestedDllRev"] = _pyApg.StrDb_TestedDllRev_set
    __swig_getmethods__["TestedDllRev"] = _pyApg.StrDb_TestedDllRev_get
    if _newclass:TestedDllRev = _swig_property(_pyApg.StrDb_TestedDllRev_get, _pyApg.StrDb_TestedDllRev_set)
    __swig_setmethods__["TestedFwRev"] = _pyApg.StrDb_TestedFwRev_set
    __swig_getmethods__["TestedFwRev"] = _pyApg.StrDb_TestedFwRev_get
    if _newclass:TestedFwRev = _swig_property(_pyApg.StrDb_TestedFwRev_get, _pyApg.StrDb_TestedFwRev_set)
    __swig_setmethods__["Gain"] = _pyApg.StrDb_Gain_set
    __swig_getmethods__["Gain"] = _pyApg.StrDb_Gain_get
    if _newclass:Gain = _swig_property(_pyApg.StrDb_Gain_get, _pyApg.StrDb_Gain_set)
    __swig_setmethods__["Noise"] = _pyApg.StrDb_Noise_set
    __swig_getmethods__["Noise"] = _pyApg.StrDb_Noise_get
    if _newclass:Noise = _swig_property(_pyApg.StrDb_Noise_get, _pyApg.StrDb_Noise_set)
    __swig_setmethods__["Bias"] = _pyApg.StrDb_Bias_set
    __swig_getmethods__["Bias"] = _pyApg.StrDb_Bias_get
    if _newclass:Bias = _swig_property(_pyApg.StrDb_Bias_get, _pyApg.StrDb_Bias_set)
    __swig_setmethods__["TestTemp"] = _pyApg.StrDb_TestTemp_set
    __swig_getmethods__["TestTemp"] = _pyApg.StrDb_TestTemp_get
    if _newclass:TestTemp = _swig_property(_pyApg.StrDb_TestTemp_get, _pyApg.StrDb_TestTemp_set)
    __swig_setmethods__["DarkCount"] = _pyApg.StrDb_DarkCount_set
    __swig_getmethods__["DarkCount"] = _pyApg.StrDb_DarkCount_get
    if _newclass:DarkCount = _swig_property(_pyApg.StrDb_DarkCount_get, _pyApg.StrDb_DarkCount_set)
    __swig_setmethods__["DarkDuration"] = _pyApg.StrDb_DarkDuration_set
    __swig_getmethods__["DarkDuration"] = _pyApg.StrDb_DarkDuration_get
    if _newclass:DarkDuration = _swig_property(_pyApg.StrDb_DarkDuration_get, _pyApg.StrDb_DarkDuration_set)
    __swig_setmethods__["DarkTemp"] = _pyApg.StrDb_DarkTemp_set
    __swig_getmethods__["DarkTemp"] = _pyApg.StrDb_DarkTemp_get
    if _newclass:DarkTemp = _swig_property(_pyApg.StrDb_DarkTemp_get, _pyApg.StrDb_DarkTemp_set)
    __swig_setmethods__["CoolingDelta"] = _pyApg.StrDb_CoolingDelta_set
    __swig_getmethods__["CoolingDelta"] = _pyApg.StrDb_CoolingDelta_get
    if _newclass:CoolingDelta = _swig_property(_pyApg.StrDb_CoolingDelta_get, _pyApg.StrDb_CoolingDelta_set)
    __swig_setmethods__["Ad1Offset"] = _pyApg.StrDb_Ad1Offset_set
    __swig_getmethods__["Ad1Offset"] = _pyApg.StrDb_Ad1Offset_get
    if _newclass:Ad1Offset = _swig_property(_pyApg.StrDb_Ad1Offset_get, _pyApg.StrDb_Ad1Offset_set)
    __swig_setmethods__["Ad1Gain"] = _pyApg.StrDb_Ad1Gain_set
    __swig_getmethods__["Ad1Gain"] = _pyApg.StrDb_Ad1Gain_get
    if _newclass:Ad1Gain = _swig_property(_pyApg.StrDb_Ad1Gain_get, _pyApg.StrDb_Ad1Gain_set)
    __swig_setmethods__["Ad2Offset"] = _pyApg.StrDb_Ad2Offset_set
    __swig_getmethods__["Ad2Offset"] = _pyApg.StrDb_Ad2Offset_get
    if _newclass:Ad2Offset = _swig_property(_pyApg.StrDb_Ad2Offset_get, _pyApg.StrDb_Ad2Offset_set)
    __swig_setmethods__["Ad2Gain"] = _pyApg.StrDb_Ad2Gain_set
    __swig_getmethods__["Ad2Gain"] = _pyApg.StrDb_Ad2Gain_get
    if _newclass:Ad2Gain = _swig_property(_pyApg.StrDb_Ad2Gain_get, _pyApg.StrDb_Ad2Gain_set)
    __swig_setmethods__["Rma1"] = _pyApg.StrDb_Rma1_set
    __swig_getmethods__["Rma1"] = _pyApg.StrDb_Rma1_get
    if _newclass:Rma1 = _swig_property(_pyApg.StrDb_Rma1_get, _pyApg.StrDb_Rma1_set)
    __swig_setmethods__["Rma2"] = _pyApg.StrDb_Rma2_set
    __swig_getmethods__["Rma2"] = _pyApg.StrDb_Rma2_get
    if _newclass:Rma2 = _swig_property(_pyApg.StrDb_Rma2_get, _pyApg.StrDb_Rma2_set)
    __swig_setmethods__["Comment1"] = _pyApg.StrDb_Comment1_set
    __swig_getmethods__["Comment1"] = _pyApg.StrDb_Comment1_get
    if _newclass:Comment1 = _swig_property(_pyApg.StrDb_Comment1_get, _pyApg.StrDb_Comment1_set)
    __swig_setmethods__["Comment2"] = _pyApg.StrDb_Comment2_set
    __swig_getmethods__["Comment2"] = _pyApg.StrDb_Comment2_get
    if _newclass:Comment2 = _swig_property(_pyApg.StrDb_Comment2_get, _pyApg.StrDb_Comment2_set)
    __swig_setmethods__["Comment3"] = _pyApg.StrDb_Comment3_set
    __swig_getmethods__["Comment3"] = _pyApg.StrDb_Comment3_get
    if _newclass:Comment3 = _swig_property(_pyApg.StrDb_Comment3_get, _pyApg.StrDb_Comment3_set)
    def __init__(self): 
        this = _pyApg.new_StrDb()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyApg.delete_StrDb
    __del__ = lambda self : None;
StrDb_swigregister = _pyApg.StrDb_swigregister
StrDb_swigregister(StrDb)


def MkStrVectFromStrDb(*args):
  return _pyApg.MkStrVectFromStrDb(*args)
MkStrVectFromStrDb = _pyApg.MkStrVectFromStrDb

def MkStrDbFromStrVect(*args):
  return _pyApg.MkStrDbFromStrVect(*args)
MkStrDbFromStrVect = _pyApg.MkStrDbFromStrVect

def GetNoOpDb():
  return _pyApg.GetNoOpDb()
GetNoOpDb = _pyApg.GetNoOpDb
class NetDb(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NetDb, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NetDb, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Magic"] = _pyApg.NetDb_Magic_set
    __swig_getmethods__["Magic"] = _pyApg.NetDb_Magic_get
    if _newclass:Magic = _swig_property(_pyApg.NetDb_Magic_get, _pyApg.NetDb_Magic_set)
    __swig_setmethods__["IP"] = _pyApg.NetDb_IP_set
    __swig_getmethods__["IP"] = _pyApg.NetDb_IP_get
    if _newclass:IP = _swig_property(_pyApg.NetDb_IP_get, _pyApg.NetDb_IP_set)
    __swig_setmethods__["Gateway"] = _pyApg.NetDb_Gateway_set
    __swig_getmethods__["Gateway"] = _pyApg.NetDb_Gateway_get
    if _newclass:Gateway = _swig_property(_pyApg.NetDb_Gateway_get, _pyApg.NetDb_Gateway_set)
    __swig_setmethods__["Netmask"] = _pyApg.NetDb_Netmask_set
    __swig_getmethods__["Netmask"] = _pyApg.NetDb_Netmask_get
    if _newclass:Netmask = _swig_property(_pyApg.NetDb_Netmask_get, _pyApg.NetDb_Netmask_set)
    __swig_setmethods__["Port"] = _pyApg.NetDb_Port_set
    __swig_getmethods__["Port"] = _pyApg.NetDb_Port_get
    if _newclass:Port = _swig_property(_pyApg.NetDb_Port_get, _pyApg.NetDb_Port_set)
    __swig_setmethods__["Flags"] = _pyApg.NetDb_Flags_set
    __swig_getmethods__["Flags"] = _pyApg.NetDb_Flags_get
    if _newclass:Flags = _swig_property(_pyApg.NetDb_Flags_get, _pyApg.NetDb_Flags_set)
    __swig_setmethods__["MAC"] = _pyApg.NetDb_MAC_set
    __swig_getmethods__["MAC"] = _pyApg.NetDb_MAC_get
    if _newclass:MAC = _swig_property(_pyApg.NetDb_MAC_get, _pyApg.NetDb_MAC_set)
    __swig_setmethods__["Timeout"] = _pyApg.NetDb_Timeout_set
    __swig_getmethods__["Timeout"] = _pyApg.NetDb_Timeout_get
    if _newclass:Timeout = _swig_property(_pyApg.NetDb_Timeout_get, _pyApg.NetDb_Timeout_set)
    def __init__(self): 
        this = _pyApg.new_NetDb()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyApg.delete_NetDb
    __del__ = lambda self : None;
NetDb_swigregister = _pyApg.NetDb_swigregister
NetDb_swigregister(NetDb)
cvar = _pyApg.cvar
NET_MAGIC_VALID = cvar.NET_MAGIC_VALID


def MkU8VectFromNetDb(*args):
  return _pyApg.MkU8VectFromNetDb(*args)
MkU8VectFromNetDb = _pyApg.MkU8VectFromNetDb

def MkNetDbFromU8Vect(*args):
  return _pyApg.MkNetDbFromU8Vect(*args)
MkNetDbFromU8Vect = _pyApg.MkNetDbFromU8Vect
UNKNOWN_INTERFACE = _pyApg.UNKNOWN_INTERFACE
USB = _pyApg.USB
ETHERNET = _pyApg.ETHERNET
UNKNOWN_PLATFORM = _pyApg.UNKNOWN_PLATFORM
ALTAU = _pyApg.ALTAU
ALTAE = _pyApg.ALTAE
ASCENT = _pyApg.ASCENT
ASPEN = _pyApg.ASPEN
HIC = _pyApg.HIC
ALTAF = _pyApg.ALTAF
QUAD = _pyApg.QUAD

def IsAlta(*args):
  return _pyApg.IsAlta(*args)
IsAlta = _pyApg.IsAlta

def IsGen2Platform(*args):
  return _pyApg.IsGen2Platform(*args)
IsGen2Platform = _pyApg.IsGen2Platform

def IsFirmwareRevGood(*args):
  return _pyApg.IsFirmwareRevGood(*args)
IsFirmwareRevGood = _pyApg.IsFirmwareRevGood

def MaskRawId(*args):
  return _pyApg.MaskRawId(*args)
MaskRawId = _pyApg.MaskRawId

def GetPlatformType(*args):
  return _pyApg.GetPlatformType(*args)
GetPlatformType = _pyApg.GetPlatformType

def GetPlatformStr(*args):
  return _pyApg.GetPlatformStr(*args)
GetPlatformStr = _pyApg.GetPlatformStr

def GetModelStr(*args):
  return _pyApg.GetModelStr(*args)
GetModelStr = _pyApg.GetModelStr

def GetNoOpFirmwareRev():
  return _pyApg.GetNoOpFirmwareRev()
GetNoOpFirmwareRev = _pyApg.GetNoOpFirmwareRev
Status_ConnectionError = _pyApg.Status_ConnectionError
Status_DataError = _pyApg.Status_DataError
Status_PatternError = _pyApg.Status_PatternError
Status_Idle = _pyApg.Status_Idle
Status_Exposing = _pyApg.Status_Exposing
Status_ImagingActive = _pyApg.Status_ImagingActive
Status_ImageReady = _pyApg.Status_ImageReady
Status_Flushing = _pyApg.Status_Flushing
Status_WaitingOnTrigger = _pyApg.Status_WaitingOnTrigger
CameraMode_Normal = _pyApg.CameraMode_Normal
CameraMode_TDI = _pyApg.CameraMode_TDI
CameraMode_Test = _pyApg.CameraMode_Test
CameraMode_ExternalTrigger = _pyApg.CameraMode_ExternalTrigger
CameraMode_ExternalShutter = _pyApg.CameraMode_ExternalShutter
CameraMode_Kinetics = _pyApg.CameraMode_Kinetics
CameraMode_Unknown = _pyApg.CameraMode_Unknown
Resolution_SixteenBit = _pyApg.Resolution_SixteenBit
Resolution_TwelveBit = _pyApg.Resolution_TwelveBit
AdcSpeed_Unknown = _pyApg.AdcSpeed_Unknown
AdcSpeed_Normal = _pyApg.AdcSpeed_Normal
AdcSpeed_Fast = _pyApg.AdcSpeed_Fast
AdcSpeed_Video = _pyApg.AdcSpeed_Video
CoolerStatus_Off = _pyApg.CoolerStatus_Off
CoolerStatus_RampingToSetPoint = _pyApg.CoolerStatus_RampingToSetPoint
CoolerStatus_AtSetPoint = _pyApg.CoolerStatus_AtSetPoint
CoolerStatus_Revision = _pyApg.CoolerStatus_Revision
CoolerStatus_Suspended = _pyApg.CoolerStatus_Suspended
FanMode_Off = _pyApg.FanMode_Off
FanMode_Low = _pyApg.FanMode_Low
FanMode_Medium = _pyApg.FanMode_Medium
FanMode_High = _pyApg.FanMode_High
FanMode_Unknown = _pyApg.FanMode_Unknown
LedState_Expose = _pyApg.LedState_Expose
LedState_ImageActive = _pyApg.LedState_ImageActive
LedState_Flushing = _pyApg.LedState_Flushing
LedState_ExtTriggerWaiting = _pyApg.LedState_ExtTriggerWaiting
LedState_ExtTriggerReceived = _pyApg.LedState_ExtTriggerReceived
LedState_ExtShutterInput = _pyApg.LedState_ExtShutterInput
LedState_ExtStartReadout = _pyApg.LedState_ExtStartReadout
LedState_AtTemp = _pyApg.LedState_AtTemp
LedState_Unknown = _pyApg.LedState_Unknown
LedMode_DisableAll = _pyApg.LedMode_DisableAll
LedMode_DisableWhileExpose = _pyApg.LedMode_DisableWhileExpose
LedMode_EnableAll = _pyApg.LedMode_EnableAll
LedMode_Unknown = _pyApg.LedMode_Unknown
TriggerMode_Unknown = _pyApg.TriggerMode_Unknown
TriggerMode_Normal = _pyApg.TriggerMode_Normal
TriggerMode_TdiKinetics = _pyApg.TriggerMode_TdiKinetics
TriggerMode_ExternalShutter = _pyApg.TriggerMode_ExternalShutter
TriggerMode_ExternalReadoutIo = _pyApg.TriggerMode_ExternalReadoutIo
TriggerType_Unkown = _pyApg.TriggerType_Unkown
TriggerType_Each = _pyApg.TriggerType_Each
TriggerType_Group = _pyApg.TriggerType_Group
ShutterState_Unkown = _pyApg.ShutterState_Unkown
ShutterState_Normal = _pyApg.ShutterState_Normal
ShutterState_ForceOpen = _pyApg.ShutterState_ForceOpen
ShutterState_ForceClosed = _pyApg.ShutterState_ForceClosed
ErrorType_Connection = _pyApg.ErrorType_Connection
ErrorType_Critical = _pyApg.ErrorType_Critical
ErrorType_Serious = _pyApg.ErrorType_Serious
ErrorType_Configuration = _pyApg.ErrorType_Configuration
ErrorType_InvalidMode = _pyApg.ErrorType_InvalidMode
ErrorType_InvalidOperation = _pyApg.ErrorType_InvalidOperation
ErrorType_InvalidUsage = _pyApg.ErrorType_InvalidUsage
SerialParity_Unknown = _pyApg.SerialParity_Unknown
SerialParity_None = _pyApg.SerialParity_None
SerialParity_Odd = _pyApg.SerialParity_Odd
SerialParity_Even = _pyApg.SerialParity_Even
SerialFC_Unknown = _pyApg.SerialFC_Unknown
SerialFC_Off = _pyApg.SerialFC_Off
SerialFC_On = _pyApg.SerialFC_On
class ApogeeFilterWheel(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ApogeeFilterWheel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ApogeeFilterWheel, name)
    __repr__ = _swig_repr
    UNKNOWN_TYPE = _pyApg.ApogeeFilterWheel_UNKNOWN_TYPE
    FW50_9R = _pyApg.ApogeeFilterWheel_FW50_9R
    FW50_7S = _pyApg.ApogeeFilterWheel_FW50_7S
    AFW50_10S = _pyApg.ApogeeFilterWheel_AFW50_10S
    AFW31_17R = _pyApg.ApogeeFilterWheel_AFW31_17R
    UNKNOWN_STATUS = _pyApg.ApogeeFilterWheel_UNKNOWN_STATUS
    NOT_CONNECTED = _pyApg.ApogeeFilterWheel_NOT_CONNECTED
    READY = _pyApg.ApogeeFilterWheel_READY
    ACTIVE = _pyApg.ApogeeFilterWheel_ACTIVE
    def __init__(self): 
        this = _pyApg.new_ApogeeFilterWheel()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyApg.delete_ApogeeFilterWheel
    __del__ = lambda self : None;
    def Init(self, *args): return _pyApg.ApogeeFilterWheel_Init(self, *args)
    def Close(self): return _pyApg.ApogeeFilterWheel_Close(self)
    def GetVendorId(self): return _pyApg.ApogeeFilterWheel_GetVendorId(self)
    def GetProductId(self): return _pyApg.ApogeeFilterWheel_GetProductId(self)
    def GetDeviceId(self): return _pyApg.ApogeeFilterWheel_GetDeviceId(self)
    def GetUsbFirmwareRev(self): return _pyApg.ApogeeFilterWheel_GetUsbFirmwareRev(self)
    def GetType(self): return _pyApg.ApogeeFilterWheel_GetType(self)
    def GetName(self): return _pyApg.ApogeeFilterWheel_GetName(self)
    def GetStatus(self): return _pyApg.ApogeeFilterWheel_GetStatus(self)
    def GetMaxPositions(self): return _pyApg.ApogeeFilterWheel_GetMaxPositions(self)
    def SetPosition(self, *args): return _pyApg.ApogeeFilterWheel_SetPosition(self, *args)
    def GetPosition(self): return _pyApg.ApogeeFilterWheel_GetPosition(self)
ApogeeFilterWheel_swigregister = _pyApg.ApogeeFilterWheel_swigregister
ApogeeFilterWheel_swigregister(ApogeeFilterWheel)
FIRMWARE_PLATFORM_MASK = cvar.FIRMWARE_PLATFORM_MASK
MAX_ALTA_FIRMWARE_REV = cvar.MAX_ALTA_FIRMWARE_REV
MIN_GEN2_FIRMWARE = cvar.MIN_GEN2_FIRMWARE
MAX_GEN2_FIRMWARE = cvar.MAX_GEN2_FIRMWARE
ALTA_CAMERA_ID_MASK = cvar.ALTA_CAMERA_ID_MASK
GEN2_CAMERA_ID_MASK = cvar.GEN2_CAMERA_ID_MASK
NO_OP_FRMWR_REV = cvar.NO_OP_FRMWR_REV

class TestFilterWheel(ApogeeFilterWheel):
    __swig_setmethods__ = {}
    for _s in [ApogeeFilterWheel]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TestFilterWheel, name, value)
    __swig_getmethods__ = {}
    for _s in [ApogeeFilterWheel]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TestFilterWheel, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyApg.new_TestFilterWheel()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyApg.delete_TestFilterWheel
    __del__ = lambda self : None;
    def ProgramFx2(self, *args): return _pyApg.TestFilterWheel_ProgramFx2(self, *args)
TestFilterWheel_swigregister = _pyApg.TestFilterWheel_swigregister
TestFilterWheel_swigregister(TestFilterWheel)

class FindDeviceEthernet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FindDeviceEthernet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FindDeviceEthernet, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyApg.new_FindDeviceEthernet()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyApg.delete_FindDeviceEthernet
    __del__ = lambda self : None;
    def Find(self, *args): return _pyApg.FindDeviceEthernet_Find(self, *args)
    def GetElapsedSecs(self): return _pyApg.FindDeviceEthernet_GetElapsedSecs(self)
    def GetTimeout(self): return _pyApg.FindDeviceEthernet_GetTimeout(self)
FindDeviceEthernet_swigregister = _pyApg.FindDeviceEthernet_swigregister
FindDeviceEthernet_swigregister(FindDeviceEthernet)

class FindDeviceUsb(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FindDeviceUsb, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FindDeviceUsb, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _pyApg.delete_FindDeviceUsb
    __del__ = lambda self : None;
    def Find(self): return _pyApg.FindDeviceUsb_Find(self)
    def __init__(self): 
        this = _pyApg.new_FindDeviceUsb()
        try: self.this.append(this)
        except: self.this = this
FindDeviceUsb_swigregister = _pyApg.FindDeviceUsb_swigregister
FindDeviceUsb_swigregister(FindDeviceUsb)

# This file is compatible with both classic and new-style classes.


