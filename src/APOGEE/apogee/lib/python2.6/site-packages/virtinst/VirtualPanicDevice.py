# coding=utf-8
#
# Copyright 2013 Fujitsu Limited.
# Copyright 2014  Red Hat, Inc.
# Chen Hanxiao <chenhanxiao at cn.fujitsu.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
# MA 02110-1301 USA.

import VirtualDevice

from virtinst import _gettext as _
from XMLBuilderDomain import _xml_property

class VirtualPanicDevice(VirtualDevice.VirtualDevice):

    _virtual_device_type = VirtualDevice.VirtualDevice.VIRTUAL_DEV_PANIC
    ADDRESS_TYPE_ISA = "isa"
    TYPES = [ADDRESS_TYPE_ISA]
    IOBASE_DEFAULT = "0x505"

    def __init__(self, conn, parsexml=None, parsexmlnode=None, caps=None):
        VirtualDevice.VirtualDevice.__init__(self, conn, parsexml,
                                             parsexmlnode, caps)

        self._type = None
        self._iobase = None

        if self._is_parse():
            return

        self._type = self.ADDRESS_TYPE_ISA
        self._iobase = self.IOBASE_DEFAULT

    def get_iobase(self):
        return self._iobase
    def set_iobase(self, new_iobase):
        self._iobase = new_iobase
    iobase = _xml_property(get_iobase, set_iobase,
                          xpath="./address/@iobase")

    def get_type(self):
        return self._type
    def set_type(self, new_type):
        self._type = new_type
    type = _xml_property(get_type, set_type,
                          xpath="./address/@type")

    @staticmethod
    def get_pretty_type(panic_type):
        if panic_type == VirtualPanicDevice.ADDRESS_TYPE_ISA:
            return _("ISA")
        return panic_type

    def _get_xml_config(self):
        xml = "    <panic>\n"
        xml += "      <address type='%s' iobase='%s'/>\n" % (self._type,
                                                            self._iobase)
        xml += "    </panic>\n"

        return xml
