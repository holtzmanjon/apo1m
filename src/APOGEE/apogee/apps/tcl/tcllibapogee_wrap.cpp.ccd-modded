/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGTCL
#include "tcl.h"
#include "ccd.h"

#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



#include <stdio.h>
#include <tcl.h>
#include <errno.h>
#include <stdlib.h>
#include <stdarg.h>
#include <ctype.h>

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.
  
  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/* 
   Flags/methods for returning states.
   
   The SWIG conversion methods, as ConvertPtr, return and integer 
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).
   
   Use the following macros/flags to set or process the returning
   states.
   
   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }
    
   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {         
        if (<obj is ok>) {			       
          if (<need new object>) {		       
            *ptr = <ptr to new allocated object>; 
            return SWIG_NEWOBJ;		       
          } else {				       
            *ptr = <ptr to old object>;	       
            return SWIG_OLDOBJ;		       
          } 				       
        } else {				       
          return SWIG_BADOBJ;		       
        }					       
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call
 
      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0) 
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)  

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) { 
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) { 
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0; 
}
#else /* no cast-rank mode */
#  define SWIG_AddCast
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCompare(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}


/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/* 
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  
  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }    
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}
  
/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}

/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1 
#define  SWIG_IOError        	   -2 
#define  SWIG_RuntimeError   	   -3 
#define  SWIG_IndexError     	   -4 
#define  SWIG_TypeError      	   -5 
#define  SWIG_DivisionByZero 	   -6 
#define  SWIG_OverflowError  	   -7 
#define  SWIG_SyntaxError    	   -8 
#define  SWIG_ValueError     	   -9 
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12 
#define  SWIG_NullReferenceError   -13



/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */

SWIGINTERN const char*
SWIG_Tcl_ErrorType(int code) {
  const char* type = 0;
  switch(code) {
  case SWIG_MemoryError:
    type = "MemoryError";
    break;
  case SWIG_IOError:
    type = "IOError";
    break;
  case SWIG_RuntimeError:
    type = "RuntimeError";
    break;
  case SWIG_IndexError:
    type = "IndexError";
    break;
  case SWIG_TypeError:
    type = "TypeError";
    break;
  case SWIG_DivisionByZero:
    type = "ZeroDivisionError";
    break;
  case SWIG_OverflowError:
    type = "OverflowError";
    break;
  case SWIG_SyntaxError:
    type = "SyntaxError";
    break;
  case SWIG_ValueError:
    type = "ValueError";
    break;
  case SWIG_SystemError:
    type = "SystemError";
    break;
  case SWIG_AttributeError:
    type = "AttributeError";
    break;
  default:
    type = "RuntimeError";
  }
  return type;
}


SWIGINTERN void
SWIG_Tcl_SetErrorObj(Tcl_Interp *interp, const char *ctype, Tcl_Obj *obj)
{
  Tcl_ResetResult(interp);
  Tcl_SetObjResult(interp, obj);
  Tcl_SetErrorCode(interp, "SWIG", ctype, NULL);
}

SWIGINTERN void
SWIG_Tcl_SetErrorMsg(Tcl_Interp *interp, const char *ctype, const char *mesg)
{
  Tcl_ResetResult(interp);
  Tcl_SetErrorCode(interp, "SWIG", ctype, NULL);
  Tcl_AppendResult(interp, ctype, " ", mesg, NULL);
  /*
  Tcl_AddErrorInfo(interp, ctype);
  Tcl_AddErrorInfo(interp, " ");
  Tcl_AddErrorInfo(interp, mesg);
  */
}

SWIGINTERNINLINE void
SWIG_Tcl_AddErrorMsg(Tcl_Interp *interp, const char* mesg)
{
  Tcl_AddErrorInfo(interp, mesg);
}



/* -----------------------------------------------------------------------------
 * SWIG API. Portion that goes into the runtime
 * ----------------------------------------------------------------------------- */
#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_TCL_POINTER 4
#define SWIG_TCL_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_const_info;

typedef int   (*swig_wrapper)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST []);
typedef int   (*swig_wrapper_func)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST []);
typedef char *(*swig_variable_func)(ClientData, Tcl_Interp *, char *, char *, int);
typedef void  (*swig_delete_func)(ClientData);

typedef struct swig_method {
  const char     *name;
  swig_wrapper   method;
} swig_method;

typedef struct swig_attribute {
  const char     *name;
  swig_wrapper   getmethod;
  swig_wrapper   setmethod;
} swig_attribute;

typedef struct swig_class {
  const char         *name;
  swig_type_info   **type;
  swig_wrapper       constructor;
  void              (*destructor)(void *);
  swig_method        *methods;
  swig_attribute     *attributes;
  struct swig_class **bases;
  const char              **base_names;
  swig_module_info   *module;
} swig_class;

typedef struct swig_instance {
  Tcl_Obj       *thisptr;
  void          *thisvalue;
  swig_class   *classptr;
  int            destroy;
  Tcl_Command    cmdtok;
} swig_instance;

/* Structure for command table */
typedef struct {
  const char *name;
  int       (*wrapper)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST []);
  ClientData  clientdata;
} swig_command_info;

/* Structure for variable linking table */
typedef struct {
  const char *name;
  void *addr;
  char * (*get)(ClientData, Tcl_Interp *, char *, char *, int);
  char * (*set)(ClientData, Tcl_Interp *, char *, char *, int);
} swig_var_info;


/* -----------------------------------------------------------------------------*
 *  Install a constant object 
 * -----------------------------------------------------------------------------*/

static Tcl_HashTable   swigconstTable;
static int             swigconstTableinit = 0;

SWIGINTERN void
SWIG_Tcl_SetConstantObj(Tcl_Interp *interp, const char* name, Tcl_Obj *obj) {
  int newobj;
  Tcl_ObjSetVar2(interp,Tcl_NewStringObj(name,-1), NULL, obj, TCL_GLOBAL_ONLY);
  Tcl_SetHashValue(Tcl_CreateHashEntry(&swigconstTable, name, &newobj), (ClientData) obj);
}

SWIGINTERN Tcl_Obj *
SWIG_Tcl_GetConstantObj(const char *key) {
  Tcl_HashEntry *entryPtr;
  if (!swigconstTableinit) return 0;
  entryPtr = Tcl_FindHashEntry(&swigconstTable, key);
  if (entryPtr) {
    return (Tcl_Obj *) Tcl_GetHashValue(entryPtr);
  }
  return 0;
}

#ifdef __cplusplus
}
#endif



/* -----------------------------------------------------------------------------
 * See the LICENSE file for information on copyright, usage and redistribution
 * of SWIG, and the README file for authors - http://www.swig.org/release.html.
 *
 * tclrun.swg
 *
 * This file contains the runtime support for Tcl modules and includes
 * code for managing global variables and pointer type checking.
 * ----------------------------------------------------------------------------- */

/* Common SWIG API */

/* for raw pointers */
#define SWIG_ConvertPtr(oc, ptr, ty, flags)             SWIG_Tcl_ConvertPtr(interp, oc, ptr, ty, flags)
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Tcl_NewPointerObj(ptr, type, flags)

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Tcl_ConvertPacked(interp, obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Tcl_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_Tcl_ConvertPtr(interp, obj, pptr, type, flags)
#define SWIG_NewInstanceObj(thisvalue, type, flags)     SWIG_Tcl_NewInstanceObj(interp, thisvalue, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_Tcl_ConvertPtr(interp, obj, pptr, type, 0)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_Tcl_NewPointerObj(ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Tcl_ConvertPacked(interp,obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Tcl_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Tcl_GetModule((Tcl_Interp *) (clientdata))	     
#define SWIG_SetModule(clientdata, pointer)          	SWIG_Tcl_SetModule((Tcl_Interp *) (clientdata), pointer)


/* Error manipulation */

#define SWIG_ErrorType(code)                            SWIG_Tcl_ErrorType(code)                                      
#define SWIG_Error(code, msg)            		SWIG_Tcl_SetErrorMsg(interp, SWIG_Tcl_ErrorType(code), msg)
#define SWIG_fail                        		goto fail						    


/* Tcl-specific SWIG API */

#define SWIG_Acquire(ptr)                               SWIG_Tcl_Acquire(ptr)                                     
#define SWIG_MethodCommand                           	SWIG_Tcl_MethodCommand				       
#define SWIG_Disown(ptr)                             	SWIG_Tcl_Disown(ptr)				       
#define SWIG_ConvertPtrFromString(c, ptr, ty, flags) 	SWIG_Tcl_ConvertPtrFromString(interp, c, ptr, ty, flags)  
#define SWIG_MakePtr(c, ptr, ty, flags)              	SWIG_Tcl_MakePtr(c, ptr, ty, flags)		       
#define SWIG_PointerTypeFromString(c)                	SWIG_Tcl_PointerTypeFromString(c)			       
#define SWIG_GetArgs                                 	SWIG_Tcl_GetArgs					       
#define SWIG_GetConstantObj(key)                     	SWIG_Tcl_GetConstantObj(key)			       
#define SWIG_ObjectConstructor                       	SWIG_Tcl_ObjectConstructor				       
#define SWIG_Thisown(ptr)                            	SWIG_Tcl_Thisown(ptr)				       
#define SWIG_ObjectDelete                            	SWIG_Tcl_ObjectDelete				       


#define SWIG_TCL_DECL_ARGS_2(arg1, arg2)                (Tcl_Interp *interp SWIGUNUSED, arg1, arg2)
#define SWIG_TCL_CALL_ARGS_2(arg1, arg2)                (interp, arg1, arg2)
/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

/* For backward compatibility only */
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_GetConstant        SWIG_GetConstantObj
#define SWIG_Tcl_GetConstant    SWIG_Tcl_GetConstantObj

#include "assert.h"

#ifdef __cplusplus
extern "C" {
#if 0
} /* cc-mode */
#endif
#endif

/* Object support */

SWIGRUNTIME Tcl_HashTable*
SWIG_Tcl_ObjectTable(void) {
  static Tcl_HashTable  swigobjectTable;
  static int            swigobjectTableinit = 0;
  if (!swigobjectTableinit) {
    Tcl_InitHashTable(&swigobjectTable, TCL_ONE_WORD_KEYS);
    swigobjectTableinit = 1;
  }
  return &swigobjectTable;
}

/* Acquire ownership of a pointer */
SWIGRUNTIME void
SWIG_Tcl_Acquire(void *ptr) {
  int newobj;
  Tcl_CreateHashEntry(SWIG_Tcl_ObjectTable(), (char *) ptr, &newobj);
}

SWIGRUNTIME int
SWIG_Tcl_Thisown(void *ptr) {
  if (Tcl_FindHashEntry(SWIG_Tcl_ObjectTable(), (char *) ptr)) {
    return 1;
  }
  return 0;
}

/* Disown a pointer.  Returns 1 if we owned it to begin with */
SWIGRUNTIME int
SWIG_Tcl_Disown(void *ptr) {
  Tcl_HashEntry *entryPtr = Tcl_FindHashEntry(SWIG_Tcl_ObjectTable(), (char *) ptr);
  if (entryPtr) {
    Tcl_DeleteHashEntry(entryPtr);
    return 1;
  }
  return 0;
}

/* Convert a pointer value */
SWIGRUNTIME int
SWIG_Tcl_ConvertPtrFromString(Tcl_Interp *interp, const char *c, void **ptr, swig_type_info *ty, int flags) {
  swig_cast_info *tc;
  /* Pointer values must start with leading underscore */
  while (*c != '_') {
    *ptr = (void *) 0;
    if (strcmp(c,"NULL") == 0) return SWIG_OK;

    /* Empty string: not a pointer */
    if (*c == 0) return SWIG_ERROR; 

    /* Hmmm. It could be an object name. */

    /* Check if this is a command at all. Prevents <c> cget -this         */
    /* from being called when c is not a command, firing the unknown proc */
    if (Tcl_VarEval(interp,"info commands ", c, (char *) NULL) == TCL_OK) {
      Tcl_Obj *result = Tcl_GetObjResult(interp);
      if (*(Tcl_GetStringFromObj(result, NULL)) == 0) {
        /* It's not a command, so it can't be a pointer */
        Tcl_ResetResult(interp);
        return SWIG_ERROR;
      }
    } else {
      /* This will only fail if the argument is multiple words. */
      /* Multiple words are also not commands.                  */
      Tcl_ResetResult(interp);
      return SWIG_ERROR;
    }

    /* Check if this is really a SWIG pointer */
    if (Tcl_VarEval(interp,c," cget -this", (char *) NULL) != TCL_OK) {
      Tcl_ResetResult(interp);
      return SWIG_ERROR;
    }

    c = Tcl_GetStringFromObj(Tcl_GetObjResult(interp), NULL);
  }

  c++;
  c = SWIG_UnpackData(c,ptr,sizeof(void *));
  if (ty) {
    tc = c ? SWIG_TypeCheck(c,ty) : 0;
    if (!tc) {
      return SWIG_ERROR;
    }
    if (flags & SWIG_POINTER_DISOWN) {
      SWIG_Disown((void *) *ptr);
    }
    {
      int newmemory = 0;
      *ptr = SWIG_TypeCast(tc,(void *) *ptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
    }
  }
  return SWIG_OK;
}

/* Convert a pointer value */
SWIGRUNTIMEINLINE int
SWIG_Tcl_ConvertPtr(Tcl_Interp *interp, Tcl_Obj *oc, void **ptr, swig_type_info *ty, int flags) {
  return SWIG_Tcl_ConvertPtrFromString(interp, Tcl_GetStringFromObj(oc,NULL), ptr, ty, flags);
}

/* Convert a pointer value */
SWIGRUNTIME char *
SWIG_Tcl_PointerTypeFromString(char *c) {
  char d;
  /* Pointer values must start with leading underscore. NULL has no type */
  if (*c != '_') {
    return 0;
  }
  c++;
  /* Extract hex value from pointer */
  while ((d = *c)) {
    if (!(((d >= '0') && (d <= '9')) || ((d >= 'a') && (d <= 'f')))) break;
    c++;
  }
  return c;
}

/* Convert a packed value value */
SWIGRUNTIME int
SWIG_Tcl_ConvertPacked(Tcl_Interp *SWIGUNUSEDPARM(interp) , Tcl_Obj *obj, void *ptr, int sz, swig_type_info *ty) {
  swig_cast_info *tc;
  const char  *c;

  if (!obj) goto type_error;
  c = Tcl_GetStringFromObj(obj,NULL);
  /* Pointer values must start with leading underscore */
  if (*c != '_') goto type_error;
  c++;
  c = SWIG_UnpackData(c,ptr,sz);
  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) goto type_error;
  }
  return SWIG_OK;

 type_error:

  return SWIG_ERROR;
}


/* Take a pointer and convert it to a string */
SWIGRUNTIME void
SWIG_Tcl_MakePtr(char *c, void *ptr, swig_type_info *ty, int flags) {
  if (ptr) {
    *(c++) = '_';
    c = SWIG_PackData(c,&ptr,sizeof(void *));
    strcpy(c,ty->name);
  } else {
    strcpy(c,(char *)"NULL");
  }
  flags = 0;
}

/* Create a new pointer object */
SWIGRUNTIMEINLINE Tcl_Obj *
SWIG_Tcl_NewPointerObj(void *ptr, swig_type_info *type, int flags) {
  Tcl_Obj *robj;
  char result[SWIG_BUFFER_SIZE];
  SWIG_MakePtr(result,ptr,type,flags);
  robj = Tcl_NewStringObj(result,-1);
  return robj;
}

SWIGRUNTIME Tcl_Obj *
SWIG_Tcl_NewPackedObj(void *ptr, int sz, swig_type_info *type) {
  char result[1024];
  char *r = result;
  if ((2*sz + 1 + strlen(type->name)) > 1000) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  strcpy(r,type->name);
  return Tcl_NewStringObj(result,-1);
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

SWIGRUNTIME swig_module_info * 
SWIG_Tcl_GetModule(Tcl_Interp *interp) {
  const char *data;
  swig_module_info *ret = 0;
  
  /* first check if pointer already created */
  data = Tcl_GetVar(interp, (char *)"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME, TCL_GLOBAL_ONLY);
  if (data) {
    SWIG_UnpackData(data, &ret, sizeof(swig_type_info **));
  }

  return ret;
}

SWIGRUNTIME void
SWIG_Tcl_SetModule(Tcl_Interp *interp, swig_module_info *module) {
  char buf[SWIG_BUFFER_SIZE];
  char *data;

  /* create a new pointer */
  data = SWIG_PackData(buf, &module, sizeof(swig_type_info **));
  *data = 0;
  Tcl_SetVar(interp, (char *)"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME, buf, 0);
}

/* -----------------------------------------------------------------------------*
 *  Object auxiliars
 * -----------------------------------------------------------------------------*/


SWIGRUNTIME void
SWIG_Tcl_ObjectDelete(ClientData clientData) {
  swig_instance *si = (swig_instance *) clientData;
  if ((si) && (si->destroy) && (SWIG_Disown(si->thisvalue))) {
    if (si->classptr->destructor) {
      (si->classptr->destructor)(si->thisvalue);
    }
  }
  Tcl_DecrRefCount(si->thisptr);
  free(si);
}

/* Function to invoke object methods given an instance */
SWIGRUNTIME int
SWIG_Tcl_MethodCommand(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST _objv[]) {
  char *method,   *attrname;
  swig_instance   *inst = (swig_instance *) clientData;
  swig_method     *meth;
  swig_attribute  *attr;
  Tcl_Obj         *oldarg;
  Tcl_Obj         **objv;
  int              rcode;
  swig_class      *cls;
  swig_class      *cls_stack[64];
  int              cls_stack_bi[64];
  int              cls_stack_top = 0;
  int              numconf = 2;
  int              bi;

  objv = (Tcl_Obj **) _objv;
  if (objc < 2) {
    Tcl_SetResult(interp, (char *) "wrong # args.", TCL_STATIC);
    return TCL_ERROR;
  }
  method = Tcl_GetStringFromObj(objv[1],NULL);
  if (strcmp(method,"-acquire") == 0) {
    inst->destroy = 1;
    SWIG_Acquire(inst->thisvalue);
    return TCL_OK;
  }
  if (strcmp(method,"-disown") == 0) {
    if (inst->destroy) {
      SWIG_Disown(inst->thisvalue);
    }
    inst->destroy = 0;
    return TCL_OK;
  }
  if (strcmp(method,"-delete") == 0) {
    Tcl_DeleteCommandFromToken(interp,inst->cmdtok);
    return TCL_OK;
  }
  cls_stack[cls_stack_top] = inst->classptr;
  cls_stack_bi[cls_stack_top] = -1;
  cls = inst->classptr;
  while (1) {
    bi = cls_stack_bi[cls_stack_top];
    cls = cls_stack[cls_stack_top];
    if (bi != -1) {
      if (!cls->bases[bi] && cls->base_names[bi]) {
        /* lookup and cache the base class */
	swig_type_info *info = SWIG_TypeQueryModule(cls->module, cls->module, cls->base_names[bi]);
	if (info) cls->bases[bi] = (swig_class *) info->clientdata;
      }
      cls = cls->bases[bi];
      if (cls) {
        cls_stack_bi[cls_stack_top]++;
        cls_stack_top++;
        cls_stack[cls_stack_top] = cls;
        cls_stack_bi[cls_stack_top] = -1;
        continue;
      }
    }
    if (!cls) {
      cls_stack_top--;
      if (cls_stack_top < 0) break;
      else continue;
    }
    cls_stack_bi[cls_stack_top]++;

    meth = cls->methods;
    /* Check for methods */
    while (meth && meth->name) {
      if (strcmp(meth->name,method) == 0) {
        oldarg = objv[1];
        objv[1] = inst->thisptr;
        Tcl_IncrRefCount(inst->thisptr);
        rcode = (*meth->method)(clientData,interp,objc,objv);
        objv[1] = oldarg;
        Tcl_DecrRefCount(inst->thisptr);
        return rcode;
      }
      meth++;
    }
    /* Check class methods for a match */
    if (strcmp(method,"cget") == 0) {
      if (objc < 3) {
        Tcl_SetResult(interp, (char *) "wrong # args.", TCL_STATIC);
        return TCL_ERROR;
      }
      attrname = Tcl_GetStringFromObj(objv[2],NULL);
      attr = cls->attributes;
      while (attr && attr->name) {
        if ((strcmp(attr->name, attrname) == 0) && (attr->getmethod)) {
          oldarg = objv[1];
          objv[1] = inst->thisptr;
          Tcl_IncrRefCount(inst->thisptr);
          rcode = (*attr->getmethod)(clientData,interp,2, objv);
          objv[1] = oldarg;
          Tcl_DecrRefCount(inst->thisptr);
          return rcode;
        }
        attr++;
      }
      if (strcmp(attrname, "-this") == 0) {
        Tcl_SetObjResult(interp, Tcl_DuplicateObj(inst->thisptr));
        return TCL_OK;
      }
      if (strcmp(attrname, "-thisown") == 0) {
        if (SWIG_Thisown(inst->thisvalue)) {
          Tcl_SetResult(interp,(char*)"1",TCL_STATIC);
        } else {
          Tcl_SetResult(interp,(char*)"0",TCL_STATIC);
        }
        return TCL_OK;
      }
    } else if (strcmp(method, "configure") == 0) {
      int i;
      if (objc < 4) {
        Tcl_SetResult(interp, (char *) "wrong # args.", TCL_STATIC);
        return TCL_ERROR;
      }
      i = 2;
      while (i < objc) {
        attrname = Tcl_GetStringFromObj(objv[i],NULL);
        attr = cls->attributes;
        while (attr && attr->name) {
          if ((strcmp(attr->name, attrname) == 0) && (attr->setmethod)) {
            oldarg = objv[i];
            objv[i] = inst->thisptr;
            Tcl_IncrRefCount(inst->thisptr);
            rcode = (*attr->setmethod)(clientData,interp,3, &objv[i-1]);
            objv[i] = oldarg;
            Tcl_DecrRefCount(inst->thisptr);
            if (rcode != TCL_OK) return rcode;
            numconf += 2;
          }
          attr++;
        }
        i+=2;
      }
    }
  }
  if (strcmp(method,"configure") == 0) {
    if (numconf >= objc) {
      return TCL_OK;
    } else {
      Tcl_SetResult(interp,(char *) "Invalid attribute name.", TCL_STATIC);
      return TCL_ERROR;
    }
  }
  if (strcmp(method,"cget") == 0) {
    Tcl_SetResult(interp,(char *) "Invalid attribute name.", TCL_STATIC);
    return TCL_ERROR;
  }
  Tcl_SetResult(interp, (char *) "Invalid method. Must be one of: configure cget -acquire -disown -delete", TCL_STATIC);
  cls = inst->classptr;
  bi = 0;
  while (cls) {
    meth = cls->methods;
    while (meth && meth->name) {
      char *cr = (char *) Tcl_GetStringResult(interp);
      size_t meth_len = strlen(meth->name);
      char* where = strchr(cr,':');
      while(where) {
        where = strstr(where, meth->name);
        if(where) {
          if(where[-1] == ' ' && (where[meth_len] == ' ' || where[meth_len]==0)) {
            break;
          } else {
            where++;
          }
        }
      }

      if (!where)
        Tcl_AppendElement(interp, (char *) meth->name);
      meth++;
    }
    cls = inst->classptr->bases[bi++];
  }
  return TCL_ERROR;
}

/* This function takes the current result and turns it into an object command */
SWIGRUNTIME Tcl_Obj *
SWIG_Tcl_NewInstanceObj(Tcl_Interp *interp, void *thisvalue, swig_type_info *type, int flags) {
  Tcl_Obj *robj = SWIG_NewPointerObj(thisvalue, type,0);
  /* Check to see if this pointer belongs to a class or not */
  if ((type->clientdata) && (interp)) {
    Tcl_CmdInfo    ci;
    char          *name;
    name = Tcl_GetStringFromObj(robj,NULL);
    if (!Tcl_GetCommandInfo(interp,name, &ci) || (flags)) {
      swig_instance *newinst = (swig_instance *) malloc(sizeof(swig_instance));
      newinst->thisptr = Tcl_DuplicateObj(robj);
      Tcl_IncrRefCount(newinst->thisptr);
      newinst->thisvalue = thisvalue;
      newinst->classptr = (swig_class *) type->clientdata;
      newinst->destroy = flags;
      newinst->cmdtok = Tcl_CreateObjCommand(interp, Tcl_GetStringFromObj(robj,NULL), (swig_wrapper_func) SWIG_MethodCommand, (ClientData) newinst, (swig_delete_func) SWIG_ObjectDelete);
      if (flags) {
        SWIG_Acquire(thisvalue);
      }
    }
  }
  return robj;
}

/* Function to create objects */
SWIGRUNTIME int
SWIG_Tcl_ObjectConstructor(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj          *newObj = 0;
  void             *thisvalue = 0;
  swig_instance   *newinst = 0;
  swig_class      *classptr = (swig_class *) clientData;
  swig_wrapper     cons = 0;
  char             *name = 0;
  int               firstarg = 0;
  int               thisarg = 0;
  int               destroy = 1;

  if (!classptr) {
    Tcl_SetResult(interp, (char *) "swig: internal runtime error. No class object defined.", TCL_STATIC);
    return TCL_ERROR;
  }
  cons = classptr->constructor;
  if (objc > 1) {
    char *s = Tcl_GetStringFromObj(objv[1],NULL);
    if (strcmp(s,"-this") == 0) {
      thisarg = 2;
      cons = 0;
    } else if (strcmp(s,"-args") == 0) {
      firstarg = 1;
    } else if (objc == 2) {
      firstarg = 1;
      name = s;
    } else if (objc >= 3) {
      char *s1;
      name = s;
      s1 = Tcl_GetStringFromObj(objv[2],NULL);
      if (strcmp(s1,"-this") == 0) {
	thisarg = 3;
	cons = 0;
      } else {
	firstarg = 1;
      }
    }
  }
  if (cons) {
    int result;
    result = (*cons)(0, interp, objc-firstarg, &objv[firstarg]);
    if (result != TCL_OK) {
      return result;
    }
    newObj = Tcl_DuplicateObj(Tcl_GetObjResult(interp));
    if (!name) name = Tcl_GetStringFromObj(newObj,NULL);
  } else if (thisarg > 0) {
    if (thisarg < objc) {
      destroy = 0;
      newObj = Tcl_DuplicateObj(objv[thisarg]);
      if (!name) name = Tcl_GetStringFromObj(newObj,NULL);
    } else {
      Tcl_SetResult(interp, (char *) "wrong # args.", TCL_STATIC);
      return TCL_ERROR;
    }
  } else {
    Tcl_SetResult(interp, (char *) "No constructor available.", TCL_STATIC);
    return TCL_ERROR;
  }
  if (SWIG_Tcl_ConvertPtr(interp,newObj, (void **) &thisvalue, *(classptr->type), 0) != SWIG_OK) {
    Tcl_DecrRefCount(newObj);
    return TCL_ERROR;
  }
  newinst = (swig_instance *) malloc(sizeof(swig_instance));
  newinst->thisptr = newObj;
  Tcl_IncrRefCount(newObj);
  newinst->thisvalue = thisvalue;
  newinst->classptr = classptr;
  newinst->destroy = destroy;
  if (destroy) {
    SWIG_Acquire(thisvalue);
  }
  newinst->cmdtok = Tcl_CreateObjCommand(interp,name, (swig_wrapper) SWIG_MethodCommand, (ClientData) newinst, (swig_delete_func) SWIG_ObjectDelete);
  return TCL_OK;
}

/* -----------------------------------------------------------------------------*
 *   Get arguments 
 * -----------------------------------------------------------------------------*/
SWIGRUNTIME int
SWIG_Tcl_GetArgs(Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[], const char *fmt, ...) {
  int        argno = 0, opt = 0;
  long       tempi;
  double     tempd;
  const char *c;
  va_list    ap;
  void      *vptr;
  Tcl_Obj   *obj = 0;
  swig_type_info *ty;

  va_start(ap,fmt);
  for (c = fmt; (*c && (*c != ':') && (*c != ';')); c++,argno++) {
    if (*c == '|') {
      opt = 1;
      c++;
    }
    if (argno >= (objc-1)) {
      if (!opt) {
        Tcl_SetResult(interp, (char *) "Wrong number of arguments ", TCL_STATIC);
        goto argerror;
      } else {
        va_end(ap);
        return TCL_OK;
      }
    }

    vptr = va_arg(ap,void *);
    if (vptr) {
      if (isupper(*c)) {
        obj = SWIG_Tcl_GetConstantObj(Tcl_GetStringFromObj(objv[argno+1],0));
        if (!obj) obj = objv[argno+1];
      } else {
        obj = objv[argno+1];
      }
      switch(*c) {
      case 'i': case 'I':
      case 'l': case 'L':
      case 'h': case 'H':
      case 'b': case 'B':
        if (Tcl_GetLongFromObj(interp,obj,&tempi) != TCL_OK) goto argerror;
        if ((*c == 'i') || (*c == 'I')) *((int *)vptr) = (int)tempi;
        else if ((*c == 'l') || (*c == 'L')) *((long *)vptr) = (long)tempi;
        else if ((*c == 'h') || (*c == 'H')) *((short*)vptr) = (short)tempi;
        else if ((*c == 'b') || (*c == 'B')) *((unsigned char *)vptr) = (unsigned char)tempi;
        break;
      case 'f': case 'F':
      case 'd': case 'D':
        if (Tcl_GetDoubleFromObj(interp,obj,&tempd) != TCL_OK) goto argerror;
        if ((*c == 'f') || (*c == 'F')) *((float *) vptr) = (float)tempd;
        else if ((*c == 'd') || (*c == 'D')) *((double*) vptr) = tempd;
        break;
      case 's': case 'S':
        if (*(c+1) == '#') {
          int *vlptr = (int *) va_arg(ap, void *);
          *((char **) vptr) = Tcl_GetStringFromObj(obj, vlptr);
          c++;
        } else {
          *((char **)vptr) = Tcl_GetStringFromObj(obj,NULL);
        }
        break;
      case 'c': case 'C':
        *((char *)vptr) = *(Tcl_GetStringFromObj(obj,NULL));
        break;
      case 'p': case 'P':
        ty = (swig_type_info *) va_arg(ap, void *);
        if (SWIG_Tcl_ConvertPtr(interp, obj, (void **) vptr, ty, 0) != SWIG_OK) goto argerror;
        break;
      case 'o': case 'O':
        *((Tcl_Obj **)vptr) = objv[argno+1];
        break;
      default:
        break;
      }
    }
  }

  if ((*c != ';') && ((objc-1) > argno)) {
    Tcl_SetResult(interp, (char *) "Wrong # args.", TCL_STATIC);
    goto argerror;
  }
  va_end(ap);
  return TCL_OK;

 argerror:
  {
    char temp[32];
    sprintf(temp,"%d", argno+1);
    c = strchr(fmt,':');
    if (!c) c = strchr(fmt,';');
    if (!c) c = (char *)"";
    Tcl_AppendResult(interp,c," argument ", temp, NULL);
    va_end(ap);
    return TCL_ERROR;
  }
}

#ifdef __cplusplus
#if 0
{ /* cc-mode */
#endif
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



  #define SWIG_exception(code, msg) do { SWIG_Error(code, msg); return TCL_ERROR;; } while(0) 


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_Alta swig_types[0]
#define SWIGTYPE_p_ApogeeCam swig_types[1]
#define SWIGTYPE_p_ApogeeFilterWheel swig_types[2]
#define SWIGTYPE_p_Ascent swig_types[3]
#define SWIGTYPE_p_CamGen2Base swig_types[4]
#define SWIGTYPE_p_CamInfo__StrDb swig_types[5]
#define SWIGTYPE_p_CameraStatusRegs swig_types[6]
#define SWIGTYPE_p_CameraStatusRegs__AdvStatus swig_types[7]
#define SWIGTYPE_p_CameraStatusRegs__BasicStatus swig_types[8]
#define SWIGTYPE_p_FindDeviceEthernet swig_types[9]
#define SWIGTYPE_p_FindDeviceUsb swig_types[10]
#define SWIGTYPE_p_Gee swig_types[11]
#define SWIGTYPE_p_HiC swig_types[12]
#define SWIGTYPE_p_Quad swig_types[13]
#define SWIGTYPE_p_char swig_types[14]
#define SWIGTYPE_p_int32_t swig_types[15]
#define SWIGTYPE_p_std__vectorT_std__string_t swig_types[16]
#define SWIGTYPE_p_std__vectorT_unsigned_short_t swig_types[17]
#define SWIGTYPE_p_uint32_t swig_types[18]
#define SWIGTYPE_p_unsigned_short swig_types[19]
#define SWIGTYPE_p_ushortArray swig_types[20]
#define SWIGTYPE_std__ptrdiff_t swig_types[21]
#define SWIGTYPE_std__size_t swig_types[22]
static swig_type_info *swig_types[24];
static swig_module_info swig_module = {swig_types, 23, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_init    Tcllibapogee_Init
#define SWIG_name    "tcllibapogee"
#define SWIG_prefix  ""
#define SWIG_version "0.0"

#define SWIGVERSION 0x010340 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>



#ifdef __cplusplus
extern "C" {
#endif
#ifdef MAC_TCL
#pragma export on
#endif
SWIGEXPORT int SWIG_init(Tcl_Interp *);
#ifdef MAC_TCL
#pragma export off
#endif
#ifdef __cplusplus
}
#endif

/* Compatibility version for TCL stubs */
#ifndef SWIG_TCL_STUBS_VERSION
#define SWIG_TCL_STUBS_VERSION "8.1"
#endif



typedef struct SWIGCDATA {
    char *data;
    size_t   len;
} SWIGCDATA;



extern "C"  {    


static SWIGCDATA cdata_void(void *ptr, size_t nelements)



{
  SWIGCDATA d;
  d.data = (char *) ptr;



  d.len  = nelements;

   return d;
}

}



#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


SWIGINTERN int
SWIG_AsVal_unsigned_SS_long SWIG_TCL_DECL_ARGS_2(Tcl_Obj *obj, unsigned long *val) {
  long v;
  if (Tcl_GetLongFromObj(0,obj, &v) == TCL_OK) {
    if (v >= 0) {
      if (val) *val = (unsigned long) v;
      return SWIG_OK;
    }
    /* If v is negative, then this could be a negative number, or an
       unsigned value which doesn't fit in a signed long, so try to
       get it as a string so we can distinguish these cases. */
  }
  {
    int len = 0;
    const char *nptr = Tcl_GetStringFromObj(obj, &len);
    if (nptr && len > 0) {
      char *endptr;
      unsigned long v;
      if (*nptr == '-') return SWIG_OverflowError;
      errno = 0;
      v = strtoul(nptr, &endptr,0);
      if (nptr[0] == '\0' || *endptr != '\0')
	return SWIG_TypeError;
      if (v == ULONG_MAX && errno == ERANGE) {
	errno = 0;
	return SWIG_OverflowError;
      } else {
	if (*endptr == '\0') {
	  if (val) *val = v;
	  return SWIG_OK;
	}
      }
    }
  }
  
  return SWIG_TypeError;
}


SWIGINTERNINLINE int
SWIG_AsVal_size_t SWIG_TCL_DECL_ARGS_2(Tcl_Obj * obj, size_t *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long SWIG_TCL_CALL_ARGS_2(obj, val ? &v : 0);
  if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
  return res;
}


SWIGINTERNINLINE Tcl_Obj *
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  return (size < INT_MAX) ? Tcl_NewStringObj(carray, static_cast< int >(size)) : NULL;
}


typedef unsigned short ushortArray;

SWIGINTERN ushortArray *new_ushortArray(size_t nelements){
    return (new unsigned short[nelements]);
  }
SWIGINTERN void delete_ushortArray(ushortArray *self){
    delete[] self;
  }
SWIGINTERN unsigned short ushortArray_getitem(ushortArray *self,size_t index){
    return self[index];
  }

SWIGINTERNINLINE Tcl_Obj* 
SWIG_From_long  (long value)
{
  if (((long) INT_MIN <= value) && (value <= (long) INT_MAX)) {
    return Tcl_NewIntObj(static_cast< int >(value));
  } else {
    return Tcl_NewLongObj(value);
  }
}


#include <stdio.h>
#if defined(_MSC_VER) || defined(__BORLANDC__) || defined(_WATCOM)
# ifndef snprintf
#  define snprintf _snprintf
# endif
#endif


SWIGINTERNINLINE Tcl_Obj* 
SWIG_From_unsigned_SS_long  (unsigned long value)
{
  if (value < (unsigned long) LONG_MAX) {
    return SWIG_From_long  (static_cast< long >(value));
  } else {
    char temp[256]; 
    sprintf(temp, "%lu", value);
    return Tcl_NewStringObj(temp,-1);
  }
}


SWIGINTERNINLINE Tcl_Obj *
SWIG_From_unsigned_SS_short  (unsigned short value)
{    
  return SWIG_From_unsigned_SS_long  (value);
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_short SWIG_TCL_DECL_ARGS_2(Tcl_Obj * obj, unsigned short *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long SWIG_TCL_CALL_ARGS_2(obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > USHRT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned short >(v);
    }
  }  
  return res;
}

SWIGINTERN void ushortArray_setitem(ushortArray *self,size_t index,unsigned short value){
    self[index] = value;
  }
SWIGINTERN unsigned short *ushortArray_cast(ushortArray *self){
    return self;
  }
SWIGINTERN ushortArray *ushortArray_frompointer(unsigned short *t){
    return static_cast< ushortArray * >(t);
  }

#include "DefDllExport.h"
#include "ApogeeCam.h"
#include "CamGen2Base.h"
#include "Alta.h"
#include "ApogeeFilterWheel.h"
#include "Ascent.h"
#include "CameraInfo.h"
#include "CameraStatusRegs.h"
#include "FindDeviceEthernet.h" 
#include "FindDeviceUsb.h" 
#include "Gee.h"
#include "HiC.h" 
#include "Quad.h" 
typedef short unsigned int uint16_t;


#include <string>


#include <stdexcept>


#include <vector>
#include <algorithm>
#include <stdexcept>
#include <string>

Tcl_Obj* SwigString_FromString(const std::string &s) {
    return Tcl_NewStringObj(s.data(), (int)s.length());
}

int Tcl_GetBoolFromObj(Tcl_Interp *interp, Tcl_Obj *o, bool *val) {
  int v;
  int res = Tcl_GetBooleanFromObj(interp, o, &v);
  if (res == TCL_OK) {
    *val = v ? true : false;
  }
  return res;  
}
 
int SwigString_AsString(Tcl_Interp *interp, Tcl_Obj *o, std::string *val) {
    int len;
    const char* temp = Tcl_GetStringFromObj(o, &len);
    if (temp == NULL)
        return TCL_ERROR;
    val->assign(temp, len);
    return TCL_OK;
}

// behaviour of this is such as the real Tcl_GetIntFromObj
template <typename Type>
int SwigInt_As(Tcl_Interp *interp, Tcl_Obj *o, Type *val) {
    int temp_val, return_val;
    return_val = Tcl_GetIntFromObj(interp, o, &temp_val);
    *val = (Type) temp_val;
    return return_val;
}

// behaviour of this is such as the real Tcl_GetDoubleFromObj
template <typename Type>
int SwigDouble_As(Tcl_Interp *interp, Tcl_Obj *o, Type *val) {
    int return_val;
    double temp_val;
    return_val = Tcl_GetDoubleFromObj(interp, o, &temp_val);
    *val = (Type) temp_val;
    return return_val;
}



#define SWIG_FILE_WITH_INIT


SWIGINTERN int
SWIG_AsVal_long SWIG_TCL_DECL_ARGS_2(Tcl_Obj *obj, long* val)
{
  long v;
  if (Tcl_GetLongFromObj(0,obj, &v) == TCL_OK) {
    if (val) *val = (long) v;
    return SWIG_OK;
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_int SWIG_TCL_DECL_ARGS_2(Tcl_Obj * obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long SWIG_TCL_CALL_ARGS_2(obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE Tcl_Obj *
SWIG_From_int  (int value)
{    
  return SWIG_From_long  (value);
}


SWIGINTERN int
SWIG_AsVal_double SWIG_TCL_DECL_ARGS_2(Tcl_Obj *obj, double *val)
{
  double v;
  if (Tcl_GetDoubleFromObj(0, obj, &v) == TCL_OK) {
    if (val) *val = v;
    return SWIG_OK;
  }
  return SWIG_TypeError;
}


  #define SWIG_From_double   Tcl_NewDoubleObj 


SWIGINTERN int
SWIG_AsVal_bool SWIG_TCL_DECL_ARGS_2(Tcl_Obj *obj, bool *val)
{
  int v;
  if (Tcl_GetBooleanFromObj(0, obj, &v) == TCL_OK) {
    if (val) *val = v ? true : false;
    return SWIG_OK;
  }
  return SWIG_TypeError;
}


  #define SWIG_From_bool   Tcl_NewBooleanObj 


SWIGINTERNINLINE Tcl_Obj *
SWIG_From_std_string  (const std::string& s)
{
  if (s.size()) {
    return SWIG_FromCharPtrAndSize(s.data(), s.size());
  } else {
    return SWIG_FromCharPtrAndSize(s.c_str(), 0);
  }
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(Tcl_Obj *obj, char** cptr, size_t* psize, int *alloc)
{ 
  int len = 0;
  char *cstr = Tcl_GetStringFromObj(obj, &len);
  if (cstr) {
    if (cptr)  *cptr = cstr;
    if (psize) *psize = len + 1;
    if (alloc) *alloc = SWIG_OLDOBJ;
    return SWIG_OK;
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsPtr_std_string SWIG_TCL_DECL_ARGS_2(Tcl_Obj * obj, std::string **val) 
{
  char* buf = 0 ; size_t size = 0; int alloc = SWIG_OLDOBJ;
  if (SWIG_IsOK((SWIG_AsCharPtrAndSize(obj, &buf, &size, &alloc)))) {
    if (buf) {
      if (val) *val = new std::string(buf, size - 1);
      if (alloc == SWIG_NEWOBJ) delete[] buf;
      return SWIG_NEWOBJ;
    } else {
      if (val) *val = 0;
      return SWIG_OLDOBJ;
    }
  } else {
    static int init = 0;
    static swig_type_info* descriptor = 0;
    if (!init) {
      descriptor = SWIG_TypeQuery("std::string" " *");
      init = 1;
    }
    if (descriptor) {
      std::string *vptr;
      int res = SWIG_ConvertPtr(obj, (void**)&vptr, descriptor, 0);
      if (SWIG_IsOK(res) && val) *val = vptr;
      return res;
    }
  }
  return SWIG_ERROR;
}

#ifdef __cplusplus
extern "C" {
#endif
SWIGINTERN int
_wrap_cdata(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  void *arg1 = (void *) 0 ;
  size_t arg2 = (size_t) 1 ;
  int res1 ;
  size_t val2 ;
  int ecode2 = 0 ;
  SWIGCDATA result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o|o:cdata ptr ?nelements? ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cdata" "', argument " "1"" of type '" "void *""'"); 
  }
  if (objc > 2) {
    ecode2 = SWIG_AsVal_size_t SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cdata" "', argument " "2"" of type '" "size_t""'");
    } 
    arg2 = static_cast< size_t >(val2);
  }
  result = cdata_void(arg1,arg2);
  Tcl_SetObjResult(interp,SWIG_FromCharPtrAndSize((&result)->data,(&result)->len));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_memmove(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  void *arg1 = (void *) 0 ;
  void *arg2 = (void *) 0 ;
  size_t arg3 ;
  int res1 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:memmove data indata inlen ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "memmove" "', argument " "1"" of type '" "void *""'"); 
  }
  res2 = SWIG_ConvertPtr(objv[2],SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "memmove" "', argument " "2"" of type '" "void const *""'"); 
  }
  ecode3 = SWIG_AsVal_size_t SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "memmove" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  memmove(arg1,(void const *)arg2,arg3);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_ushortArray(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  size_t arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  ushortArray *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:new_ushortArray nelements ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ushortArray" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  result = (ushortArray *)new_ushortArray(arg1);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_ushortArray,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_ushortArray(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ushortArray *arg1 = (ushortArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_ushortArray self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ushortArray, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ushortArray" "', argument " "1"" of type '" "ushortArray *""'"); 
  }
  arg1 = reinterpret_cast< ushortArray * >(argp1);
  delete_ushortArray(arg1);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ushortArray_getitem(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ushortArray *arg1 = (ushortArray *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  unsigned short result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:ushortArray_getitem self index ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ushortArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ushortArray_getitem" "', argument " "1"" of type '" "ushortArray *""'"); 
  }
  arg1 = reinterpret_cast< ushortArray * >(argp1);
  ecode2 = SWIG_AsVal_size_t SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ushortArray_getitem" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (unsigned short)ushortArray_getitem(arg1,arg2);
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ushortArray_setitem(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ushortArray *arg1 = (ushortArray *) 0 ;
  size_t arg2 ;
  unsigned short arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:ushortArray_setitem self index value ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ushortArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ushortArray_setitem" "', argument " "1"" of type '" "ushortArray *""'"); 
  }
  arg1 = reinterpret_cast< ushortArray * >(argp1);
  ecode2 = SWIG_AsVal_size_t SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ushortArray_setitem" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_short SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ushortArray_setitem" "', argument " "3"" of type '" "unsigned short""'");
  } 
  arg3 = static_cast< unsigned short >(val3);
  ushortArray_setitem(arg1,arg2,arg3);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ushortArray_cast(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ushortArray *arg1 = (ushortArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ushortArray_cast self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ushortArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ushortArray_cast" "', argument " "1"" of type '" "ushortArray *""'"); 
  }
  arg1 = reinterpret_cast< ushortArray * >(argp1);
  result = (unsigned short *)ushortArray_cast(arg1);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_short,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ushortArray_frompointer(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned short *arg1 = (unsigned short *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ushortArray *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ushortArray_frompointer t ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_unsigned_short, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ushortArray_frompointer" "', argument " "1"" of type '" "unsigned short *""'"); 
  }
  arg1 = reinterpret_cast< unsigned short * >(argp1);
  result = (ushortArray *)ushortArray_frompointer(arg1);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_ushortArray,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_ushortArray(void *obj) {
ushortArray *arg1 = (ushortArray *) obj;
delete_ushortArray(arg1);
}
static swig_method swig_ushortArray_methods[] = {
    {"getitem", _wrap_ushortArray_getitem}, 
    {"setitem", _wrap_ushortArray_setitem}, 
    {"cast", _wrap_ushortArray_cast}, 
    {0,0}
};
static swig_attribute swig_ushortArray_attributes[] = {
    {0,0,0}
};
static swig_class *swig_ushortArray_bases[] = {0};
static const char * swig_ushortArray_base_names[] = {0};
static swig_class _wrap_class_ushortArray = { "ushortArray", &SWIGTYPE_p_ushortArray,_wrap_new_ushortArray, swig_delete_ushortArray, swig_ushortArray_methods, swig_ushortArray_attributes, swig_ushortArray_bases,swig_ushortArray_base_names, &swig_module };
SWIGINTERN int
_wrap_delete_ApogeeCam(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_ApogeeCam self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ApogeeCam" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  {
    try {
      delete arg1;
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_Reset(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ApogeeCam_Reset self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_Reset" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  {
    try {
      (arg1)->Reset();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_ReadReg(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  uint16_t result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:ApogeeCam_ReadReg self reg ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_ReadReg" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ApogeeCam_ReadReg" "', argument " "2"" of type '" "uint16_t""'");
  } 
  arg2 = static_cast< uint16_t >(val2);
  {
    try {
      result = (uint16_t)(arg1)->ReadReg(arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_WriteReg(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  uint16_t arg2 ;
  uint16_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:ApogeeCam_WriteReg self reg value ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_WriteReg" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ApogeeCam_WriteReg" "', argument " "2"" of type '" "uint16_t""'");
  } 
  arg2 = static_cast< uint16_t >(val2);
  ecode3 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ApogeeCam_WriteReg" "', argument " "3"" of type '" "uint16_t""'");
  } 
  arg3 = static_cast< uint16_t >(val3);
  {
    try {
      (arg1)->WriteReg(arg2,arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_SetRoiNumRows(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:ApogeeCam_SetRoiNumRows self rows ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_SetRoiNumRows" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ApogeeCam_SetRoiNumRows" "', argument " "2"" of type '" "uint16_t""'");
  } 
  arg2 = static_cast< uint16_t >(val2);
  {
    try {
      (arg1)->SetRoiNumRows(arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_SetRoiNumCols(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:ApogeeCam_SetRoiNumCols self cols ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_SetRoiNumCols" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ApogeeCam_SetRoiNumCols" "', argument " "2"" of type '" "uint16_t""'");
  } 
  arg2 = static_cast< uint16_t >(val2);
  {
    try {
      (arg1)->SetRoiNumCols(arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_GetRoiNumRows(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint16_t result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ApogeeCam_GetRoiNumRows self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_GetRoiNumRows" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  {
    try {
      result = (uint16_t)(arg1)->GetRoiNumRows();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_GetRoiNumCols(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint16_t result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ApogeeCam_GetRoiNumCols self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_GetRoiNumCols" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  {
    try {
      result = (uint16_t)(arg1)->GetRoiNumCols();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_SetRoiStartRow(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:ApogeeCam_SetRoiStartRow self row ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_SetRoiStartRow" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ApogeeCam_SetRoiStartRow" "', argument " "2"" of type '" "uint16_t""'");
  } 
  arg2 = static_cast< uint16_t >(val2);
  {
    try {
      (arg1)->SetRoiStartRow(arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_SetRoiStartCol(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:ApogeeCam_SetRoiStartCol self col ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_SetRoiStartCol" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ApogeeCam_SetRoiStartCol" "', argument " "2"" of type '" "uint16_t""'");
  } 
  arg2 = static_cast< uint16_t >(val2);
  {
    try {
      (arg1)->SetRoiStartCol(arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_GetRoiStartRow(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint16_t result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ApogeeCam_GetRoiStartRow self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_GetRoiStartRow" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  {
    try {
      result = (uint16_t)(arg1)->GetRoiStartRow();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_GetRoiStartCol(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint16_t result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ApogeeCam_GetRoiStartCol self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_GetRoiStartCol" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  {
    try {
      result = (uint16_t)(arg1)->GetRoiStartCol();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_SetRoiBinRow(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:ApogeeCam_SetRoiBinRow self bin ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_SetRoiBinRow" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ApogeeCam_SetRoiBinRow" "', argument " "2"" of type '" "uint16_t""'");
  } 
  arg2 = static_cast< uint16_t >(val2);
  {
    try {
      (arg1)->SetRoiBinRow(arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_GetRoiBinRow(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint16_t result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ApogeeCam_GetRoiBinRow self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_GetRoiBinRow" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  {
    try {
      result = (uint16_t)(arg1)->GetRoiBinRow();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_SetRoiBinCol(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:ApogeeCam_SetRoiBinCol self bin ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_SetRoiBinCol" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ApogeeCam_SetRoiBinCol" "', argument " "2"" of type '" "uint16_t""'");
  } 
  arg2 = static_cast< uint16_t >(val2);
  {
    try {
      (arg1)->SetRoiBinCol(arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_GetRoiBinCol(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint16_t result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ApogeeCam_GetRoiBinCol self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_GetRoiBinCol" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  {
    try {
      result = (uint16_t)(arg1)->GetRoiBinCol();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_GetFirmwareRev(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint16_t result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ApogeeCam_GetFirmwareRev self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_GetFirmwareRev" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  {
    try {
      result = (uint16_t)(arg1)->GetFirmwareRev();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_SetImageCount(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:ApogeeCam_SetImageCount self count ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_SetImageCount" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ApogeeCam_SetImageCount" "', argument " "2"" of type '" "uint16_t""'");
  } 
  arg2 = static_cast< uint16_t >(val2);
  {
    try {
      (arg1)->SetImageCount(arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_GetImageCount(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint16_t result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ApogeeCam_GetImageCount self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_GetImageCount" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  {
    try {
      result = (uint16_t)(arg1)->GetImageCount();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_GetImgSequenceCount(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint16_t result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ApogeeCam_GetImgSequenceCount self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_GetImgSequenceCount" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  {
    try {
      result = (uint16_t)(arg1)->GetImgSequenceCount();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_SetSequenceDelay(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:ApogeeCam_SetSequenceDelay self delay ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_SetSequenceDelay" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ApogeeCam_SetSequenceDelay" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->SetSequenceDelay(arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_GetSequenceDelay(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ApogeeCam_GetSequenceDelay self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_GetSequenceDelay" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  {
    try {
      result = (double)(arg1)->GetSequenceDelay();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_double(static_cast< double >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_SetVariableSequenceDelay(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:ApogeeCam_SetVariableSequenceDelay self variable ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_SetVariableSequenceDelay" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  ecode2 = SWIG_AsVal_bool SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ApogeeCam_SetVariableSequenceDelay" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->SetVariableSequenceDelay(arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_GetVariableSequenceDelay(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ApogeeCam_GetVariableSequenceDelay self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_GetVariableSequenceDelay" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  {
    try {
      result = (bool)(arg1)->GetVariableSequenceDelay();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast< bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_SetTdiRate(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:ApogeeCam_SetTdiRate self TdiRate ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_SetTdiRate" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ApogeeCam_SetTdiRate" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->SetTdiRate(arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_GetTdiRate(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ApogeeCam_GetTdiRate self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_GetTdiRate" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  {
    try {
      result = (double)(arg1)->GetTdiRate();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_double(static_cast< double >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_SetTdiRows(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:ApogeeCam_SetTdiRows self TdiRows ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_SetTdiRows" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ApogeeCam_SetTdiRows" "', argument " "2"" of type '" "uint16_t""'");
  } 
  arg2 = static_cast< uint16_t >(val2);
  {
    try {
      (arg1)->SetTdiRows(arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_GetTdiRows(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint16_t result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ApogeeCam_GetTdiRows self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_GetTdiRows" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  {
    try {
      result = (uint16_t)(arg1)->GetTdiRows();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_GetTdiCounter(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint16_t result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ApogeeCam_GetTdiCounter self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_GetTdiCounter" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  {
    try {
      result = (uint16_t)(arg1)->GetTdiCounter();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_SetTdiBinningRows(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:ApogeeCam_SetTdiBinningRows self bin ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_SetTdiBinningRows" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ApogeeCam_SetTdiBinningRows" "', argument " "2"" of type '" "uint16_t""'");
  } 
  arg2 = static_cast< uint16_t >(val2);
  {
    try {
      (arg1)->SetTdiBinningRows(arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_GetTdiBinningRows(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint16_t result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ApogeeCam_GetTdiBinningRows self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_GetTdiBinningRows" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  {
    try {
      result = (uint16_t)(arg1)->GetTdiBinningRows();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_SetKineticsSectionHeight(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:ApogeeCam_SetKineticsSectionHeight self height ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_SetKineticsSectionHeight" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ApogeeCam_SetKineticsSectionHeight" "', argument " "2"" of type '" "uint16_t""'");
  } 
  arg2 = static_cast< uint16_t >(val2);
  {
    try {
      (arg1)->SetKineticsSectionHeight(arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_GetKineticsSectionHeight(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint16_t result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ApogeeCam_GetKineticsSectionHeight self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_GetKineticsSectionHeight" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  {
    try {
      result = (uint16_t)(arg1)->GetKineticsSectionHeight();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_SetKineticsSections(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:ApogeeCam_SetKineticsSections self sections ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_SetKineticsSections" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ApogeeCam_SetKineticsSections" "', argument " "2"" of type '" "uint16_t""'");
  } 
  arg2 = static_cast< uint16_t >(val2);
  {
    try {
      (arg1)->SetKineticsSections(arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_GetKineticsSections(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint16_t result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ApogeeCam_GetKineticsSections self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_GetKineticsSections" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  {
    try {
      result = (uint16_t)(arg1)->GetKineticsSections();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_SetKineticsShiftInterval(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:ApogeeCam_SetKineticsShiftInterval self interval ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_SetKineticsShiftInterval" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ApogeeCam_SetKineticsShiftInterval" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->SetKineticsShiftInterval(arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_GetKineticsShiftInterval(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ApogeeCam_GetKineticsShiftInterval self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_GetKineticsShiftInterval" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  {
    try {
      result = (double)(arg1)->GetKineticsShiftInterval();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_double(static_cast< double >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_SetShutterStrobePosition(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:ApogeeCam_SetShutterStrobePosition self position ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_SetShutterStrobePosition" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ApogeeCam_SetShutterStrobePosition" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->SetShutterStrobePosition(arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_GetShutterStrobePosition(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ApogeeCam_GetShutterStrobePosition self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_GetShutterStrobePosition" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  {
    try {
      result = (double)(arg1)->GetShutterStrobePosition();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_double(static_cast< double >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_SetShutterStrobePeriod(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:ApogeeCam_SetShutterStrobePeriod self period ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_SetShutterStrobePeriod" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ApogeeCam_SetShutterStrobePeriod" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->SetShutterStrobePeriod(arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_GetShutterStrobePeriod(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ApogeeCam_GetShutterStrobePeriod self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_GetShutterStrobePeriod" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  {
    try {
      result = (double)(arg1)->GetShutterStrobePeriod();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_double(static_cast< double >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_SetShutterCloseDelay(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:ApogeeCam_SetShutterCloseDelay self delay ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_SetShutterCloseDelay" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ApogeeCam_SetShutterCloseDelay" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->SetShutterCloseDelay(arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_GetShutterCloseDelay(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ApogeeCam_GetShutterCloseDelay self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_GetShutterCloseDelay" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  {
    try {
      result = (double)(arg1)->GetShutterCloseDelay();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_double(static_cast< double >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_SetCoolerBackoffPoint(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:ApogeeCam_SetCoolerBackoffPoint self point ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_SetCoolerBackoffPoint" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ApogeeCam_SetCoolerBackoffPoint" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->SetCoolerBackoffPoint(arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_GetCoolerBackoffPoint(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ApogeeCam_GetCoolerBackoffPoint self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_GetCoolerBackoffPoint" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  {
    try {
      result = (double)(arg1)->GetCoolerBackoffPoint();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_double(static_cast< double >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_SetCoolerSetPoint(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:ApogeeCam_SetCoolerSetPoint self point ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_SetCoolerSetPoint" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ApogeeCam_SetCoolerSetPoint" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->SetCoolerSetPoint(arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_GetCoolerSetPoint(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ApogeeCam_GetCoolerSetPoint self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_GetCoolerSetPoint" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  {
    try {
      result = (double)(arg1)->GetCoolerSetPoint();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_double(static_cast< double >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_GetMacAddress(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ApogeeCam_GetMacAddress self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_GetMacAddress" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  {
    try {
      result = (arg1)->GetMacAddress();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_GetCameraMode(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Apg::CameraMode result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ApogeeCam_GetCameraMode self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_GetCameraMode" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  {
    try {
      result = (Apg::CameraMode)(arg1)->GetCameraMode();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_SetCameraMode(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  Apg::CameraMode arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:ApogeeCam_SetCameraMode self mode ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_SetCameraMode" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ApogeeCam_SetCameraMode" "', argument " "2"" of type '" "Apg::CameraMode""'");
  } 
  arg2 = static_cast< Apg::CameraMode >(val2);
  {
    try {
      (arg1)->SetCameraMode(arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_SetFastSequence(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:ApogeeCam_SetFastSequence self TurnOn ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_SetFastSequence" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  ecode2 = SWIG_AsVal_bool SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ApogeeCam_SetFastSequence" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->SetFastSequence(arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_IsFastSequenceOn(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ApogeeCam_IsFastSequenceOn self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_IsFastSequenceOn" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  {
    try {
      result = (bool)(arg1)->IsFastSequenceOn();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast< bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_SetBulkDownload(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:ApogeeCam_SetBulkDownload self TurnOn ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_SetBulkDownload" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  ecode2 = SWIG_AsVal_bool SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ApogeeCam_SetBulkDownload" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->SetBulkDownload(arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_IsBulkDownloadOn(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ApogeeCam_IsBulkDownloadOn self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_IsBulkDownloadOn" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  {
    try {
      result = (bool)(arg1)->IsBulkDownloadOn();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast< bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_SetIoPortAssignment(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:ApogeeCam_SetIoPortAssignment self assignment ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_SetIoPortAssignment" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ApogeeCam_SetIoPortAssignment" "', argument " "2"" of type '" "uint16_t""'");
  } 
  arg2 = static_cast< uint16_t >(val2);
  {
    try {
      (arg1)->SetIoPortAssignment(arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_GetIoPortAssignment(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint16_t result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ApogeeCam_GetIoPortAssignment self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_GetIoPortAssignment" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  {
    try {
      result = (uint16_t)(arg1)->GetIoPortAssignment();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_SetIoPortBlankingBits(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:ApogeeCam_SetIoPortBlankingBits self blankingBits ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_SetIoPortBlankingBits" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ApogeeCam_SetIoPortBlankingBits" "', argument " "2"" of type '" "uint16_t""'");
  } 
  arg2 = static_cast< uint16_t >(val2);
  {
    try {
      (arg1)->SetIoPortBlankingBits(arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_GetIoPortBlankingBits(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint16_t result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ApogeeCam_GetIoPortBlankingBits self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_GetIoPortBlankingBits" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  {
    try {
      result = (uint16_t)(arg1)->GetIoPortBlankingBits();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_SetIoPortDirection(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:ApogeeCam_SetIoPortDirection self direction ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_SetIoPortDirection" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ApogeeCam_SetIoPortDirection" "', argument " "2"" of type '" "uint16_t""'");
  } 
  arg2 = static_cast< uint16_t >(val2);
  {
    try {
      (arg1)->SetIoPortDirection(arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_GetIoPortDirection(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint16_t result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ApogeeCam_GetIoPortDirection self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_GetIoPortDirection" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  {
    try {
      result = (uint16_t)(arg1)->GetIoPortDirection();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_SetIoPortData(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:ApogeeCam_SetIoPortData self data ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_SetIoPortData" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ApogeeCam_SetIoPortData" "', argument " "2"" of type '" "uint16_t""'");
  } 
  arg2 = static_cast< uint16_t >(val2);
  {
    try {
      (arg1)->SetIoPortData(arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_GetIoPortData(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint16_t result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ApogeeCam_GetIoPortData self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_GetIoPortData" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  {
    try {
      result = (uint16_t)(arg1)->GetIoPortData();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_SetPreFlash(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:ApogeeCam_SetPreFlash self TurnOn ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_SetPreFlash" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  ecode2 = SWIG_AsVal_bool SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ApogeeCam_SetPreFlash" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->SetPreFlash(arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_GetPreFlash(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ApogeeCam_GetPreFlash self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_GetPreFlash" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  {
    try {
      result = (bool)(arg1)->GetPreFlash();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast< bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_SetExternalTrigger(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  bool arg2 ;
  Apg::TriggerMode arg3 ;
  Apg::TriggerType arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oooo:ApogeeCam_SetExternalTrigger self TurnOn trigMode trigType ",(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_SetExternalTrigger" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  ecode2 = SWIG_AsVal_bool SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ApogeeCam_SetExternalTrigger" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ApogeeCam_SetExternalTrigger" "', argument " "3"" of type '" "Apg::TriggerMode""'");
  } 
  arg3 = static_cast< Apg::TriggerMode >(val3);
  ecode4 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ApogeeCam_SetExternalTrigger" "', argument " "4"" of type '" "Apg::TriggerType""'");
  } 
  arg4 = static_cast< Apg::TriggerType >(val4);
  {
    try {
      (arg1)->SetExternalTrigger(arg2,arg3,arg4);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_IsTriggerNormEachOn(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ApogeeCam_IsTriggerNormEachOn self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_IsTriggerNormEachOn" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  {
    try {
      result = (bool)(arg1)->IsTriggerNormEachOn();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast< bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_IsTriggerNormGroupOn(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ApogeeCam_IsTriggerNormGroupOn self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_IsTriggerNormGroupOn" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  {
    try {
      result = (bool)(arg1)->IsTriggerNormGroupOn();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast< bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_IsTriggerTdiKinEachOn(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ApogeeCam_IsTriggerTdiKinEachOn self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_IsTriggerTdiKinEachOn" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  {
    try {
      result = (bool)(arg1)->IsTriggerTdiKinEachOn();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast< bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_IsTriggerTdiKinGroupOn(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ApogeeCam_IsTriggerTdiKinGroupOn self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_IsTriggerTdiKinGroupOn" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  {
    try {
      result = (bool)(arg1)->IsTriggerTdiKinGroupOn();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast< bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_IsTriggerExternalShutterOn(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ApogeeCam_IsTriggerExternalShutterOn self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_IsTriggerExternalShutterOn" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  {
    try {
      result = (bool)(arg1)->IsTriggerExternalShutterOn();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast< bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_IsTriggerExternalReadoutOn(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ApogeeCam_IsTriggerExternalReadoutOn self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_IsTriggerExternalReadoutOn" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  {
    try {
      result = (bool)(arg1)->IsTriggerExternalReadoutOn();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast< bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_SetShutterState(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  Apg::ShutterState arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:ApogeeCam_SetShutterState self state ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_SetShutterState" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ApogeeCam_SetShutterState" "', argument " "2"" of type '" "Apg::ShutterState""'");
  } 
  arg2 = static_cast< Apg::ShutterState >(val2);
  {
    try {
      (arg1)->SetShutterState(arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_GetShutterState(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Apg::ShutterState result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ApogeeCam_GetShutterState self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_GetShutterState" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  {
    try {
      result = (Apg::ShutterState)(arg1)->GetShutterState();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_IsShutterForcedOpen(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ApogeeCam_IsShutterForcedOpen self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_IsShutterForcedOpen" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  {
    try {
      result = (bool)(arg1)->IsShutterForcedOpen();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast< bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_IsShutterForcedClosed(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ApogeeCam_IsShutterForcedClosed self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_IsShutterForcedClosed" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  {
    try {
      result = (bool)(arg1)->IsShutterForcedClosed();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast< bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_IsShutterOpen(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ApogeeCam_IsShutterOpen self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_IsShutterOpen" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  {
    try {
      result = (bool)(arg1)->IsShutterOpen();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast< bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_SetShutterAmpCtrl(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:ApogeeCam_SetShutterAmpCtrl self TurnOn ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_SetShutterAmpCtrl" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  ecode2 = SWIG_AsVal_bool SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ApogeeCam_SetShutterAmpCtrl" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->SetShutterAmpCtrl(arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_IsShutterAmpCtrlOn(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ApogeeCam_IsShutterAmpCtrlOn self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_IsShutterAmpCtrlOn" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  {
    try {
      result = (bool)(arg1)->IsShutterAmpCtrlOn();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast< bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_Init(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ApogeeCam_Init self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_Init" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  {
    try {
      (arg1)->Init();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_SetCooler(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:ApogeeCam_SetCooler self TurnOn ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_SetCooler" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  ecode2 = SWIG_AsVal_bool SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ApogeeCam_SetCooler" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->SetCooler(arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_GetCoolerStatus(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Apg::CoolerStatus result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ApogeeCam_GetCoolerStatus self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_GetCoolerStatus" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  {
    try {
      result = (Apg::CoolerStatus)(arg1)->GetCoolerStatus();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_IsCoolerOn(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ApogeeCam_IsCoolerOn self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_IsCoolerOn" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  {
    try {
      result = (bool)(arg1)->IsCoolerOn();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast< bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_GetTempCcd(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ApogeeCam_GetTempCcd self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_GetTempCcd" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  {
    try {
      result = (double)(arg1)->GetTempCcd();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_double(static_cast< double >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_GetTempHeatsink(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ApogeeCam_GetTempHeatsink self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_GetTempHeatsink" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  {
    try {
      result = (double)(arg1)->GetTempHeatsink();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_double(static_cast< double >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_SetCcdAdcResolution(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  Apg::Resolution arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:ApogeeCam_SetCcdAdcResolution self res ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_SetCcdAdcResolution" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ApogeeCam_SetCcdAdcResolution" "', argument " "2"" of type '" "Apg::Resolution""'");
  } 
  arg2 = static_cast< Apg::Resolution >(val2);
  {
    try {
      (arg1)->SetCcdAdcResolution(arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_GetCcdAdcResolution(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Apg::Resolution result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ApogeeCam_GetCcdAdcResolution self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_GetCcdAdcResolution" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  {
    try {
      result = (Apg::Resolution)(arg1)->GetCcdAdcResolution();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_SetCcdAdcSpeed(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  Apg::AdcSpeed arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:ApogeeCam_SetCcdAdcSpeed self speed ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_SetCcdAdcSpeed" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ApogeeCam_SetCcdAdcSpeed" "', argument " "2"" of type '" "Apg::AdcSpeed""'");
  } 
  arg2 = static_cast< Apg::AdcSpeed >(val2);
  {
    try {
      (arg1)->SetCcdAdcSpeed(arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_GetCcdAdcSpeed(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Apg::AdcSpeed result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ApogeeCam_GetCcdAdcSpeed self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_GetCcdAdcSpeed" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  {
    try {
      result = (Apg::AdcSpeed)(arg1)->GetCcdAdcSpeed();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_GetMaxBinCols(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint16_t result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ApogeeCam_GetMaxBinCols self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_GetMaxBinCols" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  {
    try {
      result = (uint16_t)(arg1)->GetMaxBinCols();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_GetMaxBinRows(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint16_t result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ApogeeCam_GetMaxBinRows self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_GetMaxBinRows" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  {
    try {
      result = (uint16_t)(arg1)->GetMaxBinRows();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_GetMaxImgCols(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint16_t result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ApogeeCam_GetMaxImgCols self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_GetMaxImgCols" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  {
    try {
      result = (uint16_t)(arg1)->GetMaxImgCols();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_GetMaxImgRows(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint16_t result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ApogeeCam_GetMaxImgRows self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_GetMaxImgRows" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  {
    try {
      result = (uint16_t)(arg1)->GetMaxImgRows();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_GetTotalRows(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint16_t result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ApogeeCam_GetTotalRows self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_GetTotalRows" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  {
    try {
      result = (uint16_t)(arg1)->GetTotalRows();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_GetTotalCols(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint16_t result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ApogeeCam_GetTotalCols self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_GetTotalCols" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  {
    try {
      result = (uint16_t)(arg1)->GetTotalCols();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_GetNumOverscanCols(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint16_t result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ApogeeCam_GetNumOverscanCols self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_GetNumOverscanCols" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  {
    try {
      result = (uint16_t)(arg1)->GetNumOverscanCols();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_IsInterline(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ApogeeCam_IsInterline self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_IsInterline" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  {
    try {
      result = (bool)(arg1)->IsInterline();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast< bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_GetPlatformType(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  CamModel::PlatformType result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ApogeeCam_GetPlatformType self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_GetPlatformType" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  {
    try {
      result = (CamModel::PlatformType)(arg1)->GetPlatformType();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_SetLedAState(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  Apg::LedState arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:ApogeeCam_SetLedAState self state ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_SetLedAState" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ApogeeCam_SetLedAState" "', argument " "2"" of type '" "Apg::LedState""'");
  } 
  arg2 = static_cast< Apg::LedState >(val2);
  {
    try {
      (arg1)->SetLedAState(arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_GetLedAState(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Apg::LedState result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ApogeeCam_GetLedAState self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_GetLedAState" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  {
    try {
      result = (Apg::LedState)(arg1)->GetLedAState();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_SetLedBState(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  Apg::LedState arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:ApogeeCam_SetLedBState self state ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_SetLedBState" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ApogeeCam_SetLedBState" "', argument " "2"" of type '" "Apg::LedState""'");
  } 
  arg2 = static_cast< Apg::LedState >(val2);
  {
    try {
      (arg1)->SetLedBState(arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_GetLedBState(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Apg::LedState result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ApogeeCam_GetLedBState self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_GetLedBState" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  {
    try {
      result = (Apg::LedState)(arg1)->GetLedBState();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_SetLedMode(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  Apg::LedMode arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:ApogeeCam_SetLedMode self mode ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_SetLedMode" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ApogeeCam_SetLedMode" "', argument " "2"" of type '" "Apg::LedMode""'");
  } 
  arg2 = static_cast< Apg::LedMode >(val2);
  {
    try {
      (arg1)->SetLedMode(arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_GetLedMode(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Apg::LedMode result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ApogeeCam_GetLedMode self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_GetLedMode" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  {
    try {
      result = (Apg::LedMode)(arg1)->GetLedMode();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_GetInfo(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ApogeeCam_GetInfo self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_GetInfo" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  {
    try {
      result = (arg1)->GetInfo();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_GetModel(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ApogeeCam_GetModel self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_GetModel" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  {
    try {
      result = (arg1)->GetModel();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_GetSensor(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ApogeeCam_GetSensor self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_GetSensor" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  {
    try {
      result = (arg1)->GetSensor();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_SetFlushCommands(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:ApogeeCam_SetFlushCommands self Disable ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_SetFlushCommands" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  ecode2 = SWIG_AsVal_bool SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ApogeeCam_SetFlushCommands" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->SetFlushCommands(arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_AreFlushCmdsDisabled(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ApogeeCam_AreFlushCmdsDisabled self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_AreFlushCmdsDisabled" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  {
    try {
      result = (bool)(arg1)->AreFlushCmdsDisabled();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast< bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_SetPostExposeFlushing(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:ApogeeCam_SetPostExposeFlushing self Disable ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_SetPostExposeFlushing" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  ecode2 = SWIG_AsVal_bool SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ApogeeCam_SetPostExposeFlushing" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->SetPostExposeFlushing(arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_IsPostExposeFlushingDisabled(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ApogeeCam_IsPostExposeFlushingDisabled self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_IsPostExposeFlushingDisabled" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  {
    try {
      result = (bool)(arg1)->IsPostExposeFlushingDisabled();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast< bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_GetPixelWidth(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ApogeeCam_GetPixelWidth self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_GetPixelWidth" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  {
    try {
      result = (double)(arg1)->GetPixelWidth();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_double(static_cast< double >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_GetPixelHeight(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ApogeeCam_GetPixelHeight self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_GetPixelHeight" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  {
    try {
      result = (double)(arg1)->GetPixelHeight();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_double(static_cast< double >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_GetMinExposureTime(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ApogeeCam_GetMinExposureTime self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_GetMinExposureTime" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  {
    try {
      result = (double)(arg1)->GetMinExposureTime();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_double(static_cast< double >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_GetMaxExposureTime(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ApogeeCam_GetMaxExposureTime self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_GetMaxExposureTime" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  {
    try {
      result = (double)(arg1)->GetMaxExposureTime();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_double(static_cast< double >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_IsColor(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ApogeeCam_IsColor self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_IsColor" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  {
    try {
      result = (bool)(arg1)->IsColor();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast< bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_IsCoolingSupported(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ApogeeCam_IsCoolingSupported self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_IsCoolingSupported" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  {
    try {
      result = (bool)(arg1)->IsCoolingSupported();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast< bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_IsCoolingRegulated(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ApogeeCam_IsCoolingRegulated self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_IsCoolingRegulated" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  {
    try {
      result = (bool)(arg1)->IsCoolingRegulated();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast< bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_GetInputVoltage(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ApogeeCam_GetInputVoltage self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_GetInputVoltage" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  {
    try {
      result = (double)(arg1)->GetInputVoltage();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_double(static_cast< double >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_GetInterfaceType(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  CamModel::InterfaceType result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ApogeeCam_GetInterfaceType self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_GetInterfaceType" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  {
    try {
      result = (CamModel::InterfaceType)(arg1)->GetInterfaceType();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_GetUsbVendorInfo(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  uint16_t *arg2 = 0 ;
  uint16_t *arg3 = 0 ;
  uint16_t *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oooo:ApogeeCam_GetUsbVendorInfo self VendorId ProductId DeviceId ",(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_GetUsbVendorInfo" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_unsigned_short,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ApogeeCam_GetUsbVendorInfo" "', argument " "2"" of type '" "uint16_t &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ApogeeCam_GetUsbVendorInfo" "', argument " "2"" of type '" "uint16_t &""'"); 
  }
  arg2 = reinterpret_cast< uint16_t * >(argp2);
  res3 = SWIG_ConvertPtr(objv[3], &argp3, SWIGTYPE_p_unsigned_short,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ApogeeCam_GetUsbVendorInfo" "', argument " "3"" of type '" "uint16_t &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ApogeeCam_GetUsbVendorInfo" "', argument " "3"" of type '" "uint16_t &""'"); 
  }
  arg3 = reinterpret_cast< uint16_t * >(argp3);
  res4 = SWIG_ConvertPtr(objv[4], &argp4, SWIGTYPE_p_unsigned_short,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ApogeeCam_GetUsbVendorInfo" "', argument " "4"" of type '" "uint16_t &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ApogeeCam_GetUsbVendorInfo" "', argument " "4"" of type '" "uint16_t &""'"); 
  }
  arg4 = reinterpret_cast< uint16_t * >(argp4);
  {
    try {
      (arg1)->GetUsbVendorInfo(*arg2,*arg3,*arg4);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_IsCCD(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ApogeeCam_IsCCD self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_IsCCD" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  {
    try {
      result = (bool)(arg1)->IsCCD();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast< bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_PauseTimer(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:ApogeeCam_PauseTimer self TurnOn ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_PauseTimer" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  ecode2 = SWIG_AsVal_bool SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ApogeeCam_PauseTimer" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->PauseTimer(arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_IsSerialASupported(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ApogeeCam_IsSerialASupported self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_IsSerialASupported" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  {
    try {
      result = (bool)(arg1)->IsSerialASupported();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast< bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_IsSerialBSupported(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ApogeeCam_IsSerialBSupported self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_IsSerialBSupported" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  {
    try {
      result = (bool)(arg1)->IsSerialBSupported();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast< bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_SetFlushBinningRows(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:ApogeeCam_SetFlushBinningRows self bin ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_SetFlushBinningRows" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ApogeeCam_SetFlushBinningRows" "', argument " "2"" of type '" "uint16_t""'");
  } 
  arg2 = static_cast< uint16_t >(val2);
  {
    try {
      (arg1)->SetFlushBinningRows(arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_GetFlushBinningRows(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint16_t result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ApogeeCam_GetFlushBinningRows self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_GetFlushBinningRows" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  {
    try {
      result = (uint16_t)(arg1)->GetFlushBinningRows();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_IsOverscanDigitized(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ApogeeCam_IsOverscanDigitized self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_IsOverscanDigitized" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  {
    try {
      result = (bool)(arg1)->IsOverscanDigitized();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast< bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_SetDigitizeOverscan(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:ApogeeCam_SetDigitizeOverscan self TurnOn ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_SetDigitizeOverscan" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  ecode2 = SWIG_AsVal_bool SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ApogeeCam_SetDigitizeOverscan" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->SetDigitizeOverscan(arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_SetAdcGain(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  uint16_t arg2 ;
  int32_t arg3 ;
  int32_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oooo:ApogeeCam_SetAdcGain self gain ad channel ",(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_SetAdcGain" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ApogeeCam_SetAdcGain" "', argument " "2"" of type '" "uint16_t""'");
  } 
  arg2 = static_cast< uint16_t >(val2);
  {
    res3 = SWIG_ConvertPtr(objv[3], &argp3, SWIGTYPE_p_int32_t,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ApogeeCam_SetAdcGain" "', argument " "3"" of type '" "int32_t""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ApogeeCam_SetAdcGain" "', argument " "3"" of type '" "int32_t""'");
    } else {
      arg3 = *(reinterpret_cast< int32_t * >(argp3));
    }
  }
  {
    res4 = SWIG_ConvertPtr(objv[4], &argp4, SWIGTYPE_p_int32_t,  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ApogeeCam_SetAdcGain" "', argument " "4"" of type '" "int32_t""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ApogeeCam_SetAdcGain" "', argument " "4"" of type '" "int32_t""'");
    } else {
      arg4 = *(reinterpret_cast< int32_t * >(argp4));
    }
  }
  {
    try {
      (arg1)->SetAdcGain(arg2,arg3,arg4);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_GetAdcGain(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  int32_t arg2 ;
  int32_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  uint16_t result;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:ApogeeCam_GetAdcGain self ad channel ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_GetAdcGain" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_int32_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ApogeeCam_GetAdcGain" "', argument " "2"" of type '" "int32_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ApogeeCam_GetAdcGain" "', argument " "2"" of type '" "int32_t""'");
    } else {
      arg2 = *(reinterpret_cast< int32_t * >(argp2));
    }
  }
  {
    res3 = SWIG_ConvertPtr(objv[3], &argp3, SWIGTYPE_p_int32_t,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ApogeeCam_GetAdcGain" "', argument " "3"" of type '" "int32_t""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ApogeeCam_GetAdcGain" "', argument " "3"" of type '" "int32_t""'");
    } else {
      arg3 = *(reinterpret_cast< int32_t * >(argp3));
    }
  }
  {
    try {
      result = (uint16_t)(arg1)->GetAdcGain(arg2,arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_SetAdcOffset(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  uint16_t arg2 ;
  int32_t arg3 ;
  int32_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oooo:ApogeeCam_SetAdcOffset self offset ad channel ",(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_SetAdcOffset" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ApogeeCam_SetAdcOffset" "', argument " "2"" of type '" "uint16_t""'");
  } 
  arg2 = static_cast< uint16_t >(val2);
  {
    res3 = SWIG_ConvertPtr(objv[3], &argp3, SWIGTYPE_p_int32_t,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ApogeeCam_SetAdcOffset" "', argument " "3"" of type '" "int32_t""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ApogeeCam_SetAdcOffset" "', argument " "3"" of type '" "int32_t""'");
    } else {
      arg3 = *(reinterpret_cast< int32_t * >(argp3));
    }
  }
  {
    res4 = SWIG_ConvertPtr(objv[4], &argp4, SWIGTYPE_p_int32_t,  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ApogeeCam_SetAdcOffset" "', argument " "4"" of type '" "int32_t""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ApogeeCam_SetAdcOffset" "', argument " "4"" of type '" "int32_t""'");
    } else {
      arg4 = *(reinterpret_cast< int32_t * >(argp4));
    }
  }
  {
    try {
      (arg1)->SetAdcOffset(arg2,arg3,arg4);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_GetAdcOffset(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  int32_t arg2 ;
  int32_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  uint16_t result;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:ApogeeCam_GetAdcOffset self ad channel ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_GetAdcOffset" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_int32_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ApogeeCam_GetAdcOffset" "', argument " "2"" of type '" "int32_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ApogeeCam_GetAdcOffset" "', argument " "2"" of type '" "int32_t""'");
    } else {
      arg2 = *(reinterpret_cast< int32_t * >(argp2));
    }
  }
  {
    res3 = SWIG_ConvertPtr(objv[3], &argp3, SWIGTYPE_p_int32_t,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ApogeeCam_GetAdcOffset" "', argument " "3"" of type '" "int32_t""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ApogeeCam_GetAdcOffset" "', argument " "3"" of type '" "int32_t""'");
    } else {
      arg3 = *(reinterpret_cast< int32_t * >(argp3));
    }
  }
  {
    try {
      result = (uint16_t)(arg1)->GetAdcOffset(arg2,arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_IsInitialized(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ApogeeCam_IsInitialized self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_IsInitialized" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  {
    try {
      result = (bool)(arg1)->IsInitialized();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast< bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_IsConnected(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ApogeeCam_IsConnected self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_IsConnected" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  {
    try {
      result = (bool)(arg1)->IsConnected();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast< bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_SetAdSimMode(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:ApogeeCam_SetAdSimMode self TurnOn ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_SetAdSimMode" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  ecode2 = SWIG_AsVal_bool SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ApogeeCam_SetAdSimMode" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->SetAdSimMode(arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_IsAdSimModeOn(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ApogeeCam_IsAdSimModeOn self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_IsAdSimModeOn" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  {
    try {
      result = (bool)(arg1)->IsAdSimModeOn();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast< bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_SetLedBrightness(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:ApogeeCam_SetLedBrightness self PercentIntensity ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_SetLedBrightness" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ApogeeCam_SetLedBrightness" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->SetLedBrightness(arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_GetLedBrightness(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ApogeeCam_GetLedBrightness self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_GetLedBrightness" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  {
    try {
      result = (double)(arg1)->GetLedBrightness();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_double(static_cast< double >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_GetDriverVersion(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ApogeeCam_GetDriverVersion self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_GetDriverVersion" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  {
    try {
      result = (arg1)->GetDriverVersion();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_GetUsbFirmwareVersion(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ApogeeCam_GetUsbFirmwareVersion self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_GetUsbFirmwareVersion" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  {
    try {
      result = (arg1)->GetUsbFirmwareVersion();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_GetSerialNumber(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ApogeeCam_GetSerialNumber self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_GetSerialNumber" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  {
    try {
      result = (arg1)->GetSerialNumber();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_CloseConnection(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ApogeeCam_CloseConnection self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_CloseConnection" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  {
    try {
      (arg1)->CloseConnection();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_OpenConnection(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  uint16_t arg4 ;
  uint16_t arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooooo:ApogeeCam_OpenConnection self ioType DeviceAddr FirmwareRev Id ",(void *)0,(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_OpenConnection" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ApogeeCam_OpenConnection" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ApogeeCam_OpenConnection" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[3], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ApogeeCam_OpenConnection" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ApogeeCam_OpenConnection" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  ecode4 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ApogeeCam_OpenConnection" "', argument " "4"" of type '" "uint16_t""'");
  } 
  arg4 = static_cast< uint16_t >(val4);
  ecode5 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[5], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ApogeeCam_OpenConnection" "', argument " "5"" of type '" "uint16_t""'");
  } 
  arg5 = static_cast< uint16_t >(val5);
  {
    try {
      (arg1)->OpenConnection((std::string const &)*arg2,(std::string const &)*arg3,arg4,arg5);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_StartExposure(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  double arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:ApogeeCam_StartExposure self Duration IsLight ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_StartExposure" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ApogeeCam_StartExposure" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_bool SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ApogeeCam_StartExposure" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->StartExposure(arg2,arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_GetStatus(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  CameraStatusRegs result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ApogeeCam_GetStatus self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_GetStatus" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  {
    try {
      result = (arg1)->GetStatus();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new CameraStatusRegs(static_cast< const CameraStatusRegs& >(result))), SWIGTYPE_p_CameraStatusRegs, SWIG_POINTER_OWN | 0 ));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_GetImagingStatus(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Apg::Status result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ApogeeCam_GetImagingStatus self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_GetImagingStatus" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  {
    try {
      result = (Apg::Status)(arg1)->GetImagingStatus();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_GetImage(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  std::vector< uint16_t > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< uint16_t > data2 ;
  int nx, ny;
  std::vector<uint16_t> pImageData;
  unsigned short *pccdData;
  
  {
    arg2 = &data2;
  }
  if (SWIG_GetArgs(interp, objc, objv,"o:ApogeeCam_GetImage self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_GetImage" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  {
    try {
       nx = (arg1)->GetRoiNumCols();
       ny = (arg1)->GetRoiNumRows();
       pccdData = (unsigned short *)CCD_locate_buffer("tempobs", 2 , nx, ny, 1, 1 );
       (arg1)->GetImage(pImageData);
       copy(pImageData.begin(), pImageData.end(), pccdData);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_StopExposure(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:ApogeeCam_StopExposure self Digitize ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_StopExposure" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  ecode2 = SWIG_AsVal_bool SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ApogeeCam_StopExposure" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->StopExposure(arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_GetAvailableMemory(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ApogeeCam_GetAvailableMemory self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_GetAvailableMemory" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  {
    try {
      result = (arg1)->GetAvailableMemory();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new uint32_t(static_cast< const uint32_t& >(result))), SWIGTYPE_p_uint32_t, SWIG_POINTER_OWN | 0 ));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_GetNumAds(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int32_t result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ApogeeCam_GetNumAds self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_GetNumAds" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  {
    try {
      result = (arg1)->GetNumAds();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new int32_t(static_cast< const int32_t& >(result))), SWIGTYPE_p_int32_t, SWIG_POINTER_OWN | 0 ));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_GetNumAdChannels(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int32_t result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ApogeeCam_GetNumAdChannels self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_GetNumAdChannels" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  {
    try {
      result = (arg1)->GetNumAdChannels();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new int32_t(static_cast< const int32_t& >(result))), SWIGTYPE_p_int32_t, SWIG_POINTER_OWN | 0 ));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_GetCoolerDrive(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ApogeeCam_GetCoolerDrive self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_GetCoolerDrive" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  {
    try {
      result = (double)(arg1)->GetCoolerDrive();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_double(static_cast< double >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_SetFanMode__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  Apg::FanMode arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:ApogeeCam_SetFanMode self mode PreCondCheck ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_SetFanMode" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ApogeeCam_SetFanMode" "', argument " "2"" of type '" "Apg::FanMode""'");
  } 
  arg2 = static_cast< Apg::FanMode >(val2);
  ecode3 = SWIG_AsVal_bool SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ApogeeCam_SetFanMode" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->SetFanMode(arg2,arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_SetFanMode__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  Apg::FanMode arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:ApogeeCam_SetFanMode self mode ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_SetFanMode" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ApogeeCam_SetFanMode" "', argument " "2"" of type '" "Apg::FanMode""'");
  } 
  arg2 = static_cast< Apg::FanMode >(val2);
  {
    try {
      (arg1)->SetFanMode(arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_SetFanMode(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ApogeeCam, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ApogeeCam_SetFanMode__SWIG_1(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ApogeeCam, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool SWIG_TCL_CALL_ARGS_2(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ApogeeCam_SetFanMode__SWIG_0(clientData, interp, objc, argv - 1);
        }
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'ApogeeCam_SetFanMode'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeCam_GetFanMode(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeCam *arg1 = (ApogeeCam *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Apg::FanMode result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ApogeeCam_GetFanMode self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeCam, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeCam_GetFanMode" "', argument " "1"" of type '" "ApogeeCam *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeCam * >(argp1);
  {
    try {
      result = (Apg::FanMode)(arg1)->GetFanMode();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_ApogeeCam(void *obj) {
ApogeeCam *arg1 = (ApogeeCam *) obj;
delete arg1;
}
static swig_method swig_ApogeeCam_methods[] = {
    {"Reset", _wrap_ApogeeCam_Reset}, 
    {"ReadReg", _wrap_ApogeeCam_ReadReg}, 
    {"WriteReg", _wrap_ApogeeCam_WriteReg}, 
    {"SetRoiNumRows", _wrap_ApogeeCam_SetRoiNumRows}, 
    {"SetRoiNumCols", _wrap_ApogeeCam_SetRoiNumCols}, 
    {"GetRoiNumRows", _wrap_ApogeeCam_GetRoiNumRows}, 
    {"GetRoiNumCols", _wrap_ApogeeCam_GetRoiNumCols}, 
    {"SetRoiStartRow", _wrap_ApogeeCam_SetRoiStartRow}, 
    {"SetRoiStartCol", _wrap_ApogeeCam_SetRoiStartCol}, 
    {"GetRoiStartRow", _wrap_ApogeeCam_GetRoiStartRow}, 
    {"GetRoiStartCol", _wrap_ApogeeCam_GetRoiStartCol}, 
    {"SetRoiBinRow", _wrap_ApogeeCam_SetRoiBinRow}, 
    {"GetRoiBinRow", _wrap_ApogeeCam_GetRoiBinRow}, 
    {"SetRoiBinCol", _wrap_ApogeeCam_SetRoiBinCol}, 
    {"GetRoiBinCol", _wrap_ApogeeCam_GetRoiBinCol}, 
    {"GetFirmwareRev", _wrap_ApogeeCam_GetFirmwareRev}, 
    {"SetImageCount", _wrap_ApogeeCam_SetImageCount}, 
    {"GetImageCount", _wrap_ApogeeCam_GetImageCount}, 
    {"GetImgSequenceCount", _wrap_ApogeeCam_GetImgSequenceCount}, 
    {"SetSequenceDelay", _wrap_ApogeeCam_SetSequenceDelay}, 
    {"GetSequenceDelay", _wrap_ApogeeCam_GetSequenceDelay}, 
    {"SetVariableSequenceDelay", _wrap_ApogeeCam_SetVariableSequenceDelay}, 
    {"GetVariableSequenceDelay", _wrap_ApogeeCam_GetVariableSequenceDelay}, 
    {"SetTdiRate", _wrap_ApogeeCam_SetTdiRate}, 
    {"GetTdiRate", _wrap_ApogeeCam_GetTdiRate}, 
    {"SetTdiRows", _wrap_ApogeeCam_SetTdiRows}, 
    {"GetTdiRows", _wrap_ApogeeCam_GetTdiRows}, 
    {"GetTdiCounter", _wrap_ApogeeCam_GetTdiCounter}, 
    {"SetTdiBinningRows", _wrap_ApogeeCam_SetTdiBinningRows}, 
    {"GetTdiBinningRows", _wrap_ApogeeCam_GetTdiBinningRows}, 
    {"SetKineticsSectionHeight", _wrap_ApogeeCam_SetKineticsSectionHeight}, 
    {"GetKineticsSectionHeight", _wrap_ApogeeCam_GetKineticsSectionHeight}, 
    {"SetKineticsSections", _wrap_ApogeeCam_SetKineticsSections}, 
    {"GetKineticsSections", _wrap_ApogeeCam_GetKineticsSections}, 
    {"SetKineticsShiftInterval", _wrap_ApogeeCam_SetKineticsShiftInterval}, 
    {"GetKineticsShiftInterval", _wrap_ApogeeCam_GetKineticsShiftInterval}, 
    {"SetShutterStrobePosition", _wrap_ApogeeCam_SetShutterStrobePosition}, 
    {"GetShutterStrobePosition", _wrap_ApogeeCam_GetShutterStrobePosition}, 
    {"SetShutterStrobePeriod", _wrap_ApogeeCam_SetShutterStrobePeriod}, 
    {"GetShutterStrobePeriod", _wrap_ApogeeCam_GetShutterStrobePeriod}, 
    {"SetShutterCloseDelay", _wrap_ApogeeCam_SetShutterCloseDelay}, 
    {"GetShutterCloseDelay", _wrap_ApogeeCam_GetShutterCloseDelay}, 
    {"SetCoolerBackoffPoint", _wrap_ApogeeCam_SetCoolerBackoffPoint}, 
    {"GetCoolerBackoffPoint", _wrap_ApogeeCam_GetCoolerBackoffPoint}, 
    {"SetCoolerSetPoint", _wrap_ApogeeCam_SetCoolerSetPoint}, 
    {"GetCoolerSetPoint", _wrap_ApogeeCam_GetCoolerSetPoint}, 
    {"GetMacAddress", _wrap_ApogeeCam_GetMacAddress}, 
    {"GetCameraMode", _wrap_ApogeeCam_GetCameraMode}, 
    {"SetCameraMode", _wrap_ApogeeCam_SetCameraMode}, 
    {"SetFastSequence", _wrap_ApogeeCam_SetFastSequence}, 
    {"IsFastSequenceOn", _wrap_ApogeeCam_IsFastSequenceOn}, 
    {"SetBulkDownload", _wrap_ApogeeCam_SetBulkDownload}, 
    {"IsBulkDownloadOn", _wrap_ApogeeCam_IsBulkDownloadOn}, 
    {"SetIoPortAssignment", _wrap_ApogeeCam_SetIoPortAssignment}, 
    {"GetIoPortAssignment", _wrap_ApogeeCam_GetIoPortAssignment}, 
    {"SetIoPortBlankingBits", _wrap_ApogeeCam_SetIoPortBlankingBits}, 
    {"GetIoPortBlankingBits", _wrap_ApogeeCam_GetIoPortBlankingBits}, 
    {"SetIoPortDirection", _wrap_ApogeeCam_SetIoPortDirection}, 
    {"GetIoPortDirection", _wrap_ApogeeCam_GetIoPortDirection}, 
    {"SetIoPortData", _wrap_ApogeeCam_SetIoPortData}, 
    {"GetIoPortData", _wrap_ApogeeCam_GetIoPortData}, 
    {"SetPreFlash", _wrap_ApogeeCam_SetPreFlash}, 
    {"GetPreFlash", _wrap_ApogeeCam_GetPreFlash}, 
    {"SetExternalTrigger", _wrap_ApogeeCam_SetExternalTrigger}, 
    {"IsTriggerNormEachOn", _wrap_ApogeeCam_IsTriggerNormEachOn}, 
    {"IsTriggerNormGroupOn", _wrap_ApogeeCam_IsTriggerNormGroupOn}, 
    {"IsTriggerTdiKinEachOn", _wrap_ApogeeCam_IsTriggerTdiKinEachOn}, 
    {"IsTriggerTdiKinGroupOn", _wrap_ApogeeCam_IsTriggerTdiKinGroupOn}, 
    {"IsTriggerExternalShutterOn", _wrap_ApogeeCam_IsTriggerExternalShutterOn}, 
    {"IsTriggerExternalReadoutOn", _wrap_ApogeeCam_IsTriggerExternalReadoutOn}, 
    {"SetShutterState", _wrap_ApogeeCam_SetShutterState}, 
    {"GetShutterState", _wrap_ApogeeCam_GetShutterState}, 
    {"IsShutterForcedOpen", _wrap_ApogeeCam_IsShutterForcedOpen}, 
    {"IsShutterForcedClosed", _wrap_ApogeeCam_IsShutterForcedClosed}, 
    {"IsShutterOpen", _wrap_ApogeeCam_IsShutterOpen}, 
    {"SetShutterAmpCtrl", _wrap_ApogeeCam_SetShutterAmpCtrl}, 
    {"IsShutterAmpCtrlOn", _wrap_ApogeeCam_IsShutterAmpCtrlOn}, 
    {"Init", _wrap_ApogeeCam_Init}, 
    {"SetCooler", _wrap_ApogeeCam_SetCooler}, 
    {"GetCoolerStatus", _wrap_ApogeeCam_GetCoolerStatus}, 
    {"IsCoolerOn", _wrap_ApogeeCam_IsCoolerOn}, 
    {"GetTempCcd", _wrap_ApogeeCam_GetTempCcd}, 
    {"GetTempHeatsink", _wrap_ApogeeCam_GetTempHeatsink}, 
    {"SetCcdAdcResolution", _wrap_ApogeeCam_SetCcdAdcResolution}, 
    {"GetCcdAdcResolution", _wrap_ApogeeCam_GetCcdAdcResolution}, 
    {"SetCcdAdcSpeed", _wrap_ApogeeCam_SetCcdAdcSpeed}, 
    {"GetCcdAdcSpeed", _wrap_ApogeeCam_GetCcdAdcSpeed}, 
    {"GetMaxBinCols", _wrap_ApogeeCam_GetMaxBinCols}, 
    {"GetMaxBinRows", _wrap_ApogeeCam_GetMaxBinRows}, 
    {"GetMaxImgCols", _wrap_ApogeeCam_GetMaxImgCols}, 
    {"GetMaxImgRows", _wrap_ApogeeCam_GetMaxImgRows}, 
    {"GetTotalRows", _wrap_ApogeeCam_GetTotalRows}, 
    {"GetTotalCols", _wrap_ApogeeCam_GetTotalCols}, 
    {"GetNumOverscanCols", _wrap_ApogeeCam_GetNumOverscanCols}, 
    {"IsInterline", _wrap_ApogeeCam_IsInterline}, 
    {"GetPlatformType", _wrap_ApogeeCam_GetPlatformType}, 
    {"SetLedAState", _wrap_ApogeeCam_SetLedAState}, 
    {"GetLedAState", _wrap_ApogeeCam_GetLedAState}, 
    {"SetLedBState", _wrap_ApogeeCam_SetLedBState}, 
    {"GetLedBState", _wrap_ApogeeCam_GetLedBState}, 
    {"SetLedMode", _wrap_ApogeeCam_SetLedMode}, 
    {"GetLedMode", _wrap_ApogeeCam_GetLedMode}, 
    {"GetInfo", _wrap_ApogeeCam_GetInfo}, 
    {"GetModel", _wrap_ApogeeCam_GetModel}, 
    {"GetSensor", _wrap_ApogeeCam_GetSensor}, 
    {"SetFlushCommands", _wrap_ApogeeCam_SetFlushCommands}, 
    {"AreFlushCmdsDisabled", _wrap_ApogeeCam_AreFlushCmdsDisabled}, 
    {"SetPostExposeFlushing", _wrap_ApogeeCam_SetPostExposeFlushing}, 
    {"IsPostExposeFlushingDisabled", _wrap_ApogeeCam_IsPostExposeFlushingDisabled}, 
    {"GetPixelWidth", _wrap_ApogeeCam_GetPixelWidth}, 
    {"GetPixelHeight", _wrap_ApogeeCam_GetPixelHeight}, 
    {"GetMinExposureTime", _wrap_ApogeeCam_GetMinExposureTime}, 
    {"GetMaxExposureTime", _wrap_ApogeeCam_GetMaxExposureTime}, 
    {"IsColor", _wrap_ApogeeCam_IsColor}, 
    {"IsCoolingSupported", _wrap_ApogeeCam_IsCoolingSupported}, 
    {"IsCoolingRegulated", _wrap_ApogeeCam_IsCoolingRegulated}, 
    {"GetInputVoltage", _wrap_ApogeeCam_GetInputVoltage}, 
    {"GetInterfaceType", _wrap_ApogeeCam_GetInterfaceType}, 
    {"GetUsbVendorInfo", _wrap_ApogeeCam_GetUsbVendorInfo}, 
    {"IsCCD", _wrap_ApogeeCam_IsCCD}, 
    {"PauseTimer", _wrap_ApogeeCam_PauseTimer}, 
    {"IsSerialASupported", _wrap_ApogeeCam_IsSerialASupported}, 
    {"IsSerialBSupported", _wrap_ApogeeCam_IsSerialBSupported}, 
    {"SetFlushBinningRows", _wrap_ApogeeCam_SetFlushBinningRows}, 
    {"GetFlushBinningRows", _wrap_ApogeeCam_GetFlushBinningRows}, 
    {"IsOverscanDigitized", _wrap_ApogeeCam_IsOverscanDigitized}, 
    {"SetDigitizeOverscan", _wrap_ApogeeCam_SetDigitizeOverscan}, 
    {"SetAdcGain", _wrap_ApogeeCam_SetAdcGain}, 
    {"GetAdcGain", _wrap_ApogeeCam_GetAdcGain}, 
    {"SetAdcOffset", _wrap_ApogeeCam_SetAdcOffset}, 
    {"GetAdcOffset", _wrap_ApogeeCam_GetAdcOffset}, 
    {"IsInitialized", _wrap_ApogeeCam_IsInitialized}, 
    {"IsConnected", _wrap_ApogeeCam_IsConnected}, 
    {"SetAdSimMode", _wrap_ApogeeCam_SetAdSimMode}, 
    {"IsAdSimModeOn", _wrap_ApogeeCam_IsAdSimModeOn}, 
    {"SetLedBrightness", _wrap_ApogeeCam_SetLedBrightness}, 
    {"GetLedBrightness", _wrap_ApogeeCam_GetLedBrightness}, 
    {"GetDriverVersion", _wrap_ApogeeCam_GetDriverVersion}, 
    {"GetUsbFirmwareVersion", _wrap_ApogeeCam_GetUsbFirmwareVersion}, 
    {"GetSerialNumber", _wrap_ApogeeCam_GetSerialNumber}, 
    {"CloseConnection", _wrap_ApogeeCam_CloseConnection}, 
    {"OpenConnection", _wrap_ApogeeCam_OpenConnection}, 
    {"StartExposure", _wrap_ApogeeCam_StartExposure}, 
    {"GetStatus", _wrap_ApogeeCam_GetStatus}, 
    {"GetImagingStatus", _wrap_ApogeeCam_GetImagingStatus}, 
    {"GetImage", _wrap_ApogeeCam_GetImage}, 
    {"StopExposure", _wrap_ApogeeCam_StopExposure}, 
    {"GetAvailableMemory", _wrap_ApogeeCam_GetAvailableMemory}, 
    {"GetNumAds", _wrap_ApogeeCam_GetNumAds}, 
    {"GetNumAdChannels", _wrap_ApogeeCam_GetNumAdChannels}, 
    {"GetCoolerDrive", _wrap_ApogeeCam_GetCoolerDrive}, 
    {"SetFanMode", _wrap_ApogeeCam_SetFanMode}, 
    {"GetFanMode", _wrap_ApogeeCam_GetFanMode}, 
    {0,0}
};
static swig_attribute swig_ApogeeCam_attributes[] = {
    {0,0,0}
};
static swig_class *swig_ApogeeCam_bases[] = {0};
static const char * swig_ApogeeCam_base_names[] = {0};
static swig_class _wrap_class_ApogeeCam = { "ApogeeCam", &SWIGTYPE_p_ApogeeCam,0, swig_delete_ApogeeCam, swig_ApogeeCam_methods, swig_ApogeeCam_attributes, swig_ApogeeCam_bases,swig_ApogeeCam_base_names, &swig_module };
SWIGINTERN int
_wrap_delete_CamGen2Base(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CamGen2Base *arg1 = (CamGen2Base *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_CamGen2Base self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CamGen2Base, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CamGen2Base" "', argument " "1"" of type '" "CamGen2Base *""'"); 
  }
  arg1 = reinterpret_cast< CamGen2Base * >(argp1);
  {
    try {
      delete arg1;
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CamGen2Base_GetStatus(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CamGen2Base *arg1 = (CamGen2Base *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  CameraStatusRegs result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:CamGen2Base_GetStatus self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CamGen2Base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CamGen2Base_GetStatus" "', argument " "1"" of type '" "CamGen2Base *""'"); 
  }
  arg1 = reinterpret_cast< CamGen2Base * >(argp1);
  {
    try {
      result = (arg1)->GetStatus();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new CameraStatusRegs(static_cast< const CameraStatusRegs& >(result))), SWIGTYPE_p_CameraStatusRegs, SWIG_POINTER_OWN | 0 ));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CamGen2Base_GetImagingStatus(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CamGen2Base *arg1 = (CamGen2Base *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Apg::Status result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:CamGen2Base_GetImagingStatus self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CamGen2Base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CamGen2Base_GetImagingStatus" "', argument " "1"" of type '" "CamGen2Base *""'"); 
  }
  arg1 = reinterpret_cast< CamGen2Base * >(argp1);
  {
    try {
      result = (Apg::Status)(arg1)->GetImagingStatus();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CamGen2Base_GetImage(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CamGen2Base *arg1 = (CamGen2Base *) 0 ;
  std::vector< uint16_t > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< uint16_t > data2 ;
  int nx, ny;
  std::vector<uint16_t> pImageData;
  unsigned short *pccdData;
  
  {
    arg2 = &data2;
  }
  if (SWIG_GetArgs(interp, objc, objv,"o:CamGen2Base_GetImage self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CamGen2Base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CamGen2Base_GetImage" "', argument " "1"" of type '" "CamGen2Base *""'"); 
  }
  arg1 = reinterpret_cast< CamGen2Base * >(argp1);
  {
    try {
       nx = (arg1)->GetRoiNumCols();
       ny = (arg1)->GetRoiNumRows();
       pccdData = (unsigned short *)CCD_locate_buffer("tempobs", 2 , nx, ny, 1, 1 );
       (arg1)->GetImage(pImageData);
       copy(pImageData.begin(), pImageData.end(), pccdData);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CamGen2Base_StopExposure(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CamGen2Base *arg1 = (CamGen2Base *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:CamGen2Base_StopExposure self Digitize ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CamGen2Base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CamGen2Base_StopExposure" "', argument " "1"" of type '" "CamGen2Base *""'"); 
  }
  arg1 = reinterpret_cast< CamGen2Base * >(argp1);
  ecode2 = SWIG_AsVal_bool SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CamGen2Base_StopExposure" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->StopExposure(arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CamGen2Base_GetAvailableMemory(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CamGen2Base *arg1 = (CamGen2Base *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:CamGen2Base_GetAvailableMemory self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CamGen2Base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CamGen2Base_GetAvailableMemory" "', argument " "1"" of type '" "CamGen2Base *""'"); 
  }
  arg1 = reinterpret_cast< CamGen2Base * >(argp1);
  {
    try {
      result = (arg1)->GetAvailableMemory();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new uint32_t(static_cast< const uint32_t& >(result))), SWIGTYPE_p_uint32_t, SWIG_POINTER_OWN | 0 ));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CamGen2Base_GetNumAds(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CamGen2Base *arg1 = (CamGen2Base *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int32_t result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:CamGen2Base_GetNumAds self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CamGen2Base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CamGen2Base_GetNumAds" "', argument " "1"" of type '" "CamGen2Base *""'"); 
  }
  arg1 = reinterpret_cast< CamGen2Base * >(argp1);
  {
    try {
      result = (arg1)->GetNumAds();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new int32_t(static_cast< const int32_t& >(result))), SWIGTYPE_p_int32_t, SWIG_POINTER_OWN | 0 ));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CamGen2Base_GetCoolerDrive(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CamGen2Base *arg1 = (CamGen2Base *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:CamGen2Base_GetCoolerDrive self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CamGen2Base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CamGen2Base_GetCoolerDrive" "', argument " "1"" of type '" "CamGen2Base *""'"); 
  }
  arg1 = reinterpret_cast< CamGen2Base * >(argp1);
  {
    try {
      result = (double)(arg1)->GetCoolerDrive();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_double(static_cast< double >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CamGen2Base_SetFanMode__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CamGen2Base *arg1 = (CamGen2Base *) 0 ;
  Apg::FanMode arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:CamGen2Base_SetFanMode self mode PreCondCheck ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CamGen2Base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CamGen2Base_SetFanMode" "', argument " "1"" of type '" "CamGen2Base *""'"); 
  }
  arg1 = reinterpret_cast< CamGen2Base * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CamGen2Base_SetFanMode" "', argument " "2"" of type '" "Apg::FanMode""'");
  } 
  arg2 = static_cast< Apg::FanMode >(val2);
  ecode3 = SWIG_AsVal_bool SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CamGen2Base_SetFanMode" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->SetFanMode(arg2,arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CamGen2Base_SetFanMode__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CamGen2Base *arg1 = (CamGen2Base *) 0 ;
  Apg::FanMode arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:CamGen2Base_SetFanMode self mode ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CamGen2Base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CamGen2Base_SetFanMode" "', argument " "1"" of type '" "CamGen2Base *""'"); 
  }
  arg1 = reinterpret_cast< CamGen2Base * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CamGen2Base_SetFanMode" "', argument " "2"" of type '" "Apg::FanMode""'");
  } 
  arg2 = static_cast< Apg::FanMode >(val2);
  {
    try {
      (arg1)->SetFanMode(arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CamGen2Base_SetFanMode(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CamGen2Base, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_CamGen2Base_SetFanMode__SWIG_1(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CamGen2Base, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool SWIG_TCL_CALL_ARGS_2(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_CamGen2Base_SetFanMode__SWIG_0(clientData, interp, objc, argv - 1);
        }
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'CamGen2Base_SetFanMode'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CamGen2Base_GetFanMode(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CamGen2Base *arg1 = (CamGen2Base *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Apg::FanMode result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:CamGen2Base_GetFanMode self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CamGen2Base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CamGen2Base_GetFanMode" "', argument " "1"" of type '" "CamGen2Base *""'"); 
  }
  arg1 = reinterpret_cast< CamGen2Base * >(argp1);
  {
    try {
      result = (Apg::FanMode)(arg1)->GetFanMode();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_CamGen2Base(void *obj) {
CamGen2Base *arg1 = (CamGen2Base *) obj;
delete arg1;
}
static swig_method swig_CamGen2Base_methods[] = {
    {"GetStatus", _wrap_CamGen2Base_GetStatus}, 
    {"GetImagingStatus", _wrap_CamGen2Base_GetImagingStatus}, 
    {"GetImage", _wrap_CamGen2Base_GetImage}, 
    {"StopExposure", _wrap_CamGen2Base_StopExposure}, 
    {"GetAvailableMemory", _wrap_CamGen2Base_GetAvailableMemory}, 
    {"GetNumAds", _wrap_CamGen2Base_GetNumAds}, 
    {"GetCoolerDrive", _wrap_CamGen2Base_GetCoolerDrive}, 
    {"SetFanMode", _wrap_CamGen2Base_SetFanMode}, 
    {"GetFanMode", _wrap_CamGen2Base_GetFanMode}, 
    {0,0}
};
static swig_attribute swig_CamGen2Base_attributes[] = {
    {0,0,0}
};
static swig_class *swig_CamGen2Base_bases[] = {0,0};
static const char * swig_CamGen2Base_base_names[] = {"ApogeeCam *",0};
static swig_class _wrap_class_CamGen2Base = { "CamGen2Base", &SWIGTYPE_p_CamGen2Base,0, swig_delete_CamGen2Base, swig_CamGen2Base_methods, swig_CamGen2Base_attributes, swig_CamGen2Base_bases,swig_CamGen2Base_base_names, &swig_module };
SWIGINTERN int
_wrap_new_Alta(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Alta *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_Alta ") == TCL_ERROR) SWIG_fail;
  {
    try {
      result = (Alta *)new Alta();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_Alta,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_Alta(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Alta *arg1 = (Alta *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_Alta self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Alta, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Alta" "', argument " "1"" of type '" "Alta *""'"); 
  }
  arg1 = reinterpret_cast< Alta * >(argp1);
  {
    try {
      delete arg1;
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Alta_OpenConnection(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Alta *arg1 = (Alta *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  uint16_t arg4 ;
  uint16_t arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooooo:Alta_OpenConnection self ioType DeviceAddr FirmwareRev Id ",(void *)0,(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Alta, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Alta_OpenConnection" "', argument " "1"" of type '" "Alta *""'"); 
  }
  arg1 = reinterpret_cast< Alta * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Alta_OpenConnection" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Alta_OpenConnection" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[3], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Alta_OpenConnection" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Alta_OpenConnection" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  ecode4 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Alta_OpenConnection" "', argument " "4"" of type '" "uint16_t""'");
  } 
  arg4 = static_cast< uint16_t >(val4);
  ecode5 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[5], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Alta_OpenConnection" "', argument " "5"" of type '" "uint16_t""'");
  } 
  arg5 = static_cast< uint16_t >(val5);
  {
    try {
      (arg1)->OpenConnection((std::string const &)*arg2,(std::string const &)*arg3,arg4,arg5);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Alta_StartExposure(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Alta *arg1 = (Alta *) 0 ;
  double arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:Alta_StartExposure self Duration IsLight ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Alta, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Alta_StartExposure" "', argument " "1"" of type '" "Alta *""'"); 
  }
  arg1 = reinterpret_cast< Alta * >(argp1);
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Alta_StartExposure" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_bool SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Alta_StartExposure" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->StartExposure(arg2,arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Alta_GetStatus(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Alta *arg1 = (Alta *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  CameraStatusRegs result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Alta_GetStatus self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Alta, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Alta_GetStatus" "', argument " "1"" of type '" "Alta *""'"); 
  }
  arg1 = reinterpret_cast< Alta * >(argp1);
  {
    try {
      result = (arg1)->GetStatus();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new CameraStatusRegs(static_cast< const CameraStatusRegs& >(result))), SWIGTYPE_p_CameraStatusRegs, SWIG_POINTER_OWN | 0 ));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Alta_GetImagingStatus(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Alta *arg1 = (Alta *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Apg::Status result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Alta_GetImagingStatus self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Alta, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Alta_GetImagingStatus" "', argument " "1"" of type '" "Alta *""'"); 
  }
  arg1 = reinterpret_cast< Alta * >(argp1);
  {
    try {
      result = (Apg::Status)(arg1)->GetImagingStatus();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Alta_GetImage(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Alta *arg1 = (Alta *) 0 ;
  std::vector< uint16_t > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< uint16_t > data2 ;
  int nx, ny;
  std::vector<uint16_t> pImageData;
  unsigned short *pccdData;


  {
    arg2 = &data2;
  }
  if (SWIG_GetArgs(interp, objc, objv,"o:Alta_GetImage self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Alta, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Alta_GetImage" "', argument " "1"" of type '" "Alta *""'"); 
  }
  arg1 = reinterpret_cast< Alta * >(argp1);
  {
    try {
       nx = (arg1)->GetRoiNumCols();
       ny = (arg1)->GetRoiNumRows();
       pccdData = (unsigned short *)CCD_locate_buffer("tempobs", 2 , nx, ny, 1, 1 );
       (arg1)->GetImage(pImageData);
       copy(pImageData.begin(), pImageData.end(), pccdData);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Alta_StopExposure(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Alta *arg1 = (Alta *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Alta_StopExposure self Digitize ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Alta, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Alta_StopExposure" "', argument " "1"" of type '" "Alta *""'"); 
  }
  arg1 = reinterpret_cast< Alta * >(argp1);
  ecode2 = SWIG_AsVal_bool SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Alta_StopExposure" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->StopExposure(arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Alta_GetAvailableMemory(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Alta *arg1 = (Alta *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Alta_GetAvailableMemory self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Alta, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Alta_GetAvailableMemory" "', argument " "1"" of type '" "Alta *""'"); 
  }
  arg1 = reinterpret_cast< Alta * >(argp1);
  {
    try {
      result = (arg1)->GetAvailableMemory();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new uint32_t(static_cast< const uint32_t& >(result))), SWIGTYPE_p_uint32_t, SWIG_POINTER_OWN | 0 ));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Alta_SetCcdAdc12BitGain(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Alta *arg1 = (Alta *) 0 ;
  uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Alta_SetCcdAdc12BitGain self gain ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Alta, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Alta_SetCcdAdc12BitGain" "', argument " "1"" of type '" "Alta *""'"); 
  }
  arg1 = reinterpret_cast< Alta * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Alta_SetCcdAdc12BitGain" "', argument " "2"" of type '" "uint16_t""'");
  } 
  arg2 = static_cast< uint16_t >(val2);
  {
    try {
      (arg1)->SetCcdAdc12BitGain(arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Alta_SetCcdAdc12BitOffset(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Alta *arg1 = (Alta *) 0 ;
  uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Alta_SetCcdAdc12BitOffset self offset ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Alta, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Alta_SetCcdAdc12BitOffset" "', argument " "1"" of type '" "Alta *""'"); 
  }
  arg1 = reinterpret_cast< Alta * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Alta_SetCcdAdc12BitOffset" "', argument " "2"" of type '" "uint16_t""'");
  } 
  arg2 = static_cast< uint16_t >(val2);
  {
    try {
      (arg1)->SetCcdAdc12BitOffset(arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Alta_GetCcdAdc12BitGain(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Alta *arg1 = (Alta *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint16_t result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Alta_GetCcdAdc12BitGain self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Alta, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Alta_GetCcdAdc12BitGain" "', argument " "1"" of type '" "Alta *""'"); 
  }
  arg1 = reinterpret_cast< Alta * >(argp1);
  {
    try {
      result = (uint16_t)(arg1)->GetCcdAdc12BitGain();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Alta_GetCcdAdc12BitOffset(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Alta *arg1 = (Alta *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint16_t result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Alta_GetCcdAdc12BitOffset self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Alta, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Alta_GetCcdAdc12BitOffset" "', argument " "1"" of type '" "Alta *""'"); 
  }
  arg1 = reinterpret_cast< Alta * >(argp1);
  {
    try {
      result = (uint16_t)(arg1)->GetCcdAdc12BitOffset();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Alta_GetCcdAdc16BitGain(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Alta *arg1 = (Alta *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Alta_GetCcdAdc16BitGain self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Alta, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Alta_GetCcdAdc16BitGain" "', argument " "1"" of type '" "Alta *""'"); 
  }
  arg1 = reinterpret_cast< Alta * >(argp1);
  {
    try {
      result = (double)(arg1)->GetCcdAdc16BitGain();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_double(static_cast< double >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Alta_GetNumAds(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Alta *arg1 = (Alta *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int32_t result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Alta_GetNumAds self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Alta, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Alta_GetNumAds" "', argument " "1"" of type '" "Alta *""'"); 
  }
  arg1 = reinterpret_cast< Alta * >(argp1);
  {
    try {
      result = (arg1)->GetNumAds();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new int32_t(static_cast< const int32_t& >(result))), SWIGTYPE_p_int32_t, SWIG_POINTER_OWN | 0 ));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Alta_GetNumAdChannels(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Alta *arg1 = (Alta *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int32_t result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Alta_GetNumAdChannels self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Alta, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Alta_GetNumAdChannels" "', argument " "1"" of type '" "Alta *""'"); 
  }
  arg1 = reinterpret_cast< Alta * >(argp1);
  {
    try {
      result = (arg1)->GetNumAdChannels();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new int32_t(static_cast< const int32_t& >(result))), SWIGTYPE_p_int32_t, SWIG_POINTER_OWN | 0 ));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Alta_GetCoolerDrive(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Alta *arg1 = (Alta *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Alta_GetCoolerDrive self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Alta, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Alta_GetCoolerDrive" "', argument " "1"" of type '" "Alta *""'"); 
  }
  arg1 = reinterpret_cast< Alta * >(argp1);
  {
    try {
      result = (double)(arg1)->GetCoolerDrive();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_double(static_cast< double >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Alta_SetFanMode__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Alta *arg1 = (Alta *) 0 ;
  Apg::FanMode arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:Alta_SetFanMode self mode PreCondCheck ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Alta, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Alta_SetFanMode" "', argument " "1"" of type '" "Alta *""'"); 
  }
  arg1 = reinterpret_cast< Alta * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Alta_SetFanMode" "', argument " "2"" of type '" "Apg::FanMode""'");
  } 
  arg2 = static_cast< Apg::FanMode >(val2);
  ecode3 = SWIG_AsVal_bool SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Alta_SetFanMode" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->SetFanMode(arg2,arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Alta_SetFanMode__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Alta *arg1 = (Alta *) 0 ;
  Apg::FanMode arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Alta_SetFanMode self mode ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Alta, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Alta_SetFanMode" "', argument " "1"" of type '" "Alta *""'"); 
  }
  arg1 = reinterpret_cast< Alta * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Alta_SetFanMode" "', argument " "2"" of type '" "Apg::FanMode""'");
  } 
  arg2 = static_cast< Apg::FanMode >(val2);
  {
    try {
      (arg1)->SetFanMode(arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Alta_SetFanMode(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Alta, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Alta_SetFanMode__SWIG_1(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Alta, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool SWIG_TCL_CALL_ARGS_2(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Alta_SetFanMode__SWIG_0(clientData, interp, objc, argv - 1);
        }
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'Alta_SetFanMode'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Alta_GetFanMode(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Alta *arg1 = (Alta *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Apg::FanMode result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Alta_GetFanMode self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Alta, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Alta_GetFanMode" "', argument " "1"" of type '" "Alta *""'"); 
  }
  arg1 = reinterpret_cast< Alta * >(argp1);
  {
    try {
      result = (Apg::FanMode)(arg1)->GetFanMode();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_Alta(void *obj) {
Alta *arg1 = (Alta *) obj;
delete arg1;
}
static swig_method swig_Alta_methods[] = {
    {"OpenConnection", _wrap_Alta_OpenConnection}, 
    {"StartExposure", _wrap_Alta_StartExposure}, 
    {"GetStatus", _wrap_Alta_GetStatus}, 
    {"GetImagingStatus", _wrap_Alta_GetImagingStatus}, 
    {"GetImage", _wrap_Alta_GetImage}, 
    {"StopExposure", _wrap_Alta_StopExposure}, 
    {"GetAvailableMemory", _wrap_Alta_GetAvailableMemory}, 
    {"SetCcdAdc12BitGain", _wrap_Alta_SetCcdAdc12BitGain}, 
    {"SetCcdAdc12BitOffset", _wrap_Alta_SetCcdAdc12BitOffset}, 
    {"GetCcdAdc12BitGain", _wrap_Alta_GetCcdAdc12BitGain}, 
    {"GetCcdAdc12BitOffset", _wrap_Alta_GetCcdAdc12BitOffset}, 
    {"GetCcdAdc16BitGain", _wrap_Alta_GetCcdAdc16BitGain}, 
    {"GetNumAds", _wrap_Alta_GetNumAds}, 
    {"GetNumAdChannels", _wrap_Alta_GetNumAdChannels}, 
    {"GetCoolerDrive", _wrap_Alta_GetCoolerDrive}, 
    {"SetFanMode", _wrap_Alta_SetFanMode}, 
    {"GetFanMode", _wrap_Alta_GetFanMode}, 
    {0,0}
};
static swig_attribute swig_Alta_attributes[] = {
    {0,0,0}
};
static swig_class *swig_Alta_bases[] = {0,0};
static const char * swig_Alta_base_names[] = {"ApogeeCam *",0};
static swig_class _wrap_class_Alta = { "Alta", &SWIGTYPE_p_Alta,_wrap_new_Alta, swig_delete_Alta, swig_Alta_methods, swig_Alta_attributes, swig_Alta_bases,swig_Alta_base_names, &swig_module };
SWIGINTERN int
_wrap_new_ApogeeFilterWheel(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeFilterWheel *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_ApogeeFilterWheel ") == TCL_ERROR) SWIG_fail;
  {
    try {
      result = (ApogeeFilterWheel *)new ApogeeFilterWheel();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_ApogeeFilterWheel,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_ApogeeFilterWheel(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeFilterWheel *arg1 = (ApogeeFilterWheel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_ApogeeFilterWheel self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeFilterWheel, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ApogeeFilterWheel" "', argument " "1"" of type '" "ApogeeFilterWheel *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeFilterWheel * >(argp1);
  {
    try {
      delete arg1;
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeFilterWheel_Init(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeFilterWheel *arg1 = (ApogeeFilterWheel *) 0 ;
  ApogeeFilterWheel::Type arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:ApogeeFilterWheel_Init self type DeviceAddr ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeFilterWheel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeFilterWheel_Init" "', argument " "1"" of type '" "ApogeeFilterWheel *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeFilterWheel * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ApogeeFilterWheel_Init" "', argument " "2"" of type '" "ApogeeFilterWheel::Type""'");
  } 
  arg2 = static_cast< ApogeeFilterWheel::Type >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[3], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ApogeeFilterWheel_Init" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ApogeeFilterWheel_Init" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->Init(arg2,(std::string const &)*arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  
  if (SWIG_IsNewObj(res3)) delete arg3;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeFilterWheel_Close(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeFilterWheel *arg1 = (ApogeeFilterWheel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ApogeeFilterWheel_Close self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeFilterWheel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeFilterWheel_Close" "', argument " "1"" of type '" "ApogeeFilterWheel *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeFilterWheel * >(argp1);
  {
    try {
      (arg1)->Close();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeFilterWheel_GetVendorId(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeFilterWheel *arg1 = (ApogeeFilterWheel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint16_t result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ApogeeFilterWheel_GetVendorId self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeFilterWheel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeFilterWheel_GetVendorId" "', argument " "1"" of type '" "ApogeeFilterWheel *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeFilterWheel * >(argp1);
  {
    try {
      result = (uint16_t)(arg1)->GetVendorId();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeFilterWheel_GetProductId(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeFilterWheel *arg1 = (ApogeeFilterWheel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint16_t result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ApogeeFilterWheel_GetProductId self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeFilterWheel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeFilterWheel_GetProductId" "', argument " "1"" of type '" "ApogeeFilterWheel *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeFilterWheel * >(argp1);
  {
    try {
      result = (uint16_t)(arg1)->GetProductId();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeFilterWheel_GetDeviceId(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeFilterWheel *arg1 = (ApogeeFilterWheel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint16_t result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ApogeeFilterWheel_GetDeviceId self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeFilterWheel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeFilterWheel_GetDeviceId" "', argument " "1"" of type '" "ApogeeFilterWheel *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeFilterWheel * >(argp1);
  {
    try {
      result = (uint16_t)(arg1)->GetDeviceId();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeFilterWheel_GetUsbFirmwareRev(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeFilterWheel *arg1 = (ApogeeFilterWheel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ApogeeFilterWheel_GetUsbFirmwareRev self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeFilterWheel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeFilterWheel_GetUsbFirmwareRev" "', argument " "1"" of type '" "ApogeeFilterWheel *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeFilterWheel * >(argp1);
  {
    try {
      result = (arg1)->GetUsbFirmwareRev();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeFilterWheel_GetType(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeFilterWheel *arg1 = (ApogeeFilterWheel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ApogeeFilterWheel::Type result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ApogeeFilterWheel_GetType self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeFilterWheel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeFilterWheel_GetType" "', argument " "1"" of type '" "ApogeeFilterWheel *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeFilterWheel * >(argp1);
  {
    try {
      result = (ApogeeFilterWheel::Type)(arg1)->GetType();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeFilterWheel_GetName(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeFilterWheel *arg1 = (ApogeeFilterWheel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ApogeeFilterWheel_GetName self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeFilterWheel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeFilterWheel_GetName" "', argument " "1"" of type '" "ApogeeFilterWheel *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeFilterWheel * >(argp1);
  {
    try {
      result = (arg1)->GetName();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeFilterWheel_GetStatus(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeFilterWheel *arg1 = (ApogeeFilterWheel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ApogeeFilterWheel::Status result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ApogeeFilterWheel_GetStatus self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeFilterWheel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeFilterWheel_GetStatus" "', argument " "1"" of type '" "ApogeeFilterWheel *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeFilterWheel * >(argp1);
  {
    try {
      result = (ApogeeFilterWheel::Status)(arg1)->GetStatus();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeFilterWheel_GetMaxPositions(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeFilterWheel *arg1 = (ApogeeFilterWheel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint16_t result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ApogeeFilterWheel_GetMaxPositions self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeFilterWheel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeFilterWheel_GetMaxPositions" "', argument " "1"" of type '" "ApogeeFilterWheel *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeFilterWheel * >(argp1);
  {
    try {
      result = (uint16_t)(arg1)->GetMaxPositions();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeFilterWheel_SetPosition(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeFilterWheel *arg1 = (ApogeeFilterWheel *) 0 ;
  uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:ApogeeFilterWheel_SetPosition self Position ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeFilterWheel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeFilterWheel_SetPosition" "', argument " "1"" of type '" "ApogeeFilterWheel *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeFilterWheel * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ApogeeFilterWheel_SetPosition" "', argument " "2"" of type '" "uint16_t""'");
  } 
  arg2 = static_cast< uint16_t >(val2);
  {
    try {
      (arg1)->SetPosition(arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ApogeeFilterWheel_GetPosition(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ApogeeFilterWheel *arg1 = (ApogeeFilterWheel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint16_t result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ApogeeFilterWheel_GetPosition self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ApogeeFilterWheel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApogeeFilterWheel_GetPosition" "', argument " "1"" of type '" "ApogeeFilterWheel *""'"); 
  }
  arg1 = reinterpret_cast< ApogeeFilterWheel * >(argp1);
  {
    try {
      result = (uint16_t)(arg1)->GetPosition();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_ApogeeFilterWheel(void *obj) {
ApogeeFilterWheel *arg1 = (ApogeeFilterWheel *) obj;
delete arg1;
}
static swig_method swig_ApogeeFilterWheel_methods[] = {
    {"Init", _wrap_ApogeeFilterWheel_Init}, 
    {"Close", _wrap_ApogeeFilterWheel_Close}, 
    {"GetVendorId", _wrap_ApogeeFilterWheel_GetVendorId}, 
    {"GetProductId", _wrap_ApogeeFilterWheel_GetProductId}, 
    {"GetDeviceId", _wrap_ApogeeFilterWheel_GetDeviceId}, 
    {"GetUsbFirmwareRev", _wrap_ApogeeFilterWheel_GetUsbFirmwareRev}, 
    {"GetType", _wrap_ApogeeFilterWheel_GetType}, 
    {"GetName", _wrap_ApogeeFilterWheel_GetName}, 
    {"GetStatus", _wrap_ApogeeFilterWheel_GetStatus}, 
    {"GetMaxPositions", _wrap_ApogeeFilterWheel_GetMaxPositions}, 
    {"SetPosition", _wrap_ApogeeFilterWheel_SetPosition}, 
    {"GetPosition", _wrap_ApogeeFilterWheel_GetPosition}, 
    {0,0}
};
static swig_attribute swig_ApogeeFilterWheel_attributes[] = {
    {0,0,0}
};
static swig_class *swig_ApogeeFilterWheel_bases[] = {0};
static const char * swig_ApogeeFilterWheel_base_names[] = {0};
static swig_class _wrap_class_ApogeeFilterWheel = { "ApogeeFilterWheel", &SWIGTYPE_p_ApogeeFilterWheel,_wrap_new_ApogeeFilterWheel, swig_delete_ApogeeFilterWheel, swig_ApogeeFilterWheel_methods, swig_ApogeeFilterWheel_attributes, swig_ApogeeFilterWheel_bases,swig_ApogeeFilterWheel_base_names, &swig_module };
SWIGINTERN int
_wrap_new_Ascent(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Ascent *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_Ascent ") == TCL_ERROR) SWIG_fail;
  {
    try {
      result = (Ascent *)new Ascent();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_Ascent,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Ascent_OpenConnection(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Ascent *arg1 = (Ascent *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  uint16_t arg4 ;
  uint16_t arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooooo:Ascent_OpenConnection self ioType DeviceAddr FirmwareRev Id ",(void *)0,(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Ascent, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ascent_OpenConnection" "', argument " "1"" of type '" "Ascent *""'"); 
  }
  arg1 = reinterpret_cast< Ascent * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Ascent_OpenConnection" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Ascent_OpenConnection" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[3], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Ascent_OpenConnection" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Ascent_OpenConnection" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  ecode4 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Ascent_OpenConnection" "', argument " "4"" of type '" "uint16_t""'");
  } 
  arg4 = static_cast< uint16_t >(val4);
  ecode5 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[5], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Ascent_OpenConnection" "', argument " "5"" of type '" "uint16_t""'");
  } 
  arg5 = static_cast< uint16_t >(val5);
  {
    try {
      (arg1)->OpenConnection((std::string const &)*arg2,(std::string const &)*arg3,arg4,arg5);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_Ascent(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Ascent *arg1 = (Ascent *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_Ascent self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Ascent, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Ascent" "', argument " "1"" of type '" "Ascent *""'"); 
  }
  arg1 = reinterpret_cast< Ascent * >(argp1);
  {
    try {
      delete arg1;
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Ascent_FilterWheelOpen(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Ascent *arg1 = (Ascent *) 0 ;
  Ascent::FilterWheelType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Ascent_FilterWheelOpen self type ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Ascent, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ascent_FilterWheelOpen" "', argument " "1"" of type '" "Ascent *""'"); 
  }
  arg1 = reinterpret_cast< Ascent * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Ascent_FilterWheelOpen" "', argument " "2"" of type '" "Ascent::FilterWheelType""'");
  } 
  arg2 = static_cast< Ascent::FilterWheelType >(val2);
  {
    try {
      (arg1)->FilterWheelOpen(arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Ascent_FilterWheelClose(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Ascent *arg1 = (Ascent *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Ascent_FilterWheelClose self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Ascent, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ascent_FilterWheelClose" "', argument " "1"" of type '" "Ascent *""'"); 
  }
  arg1 = reinterpret_cast< Ascent * >(argp1);
  {
    try {
      (arg1)->FilterWheelClose();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Ascent_SetFilterWheelPos(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Ascent *arg1 = (Ascent *) 0 ;
  uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Ascent_SetFilterWheelPos self pos ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Ascent, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ascent_SetFilterWheelPos" "', argument " "1"" of type '" "Ascent *""'"); 
  }
  arg1 = reinterpret_cast< Ascent * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Ascent_SetFilterWheelPos" "', argument " "2"" of type '" "uint16_t""'");
  } 
  arg2 = static_cast< uint16_t >(val2);
  {
    try {
      (arg1)->SetFilterWheelPos(arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Ascent_GetFilterWheelPos(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Ascent *arg1 = (Ascent *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint16_t result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Ascent_GetFilterWheelPos self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Ascent, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ascent_GetFilterWheelPos" "', argument " "1"" of type '" "Ascent *""'"); 
  }
  arg1 = reinterpret_cast< Ascent * >(argp1);
  {
    try {
      result = (uint16_t)(arg1)->GetFilterWheelPos();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Ascent_GetFilterWheelStatus(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Ascent *arg1 = (Ascent *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ApogeeFilterWheel::Status result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Ascent_GetFilterWheelStatus self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Ascent, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ascent_GetFilterWheelStatus" "', argument " "1"" of type '" "Ascent *""'"); 
  }
  arg1 = reinterpret_cast< Ascent * >(argp1);
  {
    try {
      result = (ApogeeFilterWheel::Status)(arg1)->GetFilterWheelStatus();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Ascent_GetFilterWheelType(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Ascent *arg1 = (Ascent *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Ascent::FilterWheelType result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Ascent_GetFilterWheelType self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Ascent, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ascent_GetFilterWheelType" "', argument " "1"" of type '" "Ascent *""'"); 
  }
  arg1 = reinterpret_cast< Ascent * >(argp1);
  {
    try {
      result = (Ascent::FilterWheelType)(arg1)->GetFilterWheelType();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Ascent_GetFilterWheelName(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Ascent *arg1 = (Ascent *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Ascent_GetFilterWheelName self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Ascent, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ascent_GetFilterWheelName" "', argument " "1"" of type '" "Ascent *""'"); 
  }
  arg1 = reinterpret_cast< Ascent * >(argp1);
  {
    try {
      result = (arg1)->GetFilterWheelName();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Ascent_GetFilterWheelMaxPositions(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Ascent *arg1 = (Ascent *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint16_t result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Ascent_GetFilterWheelMaxPositions self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Ascent, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ascent_GetFilterWheelMaxPositions" "', argument " "1"" of type '" "Ascent *""'"); 
  }
  arg1 = reinterpret_cast< Ascent * >(argp1);
  {
    try {
      result = (uint16_t)(arg1)->GetFilterWheelMaxPositions();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Ascent_StartExposure(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Ascent *arg1 = (Ascent *) 0 ;
  double arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:Ascent_StartExposure self Duration IsLight ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Ascent, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ascent_StartExposure" "', argument " "1"" of type '" "Ascent *""'"); 
  }
  arg1 = reinterpret_cast< Ascent * >(argp1);
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Ascent_StartExposure" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_bool SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Ascent_StartExposure" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->StartExposure(arg2,arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Ascent_GetNumAdChannels(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Ascent *arg1 = (Ascent *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int32_t result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Ascent_GetNumAdChannels self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Ascent, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ascent_GetNumAdChannels" "', argument " "1"" of type '" "Ascent *""'"); 
  }
  arg1 = reinterpret_cast< Ascent * >(argp1);
  {
    try {
      result = (arg1)->GetNumAdChannels();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new int32_t(static_cast< const int32_t& >(result))), SWIGTYPE_p_int32_t, SWIG_POINTER_OWN | 0 ));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_Ascent(void *obj) {
Ascent *arg1 = (Ascent *) obj;
delete arg1;
}
static swig_method swig_Ascent_methods[] = {
    {"OpenConnection", _wrap_Ascent_OpenConnection}, 
    {"FilterWheelOpen", _wrap_Ascent_FilterWheelOpen}, 
    {"FilterWheelClose", _wrap_Ascent_FilterWheelClose}, 
    {"SetFilterWheelPos", _wrap_Ascent_SetFilterWheelPos}, 
    {"GetFilterWheelPos", _wrap_Ascent_GetFilterWheelPos}, 
    {"GetFilterWheelStatus", _wrap_Ascent_GetFilterWheelStatus}, 
    {"GetFilterWheelType", _wrap_Ascent_GetFilterWheelType}, 
    {"GetFilterWheelName", _wrap_Ascent_GetFilterWheelName}, 
    {"GetFilterWheelMaxPositions", _wrap_Ascent_GetFilterWheelMaxPositions}, 
    {"StartExposure", _wrap_Ascent_StartExposure}, 
    {"GetNumAdChannels", _wrap_Ascent_GetNumAdChannels}, 
    {0,0}
};
static swig_attribute swig_Ascent_attributes[] = {
    {0,0,0}
};
static swig_class *swig_Ascent_bases[] = {0,0};
static const char * swig_Ascent_base_names[] = {"CamGen2Base *",0};
static swig_class _wrap_class_Ascent = { "Ascent", &SWIGTYPE_p_Ascent,_wrap_new_Ascent, swig_delete_Ascent, swig_Ascent_methods, swig_Ascent_attributes, swig_Ascent_bases,swig_Ascent_base_names, &swig_module };
SWIGINTERN int
_wrap_StrDb_FactorySn_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:StrDb_FactorySn_set self FactorySn ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CamInfo__StrDb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrDb_FactorySn_set" "', argument " "1"" of type '" "CamInfo::StrDb *""'"); 
  }
  arg1 = reinterpret_cast< CamInfo::StrDb * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StrDb_FactorySn_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StrDb_FactorySn_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->FactorySn = *arg2;
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StrDb_FactorySn_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:StrDb_FactorySn_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CamInfo__StrDb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrDb_FactorySn_get" "', argument " "1"" of type '" "CamInfo::StrDb *""'"); 
  }
  arg1 = reinterpret_cast< CamInfo::StrDb * >(argp1);
  result = (std::string *) & ((arg1)->FactorySn);
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StrDb_CustomerSn_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:StrDb_CustomerSn_set self CustomerSn ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CamInfo__StrDb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrDb_CustomerSn_set" "', argument " "1"" of type '" "CamInfo::StrDb *""'"); 
  }
  arg1 = reinterpret_cast< CamInfo::StrDb * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StrDb_CustomerSn_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StrDb_CustomerSn_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->CustomerSn = *arg2;
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StrDb_CustomerSn_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:StrDb_CustomerSn_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CamInfo__StrDb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrDb_CustomerSn_get" "', argument " "1"" of type '" "CamInfo::StrDb *""'"); 
  }
  arg1 = reinterpret_cast< CamInfo::StrDb * >(argp1);
  result = (std::string *) & ((arg1)->CustomerSn);
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StrDb_Id_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:StrDb_Id_set self Id ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CamInfo__StrDb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrDb_Id_set" "', argument " "1"" of type '" "CamInfo::StrDb *""'"); 
  }
  arg1 = reinterpret_cast< CamInfo::StrDb * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StrDb_Id_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StrDb_Id_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->Id = *arg2;
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StrDb_Id_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:StrDb_Id_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CamInfo__StrDb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrDb_Id_get" "', argument " "1"" of type '" "CamInfo::StrDb *""'"); 
  }
  arg1 = reinterpret_cast< CamInfo::StrDb * >(argp1);
  result = (std::string *) & ((arg1)->Id);
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StrDb_Platform_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:StrDb_Platform_set self Platform ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CamInfo__StrDb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrDb_Platform_set" "', argument " "1"" of type '" "CamInfo::StrDb *""'"); 
  }
  arg1 = reinterpret_cast< CamInfo::StrDb * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StrDb_Platform_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StrDb_Platform_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->Platform = *arg2;
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StrDb_Platform_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:StrDb_Platform_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CamInfo__StrDb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrDb_Platform_get" "', argument " "1"" of type '" "CamInfo::StrDb *""'"); 
  }
  arg1 = reinterpret_cast< CamInfo::StrDb * >(argp1);
  result = (std::string *) & ((arg1)->Platform);
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StrDb_PartNum_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:StrDb_PartNum_set self PartNum ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CamInfo__StrDb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrDb_PartNum_set" "', argument " "1"" of type '" "CamInfo::StrDb *""'"); 
  }
  arg1 = reinterpret_cast< CamInfo::StrDb * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StrDb_PartNum_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StrDb_PartNum_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->PartNum = *arg2;
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StrDb_PartNum_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:StrDb_PartNum_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CamInfo__StrDb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrDb_PartNum_get" "', argument " "1"" of type '" "CamInfo::StrDb *""'"); 
  }
  arg1 = reinterpret_cast< CamInfo::StrDb * >(argp1);
  result = (std::string *) & ((arg1)->PartNum);
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StrDb_Ccd_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:StrDb_Ccd_set self Ccd ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CamInfo__StrDb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrDb_Ccd_set" "', argument " "1"" of type '" "CamInfo::StrDb *""'"); 
  }
  arg1 = reinterpret_cast< CamInfo::StrDb * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StrDb_Ccd_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StrDb_Ccd_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->Ccd = *arg2;
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StrDb_Ccd_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:StrDb_Ccd_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CamInfo__StrDb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrDb_Ccd_get" "', argument " "1"" of type '" "CamInfo::StrDb *""'"); 
  }
  arg1 = reinterpret_cast< CamInfo::StrDb * >(argp1);
  result = (std::string *) & ((arg1)->Ccd);
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StrDb_CcdSn_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:StrDb_CcdSn_set self CcdSn ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CamInfo__StrDb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrDb_CcdSn_set" "', argument " "1"" of type '" "CamInfo::StrDb *""'"); 
  }
  arg1 = reinterpret_cast< CamInfo::StrDb * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StrDb_CcdSn_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StrDb_CcdSn_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->CcdSn = *arg2;
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StrDb_CcdSn_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:StrDb_CcdSn_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CamInfo__StrDb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrDb_CcdSn_get" "', argument " "1"" of type '" "CamInfo::StrDb *""'"); 
  }
  arg1 = reinterpret_cast< CamInfo::StrDb * >(argp1);
  result = (std::string *) & ((arg1)->CcdSn);
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StrDb_CcdGrade_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:StrDb_CcdGrade_set self CcdGrade ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CamInfo__StrDb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrDb_CcdGrade_set" "', argument " "1"" of type '" "CamInfo::StrDb *""'"); 
  }
  arg1 = reinterpret_cast< CamInfo::StrDb * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StrDb_CcdGrade_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StrDb_CcdGrade_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->CcdGrade = *arg2;
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StrDb_CcdGrade_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:StrDb_CcdGrade_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CamInfo__StrDb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrDb_CcdGrade_get" "', argument " "1"" of type '" "CamInfo::StrDb *""'"); 
  }
  arg1 = reinterpret_cast< CamInfo::StrDb * >(argp1);
  result = (std::string *) & ((arg1)->CcdGrade);
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StrDb_ProcBoardRev_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:StrDb_ProcBoardRev_set self ProcBoardRev ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CamInfo__StrDb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrDb_ProcBoardRev_set" "', argument " "1"" of type '" "CamInfo::StrDb *""'"); 
  }
  arg1 = reinterpret_cast< CamInfo::StrDb * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StrDb_ProcBoardRev_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StrDb_ProcBoardRev_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->ProcBoardRev = *arg2;
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StrDb_ProcBoardRev_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:StrDb_ProcBoardRev_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CamInfo__StrDb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrDb_ProcBoardRev_get" "', argument " "1"" of type '" "CamInfo::StrDb *""'"); 
  }
  arg1 = reinterpret_cast< CamInfo::StrDb * >(argp1);
  result = (std::string *) & ((arg1)->ProcBoardRev);
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StrDb_DriveBoardRev_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:StrDb_DriveBoardRev_set self DriveBoardRev ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CamInfo__StrDb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrDb_DriveBoardRev_set" "', argument " "1"" of type '" "CamInfo::StrDb *""'"); 
  }
  arg1 = reinterpret_cast< CamInfo::StrDb * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StrDb_DriveBoardRev_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StrDb_DriveBoardRev_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->DriveBoardRev = *arg2;
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StrDb_DriveBoardRev_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:StrDb_DriveBoardRev_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CamInfo__StrDb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrDb_DriveBoardRev_get" "', argument " "1"" of type '" "CamInfo::StrDb *""'"); 
  }
  arg1 = reinterpret_cast< CamInfo::StrDb * >(argp1);
  result = (std::string *) & ((arg1)->DriveBoardRev);
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StrDb_Shutter_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:StrDb_Shutter_set self Shutter ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CamInfo__StrDb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrDb_Shutter_set" "', argument " "1"" of type '" "CamInfo::StrDb *""'"); 
  }
  arg1 = reinterpret_cast< CamInfo::StrDb * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StrDb_Shutter_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StrDb_Shutter_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->Shutter = *arg2;
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StrDb_Shutter_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:StrDb_Shutter_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CamInfo__StrDb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrDb_Shutter_get" "', argument " "1"" of type '" "CamInfo::StrDb *""'"); 
  }
  arg1 = reinterpret_cast< CamInfo::StrDb * >(argp1);
  result = (std::string *) & ((arg1)->Shutter);
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StrDb_WindowType_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:StrDb_WindowType_set self WindowType ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CamInfo__StrDb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrDb_WindowType_set" "', argument " "1"" of type '" "CamInfo::StrDb *""'"); 
  }
  arg1 = reinterpret_cast< CamInfo::StrDb * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StrDb_WindowType_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StrDb_WindowType_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->WindowType = *arg2;
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StrDb_WindowType_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:StrDb_WindowType_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CamInfo__StrDb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrDb_WindowType_get" "', argument " "1"" of type '" "CamInfo::StrDb *""'"); 
  }
  arg1 = reinterpret_cast< CamInfo::StrDb * >(argp1);
  result = (std::string *) & ((arg1)->WindowType);
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StrDb_MechCfg_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:StrDb_MechCfg_set self MechCfg ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CamInfo__StrDb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrDb_MechCfg_set" "', argument " "1"" of type '" "CamInfo::StrDb *""'"); 
  }
  arg1 = reinterpret_cast< CamInfo::StrDb * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StrDb_MechCfg_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StrDb_MechCfg_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->MechCfg = *arg2;
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StrDb_MechCfg_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:StrDb_MechCfg_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CamInfo__StrDb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrDb_MechCfg_get" "', argument " "1"" of type '" "CamInfo::StrDb *""'"); 
  }
  arg1 = reinterpret_cast< CamInfo::StrDb * >(argp1);
  result = (std::string *) & ((arg1)->MechCfg);
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StrDb_MechRev_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:StrDb_MechRev_set self MechRev ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CamInfo__StrDb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrDb_MechRev_set" "', argument " "1"" of type '" "CamInfo::StrDb *""'"); 
  }
  arg1 = reinterpret_cast< CamInfo::StrDb * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StrDb_MechRev_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StrDb_MechRev_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->MechRev = *arg2;
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StrDb_MechRev_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:StrDb_MechRev_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CamInfo__StrDb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrDb_MechRev_get" "', argument " "1"" of type '" "CamInfo::StrDb *""'"); 
  }
  arg1 = reinterpret_cast< CamInfo::StrDb * >(argp1);
  result = (std::string *) & ((arg1)->MechRev);
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StrDb_CoolingType_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:StrDb_CoolingType_set self CoolingType ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CamInfo__StrDb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrDb_CoolingType_set" "', argument " "1"" of type '" "CamInfo::StrDb *""'"); 
  }
  arg1 = reinterpret_cast< CamInfo::StrDb * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StrDb_CoolingType_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StrDb_CoolingType_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->CoolingType = *arg2;
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StrDb_CoolingType_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:StrDb_CoolingType_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CamInfo__StrDb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrDb_CoolingType_get" "', argument " "1"" of type '" "CamInfo::StrDb *""'"); 
  }
  arg1 = reinterpret_cast< CamInfo::StrDb * >(argp1);
  result = (std::string *) & ((arg1)->CoolingType);
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StrDb_FinishFront_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:StrDb_FinishFront_set self FinishFront ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CamInfo__StrDb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrDb_FinishFront_set" "', argument " "1"" of type '" "CamInfo::StrDb *""'"); 
  }
  arg1 = reinterpret_cast< CamInfo::StrDb * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StrDb_FinishFront_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StrDb_FinishFront_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->FinishFront = *arg2;
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StrDb_FinishFront_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:StrDb_FinishFront_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CamInfo__StrDb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrDb_FinishFront_get" "', argument " "1"" of type '" "CamInfo::StrDb *""'"); 
  }
  arg1 = reinterpret_cast< CamInfo::StrDb * >(argp1);
  result = (std::string *) & ((arg1)->FinishFront);
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StrDb_FinishBack_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:StrDb_FinishBack_set self FinishBack ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CamInfo__StrDb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrDb_FinishBack_set" "', argument " "1"" of type '" "CamInfo::StrDb *""'"); 
  }
  arg1 = reinterpret_cast< CamInfo::StrDb * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StrDb_FinishBack_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StrDb_FinishBack_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->FinishBack = *arg2;
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StrDb_FinishBack_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:StrDb_FinishBack_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CamInfo__StrDb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrDb_FinishBack_get" "', argument " "1"" of type '" "CamInfo::StrDb *""'"); 
  }
  arg1 = reinterpret_cast< CamInfo::StrDb * >(argp1);
  result = (std::string *) & ((arg1)->FinishBack);
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StrDb_MpiRev_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:StrDb_MpiRev_set self MpiRev ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CamInfo__StrDb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrDb_MpiRev_set" "', argument " "1"" of type '" "CamInfo::StrDb *""'"); 
  }
  arg1 = reinterpret_cast< CamInfo::StrDb * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StrDb_MpiRev_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StrDb_MpiRev_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->MpiRev = *arg2;
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StrDb_MpiRev_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:StrDb_MpiRev_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CamInfo__StrDb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrDb_MpiRev_get" "', argument " "1"" of type '" "CamInfo::StrDb *""'"); 
  }
  arg1 = reinterpret_cast< CamInfo::StrDb * >(argp1);
  result = (std::string *) & ((arg1)->MpiRev);
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StrDb_TestDate_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:StrDb_TestDate_set self TestDate ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CamInfo__StrDb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrDb_TestDate_set" "', argument " "1"" of type '" "CamInfo::StrDb *""'"); 
  }
  arg1 = reinterpret_cast< CamInfo::StrDb * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StrDb_TestDate_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StrDb_TestDate_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->TestDate = *arg2;
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StrDb_TestDate_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:StrDb_TestDate_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CamInfo__StrDb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrDb_TestDate_get" "', argument " "1"" of type '" "CamInfo::StrDb *""'"); 
  }
  arg1 = reinterpret_cast< CamInfo::StrDb * >(argp1);
  result = (std::string *) & ((arg1)->TestDate);
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StrDb_TestedBy_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:StrDb_TestedBy_set self TestedBy ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CamInfo__StrDb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrDb_TestedBy_set" "', argument " "1"" of type '" "CamInfo::StrDb *""'"); 
  }
  arg1 = reinterpret_cast< CamInfo::StrDb * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StrDb_TestedBy_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StrDb_TestedBy_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->TestedBy = *arg2;
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StrDb_TestedBy_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:StrDb_TestedBy_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CamInfo__StrDb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrDb_TestedBy_get" "', argument " "1"" of type '" "CamInfo::StrDb *""'"); 
  }
  arg1 = reinterpret_cast< CamInfo::StrDb * >(argp1);
  result = (std::string *) & ((arg1)->TestedBy);
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StrDb_TestedDllRev_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:StrDb_TestedDllRev_set self TestedDllRev ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CamInfo__StrDb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrDb_TestedDllRev_set" "', argument " "1"" of type '" "CamInfo::StrDb *""'"); 
  }
  arg1 = reinterpret_cast< CamInfo::StrDb * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StrDb_TestedDllRev_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StrDb_TestedDllRev_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->TestedDllRev = *arg2;
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StrDb_TestedDllRev_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:StrDb_TestedDllRev_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CamInfo__StrDb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrDb_TestedDllRev_get" "', argument " "1"" of type '" "CamInfo::StrDb *""'"); 
  }
  arg1 = reinterpret_cast< CamInfo::StrDb * >(argp1);
  result = (std::string *) & ((arg1)->TestedDllRev);
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StrDb_TestedFwRev_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:StrDb_TestedFwRev_set self TestedFwRev ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CamInfo__StrDb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrDb_TestedFwRev_set" "', argument " "1"" of type '" "CamInfo::StrDb *""'"); 
  }
  arg1 = reinterpret_cast< CamInfo::StrDb * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StrDb_TestedFwRev_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StrDb_TestedFwRev_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->TestedFwRev = *arg2;
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StrDb_TestedFwRev_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:StrDb_TestedFwRev_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CamInfo__StrDb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrDb_TestedFwRev_get" "', argument " "1"" of type '" "CamInfo::StrDb *""'"); 
  }
  arg1 = reinterpret_cast< CamInfo::StrDb * >(argp1);
  result = (std::string *) & ((arg1)->TestedFwRev);
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StrDb_Gain_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:StrDb_Gain_set self Gain ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CamInfo__StrDb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrDb_Gain_set" "', argument " "1"" of type '" "CamInfo::StrDb *""'"); 
  }
  arg1 = reinterpret_cast< CamInfo::StrDb * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StrDb_Gain_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StrDb_Gain_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->Gain = *arg2;
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StrDb_Gain_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:StrDb_Gain_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CamInfo__StrDb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrDb_Gain_get" "', argument " "1"" of type '" "CamInfo::StrDb *""'"); 
  }
  arg1 = reinterpret_cast< CamInfo::StrDb * >(argp1);
  result = (std::string *) & ((arg1)->Gain);
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StrDb_Noise_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:StrDb_Noise_set self Noise ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CamInfo__StrDb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrDb_Noise_set" "', argument " "1"" of type '" "CamInfo::StrDb *""'"); 
  }
  arg1 = reinterpret_cast< CamInfo::StrDb * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StrDb_Noise_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StrDb_Noise_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->Noise = *arg2;
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StrDb_Noise_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:StrDb_Noise_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CamInfo__StrDb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrDb_Noise_get" "', argument " "1"" of type '" "CamInfo::StrDb *""'"); 
  }
  arg1 = reinterpret_cast< CamInfo::StrDb * >(argp1);
  result = (std::string *) & ((arg1)->Noise);
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StrDb_Bias_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:StrDb_Bias_set self Bias ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CamInfo__StrDb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrDb_Bias_set" "', argument " "1"" of type '" "CamInfo::StrDb *""'"); 
  }
  arg1 = reinterpret_cast< CamInfo::StrDb * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StrDb_Bias_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StrDb_Bias_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->Bias = *arg2;
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StrDb_Bias_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:StrDb_Bias_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CamInfo__StrDb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrDb_Bias_get" "', argument " "1"" of type '" "CamInfo::StrDb *""'"); 
  }
  arg1 = reinterpret_cast< CamInfo::StrDb * >(argp1);
  result = (std::string *) & ((arg1)->Bias);
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StrDb_TestTemp_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:StrDb_TestTemp_set self TestTemp ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CamInfo__StrDb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrDb_TestTemp_set" "', argument " "1"" of type '" "CamInfo::StrDb *""'"); 
  }
  arg1 = reinterpret_cast< CamInfo::StrDb * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StrDb_TestTemp_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StrDb_TestTemp_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->TestTemp = *arg2;
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StrDb_TestTemp_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:StrDb_TestTemp_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CamInfo__StrDb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrDb_TestTemp_get" "', argument " "1"" of type '" "CamInfo::StrDb *""'"); 
  }
  arg1 = reinterpret_cast< CamInfo::StrDb * >(argp1);
  result = (std::string *) & ((arg1)->TestTemp);
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StrDb_DarkCount_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:StrDb_DarkCount_set self DarkCount ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CamInfo__StrDb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrDb_DarkCount_set" "', argument " "1"" of type '" "CamInfo::StrDb *""'"); 
  }
  arg1 = reinterpret_cast< CamInfo::StrDb * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StrDb_DarkCount_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StrDb_DarkCount_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->DarkCount = *arg2;
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StrDb_DarkCount_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:StrDb_DarkCount_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CamInfo__StrDb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrDb_DarkCount_get" "', argument " "1"" of type '" "CamInfo::StrDb *""'"); 
  }
  arg1 = reinterpret_cast< CamInfo::StrDb * >(argp1);
  result = (std::string *) & ((arg1)->DarkCount);
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StrDb_DarkDuration_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:StrDb_DarkDuration_set self DarkDuration ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CamInfo__StrDb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrDb_DarkDuration_set" "', argument " "1"" of type '" "CamInfo::StrDb *""'"); 
  }
  arg1 = reinterpret_cast< CamInfo::StrDb * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StrDb_DarkDuration_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StrDb_DarkDuration_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->DarkDuration = *arg2;
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StrDb_DarkDuration_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:StrDb_DarkDuration_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CamInfo__StrDb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrDb_DarkDuration_get" "', argument " "1"" of type '" "CamInfo::StrDb *""'"); 
  }
  arg1 = reinterpret_cast< CamInfo::StrDb * >(argp1);
  result = (std::string *) & ((arg1)->DarkDuration);
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StrDb_DarkTemp_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:StrDb_DarkTemp_set self DarkTemp ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CamInfo__StrDb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrDb_DarkTemp_set" "', argument " "1"" of type '" "CamInfo::StrDb *""'"); 
  }
  arg1 = reinterpret_cast< CamInfo::StrDb * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StrDb_DarkTemp_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StrDb_DarkTemp_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->DarkTemp = *arg2;
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StrDb_DarkTemp_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:StrDb_DarkTemp_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CamInfo__StrDb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrDb_DarkTemp_get" "', argument " "1"" of type '" "CamInfo::StrDb *""'"); 
  }
  arg1 = reinterpret_cast< CamInfo::StrDb * >(argp1);
  result = (std::string *) & ((arg1)->DarkTemp);
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StrDb_CoolingDelta_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:StrDb_CoolingDelta_set self CoolingDelta ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CamInfo__StrDb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrDb_CoolingDelta_set" "', argument " "1"" of type '" "CamInfo::StrDb *""'"); 
  }
  arg1 = reinterpret_cast< CamInfo::StrDb * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StrDb_CoolingDelta_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StrDb_CoolingDelta_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->CoolingDelta = *arg2;
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StrDb_CoolingDelta_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:StrDb_CoolingDelta_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CamInfo__StrDb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrDb_CoolingDelta_get" "', argument " "1"" of type '" "CamInfo::StrDb *""'"); 
  }
  arg1 = reinterpret_cast< CamInfo::StrDb * >(argp1);
  result = (std::string *) & ((arg1)->CoolingDelta);
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StrDb_Ad1Offset_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:StrDb_Ad1Offset_set self Ad1Offset ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CamInfo__StrDb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrDb_Ad1Offset_set" "', argument " "1"" of type '" "CamInfo::StrDb *""'"); 
  }
  arg1 = reinterpret_cast< CamInfo::StrDb * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StrDb_Ad1Offset_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StrDb_Ad1Offset_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->Ad1Offset = *arg2;
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StrDb_Ad1Offset_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:StrDb_Ad1Offset_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CamInfo__StrDb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrDb_Ad1Offset_get" "', argument " "1"" of type '" "CamInfo::StrDb *""'"); 
  }
  arg1 = reinterpret_cast< CamInfo::StrDb * >(argp1);
  result = (std::string *) & ((arg1)->Ad1Offset);
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StrDb_Ad1Gain_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:StrDb_Ad1Gain_set self Ad1Gain ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CamInfo__StrDb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrDb_Ad1Gain_set" "', argument " "1"" of type '" "CamInfo::StrDb *""'"); 
  }
  arg1 = reinterpret_cast< CamInfo::StrDb * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StrDb_Ad1Gain_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StrDb_Ad1Gain_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->Ad1Gain = *arg2;
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StrDb_Ad1Gain_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:StrDb_Ad1Gain_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CamInfo__StrDb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrDb_Ad1Gain_get" "', argument " "1"" of type '" "CamInfo::StrDb *""'"); 
  }
  arg1 = reinterpret_cast< CamInfo::StrDb * >(argp1);
  result = (std::string *) & ((arg1)->Ad1Gain);
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StrDb_Ad2Offset_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:StrDb_Ad2Offset_set self Ad2Offset ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CamInfo__StrDb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrDb_Ad2Offset_set" "', argument " "1"" of type '" "CamInfo::StrDb *""'"); 
  }
  arg1 = reinterpret_cast< CamInfo::StrDb * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StrDb_Ad2Offset_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StrDb_Ad2Offset_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->Ad2Offset = *arg2;
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StrDb_Ad2Offset_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:StrDb_Ad2Offset_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CamInfo__StrDb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrDb_Ad2Offset_get" "', argument " "1"" of type '" "CamInfo::StrDb *""'"); 
  }
  arg1 = reinterpret_cast< CamInfo::StrDb * >(argp1);
  result = (std::string *) & ((arg1)->Ad2Offset);
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StrDb_Ad2Gain_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:StrDb_Ad2Gain_set self Ad2Gain ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CamInfo__StrDb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrDb_Ad2Gain_set" "', argument " "1"" of type '" "CamInfo::StrDb *""'"); 
  }
  arg1 = reinterpret_cast< CamInfo::StrDb * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StrDb_Ad2Gain_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StrDb_Ad2Gain_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->Ad2Gain = *arg2;
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StrDb_Ad2Gain_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:StrDb_Ad2Gain_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CamInfo__StrDb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrDb_Ad2Gain_get" "', argument " "1"" of type '" "CamInfo::StrDb *""'"); 
  }
  arg1 = reinterpret_cast< CamInfo::StrDb * >(argp1);
  result = (std::string *) & ((arg1)->Ad2Gain);
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StrDb_Rma1_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:StrDb_Rma1_set self Rma1 ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CamInfo__StrDb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrDb_Rma1_set" "', argument " "1"" of type '" "CamInfo::StrDb *""'"); 
  }
  arg1 = reinterpret_cast< CamInfo::StrDb * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StrDb_Rma1_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StrDb_Rma1_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->Rma1 = *arg2;
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StrDb_Rma1_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:StrDb_Rma1_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CamInfo__StrDb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrDb_Rma1_get" "', argument " "1"" of type '" "CamInfo::StrDb *""'"); 
  }
  arg1 = reinterpret_cast< CamInfo::StrDb * >(argp1);
  result = (std::string *) & ((arg1)->Rma1);
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StrDb_Rma2_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:StrDb_Rma2_set self Rma2 ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CamInfo__StrDb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrDb_Rma2_set" "', argument " "1"" of type '" "CamInfo::StrDb *""'"); 
  }
  arg1 = reinterpret_cast< CamInfo::StrDb * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StrDb_Rma2_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StrDb_Rma2_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->Rma2 = *arg2;
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StrDb_Rma2_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:StrDb_Rma2_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CamInfo__StrDb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrDb_Rma2_get" "', argument " "1"" of type '" "CamInfo::StrDb *""'"); 
  }
  arg1 = reinterpret_cast< CamInfo::StrDb * >(argp1);
  result = (std::string *) & ((arg1)->Rma2);
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StrDb_Comment1_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:StrDb_Comment1_set self Comment1 ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CamInfo__StrDb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrDb_Comment1_set" "', argument " "1"" of type '" "CamInfo::StrDb *""'"); 
  }
  arg1 = reinterpret_cast< CamInfo::StrDb * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StrDb_Comment1_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StrDb_Comment1_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->Comment1 = *arg2;
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StrDb_Comment1_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:StrDb_Comment1_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CamInfo__StrDb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrDb_Comment1_get" "', argument " "1"" of type '" "CamInfo::StrDb *""'"); 
  }
  arg1 = reinterpret_cast< CamInfo::StrDb * >(argp1);
  result = (std::string *) & ((arg1)->Comment1);
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StrDb_Comment2_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:StrDb_Comment2_set self Comment2 ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CamInfo__StrDb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrDb_Comment2_set" "', argument " "1"" of type '" "CamInfo::StrDb *""'"); 
  }
  arg1 = reinterpret_cast< CamInfo::StrDb * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StrDb_Comment2_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StrDb_Comment2_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->Comment2 = *arg2;
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StrDb_Comment2_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:StrDb_Comment2_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CamInfo__StrDb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrDb_Comment2_get" "', argument " "1"" of type '" "CamInfo::StrDb *""'"); 
  }
  arg1 = reinterpret_cast< CamInfo::StrDb * >(argp1);
  result = (std::string *) & ((arg1)->Comment2);
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StrDb_Comment3_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:StrDb_Comment3_set self Comment3 ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CamInfo__StrDb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrDb_Comment3_set" "', argument " "1"" of type '" "CamInfo::StrDb *""'"); 
  }
  arg1 = reinterpret_cast< CamInfo::StrDb * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StrDb_Comment3_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StrDb_Comment3_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->Comment3 = *arg2;
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StrDb_Comment3_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:StrDb_Comment3_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CamInfo__StrDb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrDb_Comment3_get" "', argument " "1"" of type '" "CamInfo::StrDb *""'"); 
  }
  arg1 = reinterpret_cast< CamInfo::StrDb * >(argp1);
  result = (std::string *) & ((arg1)->Comment3);
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_StrDb(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CamInfo::StrDb *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_StrDb ") == TCL_ERROR) SWIG_fail;
  {
    try {
      result = (CamInfo::StrDb *)new CamInfo::StrDb();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_CamInfo__StrDb,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_StrDb(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CamInfo::StrDb *arg1 = (CamInfo::StrDb *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_StrDb self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CamInfo__StrDb, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_StrDb" "', argument " "1"" of type '" "CamInfo::StrDb *""'"); 
  }
  arg1 = reinterpret_cast< CamInfo::StrDb * >(argp1);
  {
    try {
      delete arg1;
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_StrDb(void *obj) {
CamInfo::StrDb *arg1 = (CamInfo::StrDb *) obj;
delete arg1;
}
static swig_method swig_CamInfo_StrDb_methods[] = {
    {0,0}
};
static swig_attribute swig_CamInfo_StrDb_attributes[] = {
    { "-FactorySn",_wrap_StrDb_FactorySn_get, _wrap_StrDb_FactorySn_set},
    { "-CustomerSn",_wrap_StrDb_CustomerSn_get, _wrap_StrDb_CustomerSn_set},
    { "-Id",_wrap_StrDb_Id_get, _wrap_StrDb_Id_set},
    { "-Platform",_wrap_StrDb_Platform_get, _wrap_StrDb_Platform_set},
    { "-PartNum",_wrap_StrDb_PartNum_get, _wrap_StrDb_PartNum_set},
    { "-Ccd",_wrap_StrDb_Ccd_get, _wrap_StrDb_Ccd_set},
    { "-CcdSn",_wrap_StrDb_CcdSn_get, _wrap_StrDb_CcdSn_set},
    { "-CcdGrade",_wrap_StrDb_CcdGrade_get, _wrap_StrDb_CcdGrade_set},
    { "-ProcBoardRev",_wrap_StrDb_ProcBoardRev_get, _wrap_StrDb_ProcBoardRev_set},
    { "-DriveBoardRev",_wrap_StrDb_DriveBoardRev_get, _wrap_StrDb_DriveBoardRev_set},
    { "-Shutter",_wrap_StrDb_Shutter_get, _wrap_StrDb_Shutter_set},
    { "-WindowType",_wrap_StrDb_WindowType_get, _wrap_StrDb_WindowType_set},
    { "-MechCfg",_wrap_StrDb_MechCfg_get, _wrap_StrDb_MechCfg_set},
    { "-MechRev",_wrap_StrDb_MechRev_get, _wrap_StrDb_MechRev_set},
    { "-CoolingType",_wrap_StrDb_CoolingType_get, _wrap_StrDb_CoolingType_set},
    { "-FinishFront",_wrap_StrDb_FinishFront_get, _wrap_StrDb_FinishFront_set},
    { "-FinishBack",_wrap_StrDb_FinishBack_get, _wrap_StrDb_FinishBack_set},
    { "-MpiRev",_wrap_StrDb_MpiRev_get, _wrap_StrDb_MpiRev_set},
    { "-TestDate",_wrap_StrDb_TestDate_get, _wrap_StrDb_TestDate_set},
    { "-TestedBy",_wrap_StrDb_TestedBy_get, _wrap_StrDb_TestedBy_set},
    { "-TestedDllRev",_wrap_StrDb_TestedDllRev_get, _wrap_StrDb_TestedDllRev_set},
    { "-TestedFwRev",_wrap_StrDb_TestedFwRev_get, _wrap_StrDb_TestedFwRev_set},
    { "-Gain",_wrap_StrDb_Gain_get, _wrap_StrDb_Gain_set},
    { "-Noise",_wrap_StrDb_Noise_get, _wrap_StrDb_Noise_set},
    { "-Bias",_wrap_StrDb_Bias_get, _wrap_StrDb_Bias_set},
    { "-TestTemp",_wrap_StrDb_TestTemp_get, _wrap_StrDb_TestTemp_set},
    { "-DarkCount",_wrap_StrDb_DarkCount_get, _wrap_StrDb_DarkCount_set},
    { "-DarkDuration",_wrap_StrDb_DarkDuration_get, _wrap_StrDb_DarkDuration_set},
    { "-DarkTemp",_wrap_StrDb_DarkTemp_get, _wrap_StrDb_DarkTemp_set},
    { "-CoolingDelta",_wrap_StrDb_CoolingDelta_get, _wrap_StrDb_CoolingDelta_set},
    { "-Ad1Offset",_wrap_StrDb_Ad1Offset_get, _wrap_StrDb_Ad1Offset_set},
    { "-Ad1Gain",_wrap_StrDb_Ad1Gain_get, _wrap_StrDb_Ad1Gain_set},
    { "-Ad2Offset",_wrap_StrDb_Ad2Offset_get, _wrap_StrDb_Ad2Offset_set},
    { "-Ad2Gain",_wrap_StrDb_Ad2Gain_get, _wrap_StrDb_Ad2Gain_set},
    { "-Rma1",_wrap_StrDb_Rma1_get, _wrap_StrDb_Rma1_set},
    { "-Rma2",_wrap_StrDb_Rma2_get, _wrap_StrDb_Rma2_set},
    { "-Comment1",_wrap_StrDb_Comment1_get, _wrap_StrDb_Comment1_set},
    { "-Comment2",_wrap_StrDb_Comment2_get, _wrap_StrDb_Comment2_set},
    { "-Comment3",_wrap_StrDb_Comment3_get, _wrap_StrDb_Comment3_set},
    {0,0,0}
};
static swig_class *swig_CamInfo_StrDb_bases[] = {0};
static const char * swig_CamInfo_StrDb_base_names[] = {0};
static swig_class _wrap_class_CamInfo_StrDb = { "StrDb", &SWIGTYPE_p_CamInfo__StrDb,_wrap_new_StrDb, swig_delete_StrDb, swig_CamInfo_StrDb_methods, swig_CamInfo_StrDb_attributes, swig_CamInfo_StrDb_bases,swig_CamInfo_StrDb_base_names, &swig_module };
SWIGINTERN int
_wrap_MkStrVectFromStrDb(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CamInfo::StrDb *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  std::vector< std::string > result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:MkStrVectFromStrDb DbStruct ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_CamInfo__StrDb,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MkStrVectFromStrDb" "', argument " "1"" of type '" "CamInfo::StrDb const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MkStrVectFromStrDb" "', argument " "1"" of type '" "CamInfo::StrDb const &""'"); 
  }
  arg1 = reinterpret_cast< CamInfo::StrDb * >(argp1);
  {
    try {
      result = CamInfo::MkStrVectFromStrDb((CamInfo::StrDb const &)*arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new std::vector< std::string >(static_cast< const std::vector< std::string >& >(result))), SWIGTYPE_p_std__vectorT_std__string_t, SWIG_POINTER_OWN | 0 ));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_MkStrDbFromStrVect(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< std::string > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  CamInfo::StrDb result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:MkStrDbFromStrVect strVect ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_std__vectorT_std__string_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MkStrDbFromStrVect" "', argument " "1"" of type '" "std::vector< std::string > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MkStrDbFromStrVect" "', argument " "1"" of type '" "std::vector< std::string > const &""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    try {
      result = CamInfo::MkStrDbFromStrVect((std::vector< std::string > const &)*arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new CamInfo::StrDb(static_cast< const CamInfo::StrDb& >(result))), SWIGTYPE_p_CamInfo__StrDb, SWIG_POINTER_OWN | 0 ));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetNoOpDb(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CamInfo::StrDb result;
  
  if (SWIG_GetArgs(interp, objc, objv,":GetNoOpDb ") == TCL_ERROR) SWIG_fail;
  {
    try {
      result = CamInfo::GetNoOpDb();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new CamInfo::StrDb(static_cast< const CamInfo::StrDb& >(result))), SWIGTYPE_p_CamInfo__StrDb, SWIG_POINTER_OWN | 0 ));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_IsAlta(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  uint16_t arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  bool result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:IsAlta FirmwareRev ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "IsAlta" "', argument " "1"" of type '" "uint16_t""'");
  } 
  arg1 = static_cast< uint16_t >(val1);
  {
    try {
      result = (bool)CamModel::IsAlta(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast< bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_IsGen2Platform(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  uint16_t arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  bool result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:IsGen2Platform FirmwareRev ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "IsGen2Platform" "', argument " "1"" of type '" "uint16_t""'");
  } 
  arg1 = static_cast< uint16_t >(val1);
  {
    try {
      result = (bool)CamModel::IsGen2Platform(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast< bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_IsFirmwareRevGood(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  uint16_t arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  bool result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:IsFirmwareRevGood FirmwareRev ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "IsFirmwareRevGood" "', argument " "1"" of type '" "uint16_t""'");
  } 
  arg1 = static_cast< uint16_t >(val1);
  {
    try {
      result = (bool)CamModel::IsFirmwareRevGood(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast< bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_MaskRawId(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  uint16_t arg1 ;
  uint16_t arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  uint16_t result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:MaskRawId FirmwareRev CamId ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "MaskRawId" "', argument " "1"" of type '" "uint16_t""'");
  } 
  arg1 = static_cast< uint16_t >(val1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MaskRawId" "', argument " "2"" of type '" "uint16_t""'");
  } 
  arg2 = static_cast< uint16_t >(val2);
  {
    try {
      result = (uint16_t)CamModel::MaskRawId(arg1,arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetPlatformType__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  uint16_t arg1 ;
  bool arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  CamModel::PlatformType result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:GetPlatformType FixedId IsEthernet ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "GetPlatformType" "', argument " "1"" of type '" "uint16_t""'");
  } 
  arg1 = static_cast< uint16_t >(val1);
  ecode2 = SWIG_AsVal_bool SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GetPlatformType" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      result = (CamModel::PlatformType)CamModel::GetPlatformType(arg1,arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetPlatformType__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  uint16_t arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  CamModel::PlatformType result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:GetPlatformType FixedId ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "GetPlatformType" "', argument " "1"" of type '" "uint16_t""'");
  } 
  arg1 = static_cast< uint16_t >(val1);
  {
    try {
      result = (CamModel::PlatformType)CamModel::GetPlatformType(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetPlatformType__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  CamModel::PlatformType result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:GetPlatformType cameraLine ",(void *)0) == TCL_ERROR) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[1], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetPlatformType" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GetPlatformType" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (CamModel::PlatformType)CamModel::GetPlatformType((std::string const &)*arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetPlatformType(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_short SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_GetPlatformType__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_GetPlatformType__SWIG_2(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_short SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_bool SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_GetPlatformType__SWIG_0(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'GetPlatformType'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetPlatformStr__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  uint16_t arg1 ;
  bool arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  std::string result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:GetPlatformStr FixedId IsEthernet ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "GetPlatformStr" "', argument " "1"" of type '" "uint16_t""'");
  } 
  arg1 = static_cast< uint16_t >(val1);
  ecode2 = SWIG_AsVal_bool SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GetPlatformStr" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      result = CamModel::GetPlatformStr(arg1,arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetPlatformStr__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  uint16_t arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  std::string result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:GetPlatformStr FixedId ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "GetPlatformStr" "', argument " "1"" of type '" "uint16_t""'");
  } 
  arg1 = static_cast< uint16_t >(val1);
  {
    try {
      result = CamModel::GetPlatformStr(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetPlatformStr(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_short SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_GetPlatformStr__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_short SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_bool SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_GetPlatformStr__SWIG_0(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'GetPlatformStr'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetModelStr(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  uint16_t arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  std::string result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:GetModelStr CamId ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "GetModelStr" "', argument " "1"" of type '" "uint16_t""'");
  } 
  arg1 = static_cast< uint16_t >(val1);
  {
    try {
      result = CamModel::GetModelStr(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetNoOpFirmwareRev(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::string result;
  
  if (SWIG_GetArgs(interp, objc, objv,":GetNoOpFirmwareRev ") == TCL_ERROR) SWIG_fail;
  {
    try {
      result = CamModel::GetNoOpFirmwareRev();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN const char *_wrap_FIRMWARE_PLATFORM_MASK_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2, int flags) {
  Tcl_Obj *value = 0;
  
  value = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(CamModel::FIRMWARE_PLATFORM_MASK));
  if (value) {
    Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
    Tcl_DecrRefCount(value);
  }
  return NULL;
}


SWIGINTERN const char *swig_readonly(ClientData clientData SWIGUNUSED, Tcl_Interp *interp SWIGUNUSED, char *name1 SWIGUNUSED, char *name2 SWIGUNUSED, int flags SWIGUNUSED) {
  return "Variable is read-only";
}


SWIGINTERN const char *_wrap_MAX_ALTA_FIRMWARE_REV_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2, int flags) {
  Tcl_Obj *value = 0;
  
  value = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(CamModel::MAX_ALTA_FIRMWARE_REV));
  if (value) {
    Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
    Tcl_DecrRefCount(value);
  }
  return NULL;
}


SWIGINTERN const char *_wrap_MIN_GEN2_FIRMWARE_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2, int flags) {
  Tcl_Obj *value = 0;
  
  value = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(CamModel::MIN_GEN2_FIRMWARE));
  if (value) {
    Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
    Tcl_DecrRefCount(value);
  }
  return NULL;
}


SWIGINTERN const char *_wrap_MAX_GEN2_FIRMWARE_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2, int flags) {
  Tcl_Obj *value = 0;
  
  value = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(CamModel::MAX_GEN2_FIRMWARE));
  if (value) {
    Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
    Tcl_DecrRefCount(value);
  }
  return NULL;
}


SWIGINTERN const char *_wrap_ALTA_CAMERA_ID_MASK_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2, int flags) {
  Tcl_Obj *value = 0;
  
  value = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(CamModel::ALTA_CAMERA_ID_MASK));
  if (value) {
    Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
    Tcl_DecrRefCount(value);
  }
  return NULL;
}


SWIGINTERN const char *_wrap_GEN2_CAMERA_ID_MASK_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2, int flags) {
  Tcl_Obj *value = 0;
  
  value = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(CamModel::GEN2_CAMERA_ID_MASK));
  if (value) {
    Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
    Tcl_DecrRefCount(value);
  }
  return NULL;
}


SWIGINTERN const char *_wrap_NO_OP_FRMWR_REV_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2, int flags) {
  Tcl_Obj *value = 0;
  
  value = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(CamModel::NO_OP_FRMWR_REV));
  if (value) {
    Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
    Tcl_DecrRefCount(value);
  }
  return NULL;
}


SWIGINTERN int
_wrap_new_CameraStatusRegs__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CameraStatusRegs *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_CameraStatusRegs ") == TCL_ERROR) SWIG_fail;
  {
    try {
      result = (CameraStatusRegs *)new CameraStatusRegs();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_CameraStatusRegs,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_CameraStatusRegs__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CameraStatusRegs::AdvStatus *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  CameraStatusRegs *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:new_CameraStatusRegs adv ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_CameraStatusRegs__AdvStatus,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CameraStatusRegs" "', argument " "1"" of type '" "CameraStatusRegs::AdvStatus const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CameraStatusRegs" "', argument " "1"" of type '" "CameraStatusRegs::AdvStatus const &""'"); 
  }
  arg1 = reinterpret_cast< CameraStatusRegs::AdvStatus * >(argp1);
  {
    try {
      result = (CameraStatusRegs *)new CameraStatusRegs((CameraStatusRegs::AdvStatus const &)*arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_CameraStatusRegs,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_CameraStatusRegs__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CameraStatusRegs::BasicStatus *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  CameraStatusRegs *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:new_CameraStatusRegs basic ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_CameraStatusRegs__BasicStatus,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CameraStatusRegs" "', argument " "1"" of type '" "CameraStatusRegs::BasicStatus const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CameraStatusRegs" "', argument " "1"" of type '" "CameraStatusRegs::BasicStatus const &""'"); 
  }
  arg1 = reinterpret_cast< CameraStatusRegs::BasicStatus * >(argp1);
  {
    try {
      result = (CameraStatusRegs *)new CameraStatusRegs((CameraStatusRegs::BasicStatus const &)*arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_CameraStatusRegs,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_CameraStatusRegs(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_new_CameraStatusRegs__SWIG_0(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CameraStatusRegs__AdvStatus, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_CameraStatusRegs__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CameraStatusRegs__BasicStatus, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_CameraStatusRegs__SWIG_2(clientData, interp, objc, argv - 1);
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'new_CameraStatusRegs'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_CameraStatusRegs(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CameraStatusRegs *arg1 = (CameraStatusRegs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_CameraStatusRegs self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CameraStatusRegs, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CameraStatusRegs" "', argument " "1"" of type '" "CameraStatusRegs *""'"); 
  }
  arg1 = reinterpret_cast< CameraStatusRegs * >(argp1);
  {
    try {
      delete arg1;
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CameraStatusRegs_GetTempHeatSink(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CameraStatusRegs *arg1 = (CameraStatusRegs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint16_t result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:CameraStatusRegs_GetTempHeatSink self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CameraStatusRegs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CameraStatusRegs_GetTempHeatSink" "', argument " "1"" of type '" "CameraStatusRegs *""'"); 
  }
  arg1 = reinterpret_cast< CameraStatusRegs * >(argp1);
  {
    try {
      result = (uint16_t)(arg1)->GetTempHeatSink();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CameraStatusRegs_GetTempCcd(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CameraStatusRegs *arg1 = (CameraStatusRegs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint16_t result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:CameraStatusRegs_GetTempCcd self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CameraStatusRegs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CameraStatusRegs_GetTempCcd" "', argument " "1"" of type '" "CameraStatusRegs *""'"); 
  }
  arg1 = reinterpret_cast< CameraStatusRegs * >(argp1);
  {
    try {
      result = (uint16_t)(arg1)->GetTempCcd();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CameraStatusRegs_GetCoolerDrive(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CameraStatusRegs *arg1 = (CameraStatusRegs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint16_t result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:CameraStatusRegs_GetCoolerDrive self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CameraStatusRegs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CameraStatusRegs_GetCoolerDrive" "', argument " "1"" of type '" "CameraStatusRegs *""'"); 
  }
  arg1 = reinterpret_cast< CameraStatusRegs * >(argp1);
  {
    try {
      result = (uint16_t)(arg1)->GetCoolerDrive();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CameraStatusRegs_GetInputVoltage(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CameraStatusRegs *arg1 = (CameraStatusRegs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint16_t result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:CameraStatusRegs_GetInputVoltage self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CameraStatusRegs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CameraStatusRegs_GetInputVoltage" "', argument " "1"" of type '" "CameraStatusRegs *""'"); 
  }
  arg1 = reinterpret_cast< CameraStatusRegs * >(argp1);
  {
    try {
      result = (uint16_t)(arg1)->GetInputVoltage();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CameraStatusRegs_GetTdiCounter(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CameraStatusRegs *arg1 = (CameraStatusRegs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint16_t result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:CameraStatusRegs_GetTdiCounter self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CameraStatusRegs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CameraStatusRegs_GetTdiCounter" "', argument " "1"" of type '" "CameraStatusRegs *""'"); 
  }
  arg1 = reinterpret_cast< CameraStatusRegs * >(argp1);
  {
    try {
      result = (uint16_t)(arg1)->GetTdiCounter();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CameraStatusRegs_GetSequenceCounter(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CameraStatusRegs *arg1 = (CameraStatusRegs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint16_t result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:CameraStatusRegs_GetSequenceCounter self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CameraStatusRegs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CameraStatusRegs_GetSequenceCounter" "', argument " "1"" of type '" "CameraStatusRegs *""'"); 
  }
  arg1 = reinterpret_cast< CameraStatusRegs * >(argp1);
  {
    try {
      result = (uint16_t)(arg1)->GetSequenceCounter();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CameraStatusRegs_GetStatus(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CameraStatusRegs *arg1 = (CameraStatusRegs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint16_t result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:CameraStatusRegs_GetStatus self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CameraStatusRegs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CameraStatusRegs_GetStatus" "', argument " "1"" of type '" "CameraStatusRegs const *""'"); 
  }
  arg1 = reinterpret_cast< CameraStatusRegs * >(argp1);
  {
    try {
      result = (uint16_t)((CameraStatusRegs const *)arg1)->GetStatus();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CameraStatusRegs_GetuFrame(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CameraStatusRegs *arg1 = (CameraStatusRegs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint16_t result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:CameraStatusRegs_GetuFrame self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CameraStatusRegs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CameraStatusRegs_GetuFrame" "', argument " "1"" of type '" "CameraStatusRegs *""'"); 
  }
  arg1 = reinterpret_cast< CameraStatusRegs * >(argp1);
  {
    try {
      result = (uint16_t)(arg1)->GetuFrame();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CameraStatusRegs_GetMostRecentFrame(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CameraStatusRegs *arg1 = (CameraStatusRegs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint16_t result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:CameraStatusRegs_GetMostRecentFrame self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CameraStatusRegs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CameraStatusRegs_GetMostRecentFrame" "', argument " "1"" of type '" "CameraStatusRegs *""'"); 
  }
  arg1 = reinterpret_cast< CameraStatusRegs * >(argp1);
  {
    try {
      result = (uint16_t)(arg1)->GetMostRecentFrame();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CameraStatusRegs_GetReadyFrame(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CameraStatusRegs *arg1 = (CameraStatusRegs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint16_t result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:CameraStatusRegs_GetReadyFrame self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CameraStatusRegs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CameraStatusRegs_GetReadyFrame" "', argument " "1"" of type '" "CameraStatusRegs *""'"); 
  }
  arg1 = reinterpret_cast< CameraStatusRegs * >(argp1);
  {
    try {
      result = (uint16_t)(arg1)->GetReadyFrame();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CameraStatusRegs_GetCurrentFrame(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CameraStatusRegs *arg1 = (CameraStatusRegs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint16_t result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:CameraStatusRegs_GetCurrentFrame self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CameraStatusRegs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CameraStatusRegs_GetCurrentFrame" "', argument " "1"" of type '" "CameraStatusRegs *""'"); 
  }
  arg1 = reinterpret_cast< CameraStatusRegs * >(argp1);
  {
    try {
      result = (uint16_t)(arg1)->GetCurrentFrame();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CameraStatusRegs_GetFetchCount(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CameraStatusRegs *arg1 = (CameraStatusRegs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:CameraStatusRegs_GetFetchCount self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CameraStatusRegs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CameraStatusRegs_GetFetchCount" "', argument " "1"" of type '" "CameraStatusRegs *""'"); 
  }
  arg1 = reinterpret_cast< CameraStatusRegs * >(argp1);
  {
    try {
      result = (arg1)->GetFetchCount();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new uint32_t(static_cast< const uint32_t& >(result))), SWIGTYPE_p_uint32_t, SWIG_POINTER_OWN | 0 ));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CameraStatusRegs_GetDataAvailFlag(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CameraStatusRegs *arg1 = (CameraStatusRegs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:CameraStatusRegs_GetDataAvailFlag self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CameraStatusRegs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CameraStatusRegs_GetDataAvailFlag" "', argument " "1"" of type '" "CameraStatusRegs const *""'"); 
  }
  arg1 = reinterpret_cast< CameraStatusRegs * >(argp1);
  {
    try {
      result = (bool)((CameraStatusRegs const *)arg1)->GetDataAvailFlag();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast< bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CameraStatusRegs_QueryStatusRegs(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CameraStatusRegs *arg1 = (CameraStatusRegs *) 0 ;
  uint16_t *arg2 = 0 ;
  uint16_t *arg3 = 0 ;
  uint16_t *arg4 = 0 ;
  uint16_t *arg5 = 0 ;
  uint16_t *arg6 = 0 ;
  uint16_t *arg7 = 0 ;
  uint16_t *arg8 = 0 ;
  uint16_t *arg9 = 0 ;
  uint16_t *arg10 = 0 ;
  uint16_t *arg11 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  void *argp9 = 0 ;
  int res9 = 0 ;
  void *argp10 = 0 ;
  int res10 = 0 ;
  void *argp11 = 0 ;
  int res11 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooooooooooo:CameraStatusRegs_QueryStatusRegs self StatusReg HeatsinkTempReg CcdTempReg CoolerDriveReg VoltageReg TdiCounter SequenceCounter MostRecentFrame ReadyFrame CurrentFrame ",(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CameraStatusRegs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CameraStatusRegs_QueryStatusRegs" "', argument " "1"" of type '" "CameraStatusRegs *""'"); 
  }
  arg1 = reinterpret_cast< CameraStatusRegs * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_unsigned_short,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CameraStatusRegs_QueryStatusRegs" "', argument " "2"" of type '" "uint16_t &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CameraStatusRegs_QueryStatusRegs" "', argument " "2"" of type '" "uint16_t &""'"); 
  }
  arg2 = reinterpret_cast< uint16_t * >(argp2);
  res3 = SWIG_ConvertPtr(objv[3], &argp3, SWIGTYPE_p_unsigned_short,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CameraStatusRegs_QueryStatusRegs" "', argument " "3"" of type '" "uint16_t &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CameraStatusRegs_QueryStatusRegs" "', argument " "3"" of type '" "uint16_t &""'"); 
  }
  arg3 = reinterpret_cast< uint16_t * >(argp3);
  res4 = SWIG_ConvertPtr(objv[4], &argp4, SWIGTYPE_p_unsigned_short,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CameraStatusRegs_QueryStatusRegs" "', argument " "4"" of type '" "uint16_t &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CameraStatusRegs_QueryStatusRegs" "', argument " "4"" of type '" "uint16_t &""'"); 
  }
  arg4 = reinterpret_cast< uint16_t * >(argp4);
  res5 = SWIG_ConvertPtr(objv[5], &argp5, SWIGTYPE_p_unsigned_short,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CameraStatusRegs_QueryStatusRegs" "', argument " "5"" of type '" "uint16_t &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CameraStatusRegs_QueryStatusRegs" "', argument " "5"" of type '" "uint16_t &""'"); 
  }
  arg5 = reinterpret_cast< uint16_t * >(argp5);
  res6 = SWIG_ConvertPtr(objv[6], &argp6, SWIGTYPE_p_unsigned_short,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "CameraStatusRegs_QueryStatusRegs" "', argument " "6"" of type '" "uint16_t &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CameraStatusRegs_QueryStatusRegs" "', argument " "6"" of type '" "uint16_t &""'"); 
  }
  arg6 = reinterpret_cast< uint16_t * >(argp6);
  res7 = SWIG_ConvertPtr(objv[7], &argp7, SWIGTYPE_p_unsigned_short,  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "CameraStatusRegs_QueryStatusRegs" "', argument " "7"" of type '" "uint16_t &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CameraStatusRegs_QueryStatusRegs" "', argument " "7"" of type '" "uint16_t &""'"); 
  }
  arg7 = reinterpret_cast< uint16_t * >(argp7);
  res8 = SWIG_ConvertPtr(objv[8], &argp8, SWIGTYPE_p_unsigned_short,  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "CameraStatusRegs_QueryStatusRegs" "', argument " "8"" of type '" "uint16_t &""'"); 
  }
  if (!argp8) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CameraStatusRegs_QueryStatusRegs" "', argument " "8"" of type '" "uint16_t &""'"); 
  }
  arg8 = reinterpret_cast< uint16_t * >(argp8);
  res9 = SWIG_ConvertPtr(objv[9], &argp9, SWIGTYPE_p_unsigned_short,  0 );
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "CameraStatusRegs_QueryStatusRegs" "', argument " "9"" of type '" "uint16_t &""'"); 
  }
  if (!argp9) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CameraStatusRegs_QueryStatusRegs" "', argument " "9"" of type '" "uint16_t &""'"); 
  }
  arg9 = reinterpret_cast< uint16_t * >(argp9);
  res10 = SWIG_ConvertPtr(objv[10], &argp10, SWIGTYPE_p_unsigned_short,  0 );
  if (!SWIG_IsOK(res10)) {
    SWIG_exception_fail(SWIG_ArgError(res10), "in method '" "CameraStatusRegs_QueryStatusRegs" "', argument " "10"" of type '" "uint16_t &""'"); 
  }
  if (!argp10) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CameraStatusRegs_QueryStatusRegs" "', argument " "10"" of type '" "uint16_t &""'"); 
  }
  arg10 = reinterpret_cast< uint16_t * >(argp10);
  res11 = SWIG_ConvertPtr(objv[11], &argp11, SWIGTYPE_p_unsigned_short,  0 );
  if (!SWIG_IsOK(res11)) {
    SWIG_exception_fail(SWIG_ArgError(res11), "in method '" "CameraStatusRegs_QueryStatusRegs" "', argument " "11"" of type '" "uint16_t &""'"); 
  }
  if (!argp11) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CameraStatusRegs_QueryStatusRegs" "', argument " "11"" of type '" "uint16_t &""'"); 
  }
  arg11 = reinterpret_cast< uint16_t * >(argp11);
  {
    try {
      (arg1)->QueryStatusRegs(*arg2,*arg3,*arg4,*arg5,*arg6,*arg7,*arg8,*arg9,*arg10,*arg11);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CameraStatusRegs_GetStatusStr(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CameraStatusRegs *arg1 = (CameraStatusRegs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:CameraStatusRegs_GetStatusStr self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CameraStatusRegs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CameraStatusRegs_GetStatusStr" "', argument " "1"" of type '" "CameraStatusRegs const *""'"); 
  }
  arg1 = reinterpret_cast< CameraStatusRegs * >(argp1);
  {
    try {
      result = ((CameraStatusRegs const *)arg1)->GetStatusStr();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CameraStatusRegs_Update__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CameraStatusRegs *arg1 = (CameraStatusRegs *) 0 ;
  CameraStatusRegs::AdvStatus *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:CameraStatusRegs_Update self adv ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CameraStatusRegs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CameraStatusRegs_Update" "', argument " "1"" of type '" "CameraStatusRegs *""'"); 
  }
  arg1 = reinterpret_cast< CameraStatusRegs * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_CameraStatusRegs__AdvStatus,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CameraStatusRegs_Update" "', argument " "2"" of type '" "CameraStatusRegs::AdvStatus const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CameraStatusRegs_Update" "', argument " "2"" of type '" "CameraStatusRegs::AdvStatus const &""'"); 
  }
  arg2 = reinterpret_cast< CameraStatusRegs::AdvStatus * >(argp2);
  {
    try {
      (arg1)->Update((CameraStatusRegs::AdvStatus const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CameraStatusRegs_Update__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CameraStatusRegs *arg1 = (CameraStatusRegs *) 0 ;
  CameraStatusRegs::BasicStatus *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:CameraStatusRegs_Update self basic ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CameraStatusRegs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CameraStatusRegs_Update" "', argument " "1"" of type '" "CameraStatusRegs *""'"); 
  }
  arg1 = reinterpret_cast< CameraStatusRegs * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_CameraStatusRegs__BasicStatus,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CameraStatusRegs_Update" "', argument " "2"" of type '" "CameraStatusRegs::BasicStatus const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CameraStatusRegs_Update" "', argument " "2"" of type '" "CameraStatusRegs::BasicStatus const &""'"); 
  }
  arg2 = reinterpret_cast< CameraStatusRegs::BasicStatus * >(argp2);
  {
    try {
      (arg1)->Update((CameraStatusRegs::BasicStatus const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CameraStatusRegs_Update(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CameraStatusRegs, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_CameraStatusRegs__AdvStatus, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_CameraStatusRegs_Update__SWIG_0(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CameraStatusRegs, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_CameraStatusRegs__BasicStatus, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_CameraStatusRegs_Update__SWIG_1(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'CameraStatusRegs_Update'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_CameraStatusRegs(void *obj) {
CameraStatusRegs *arg1 = (CameraStatusRegs *) obj;
delete arg1;
}
static swig_method swig_CameraStatusRegs_methods[] = {
    {"GetTempHeatSink", _wrap_CameraStatusRegs_GetTempHeatSink}, 
    {"GetTempCcd", _wrap_CameraStatusRegs_GetTempCcd}, 
    {"GetCoolerDrive", _wrap_CameraStatusRegs_GetCoolerDrive}, 
    {"GetInputVoltage", _wrap_CameraStatusRegs_GetInputVoltage}, 
    {"GetTdiCounter", _wrap_CameraStatusRegs_GetTdiCounter}, 
    {"GetSequenceCounter", _wrap_CameraStatusRegs_GetSequenceCounter}, 
    {"GetStatus", _wrap_CameraStatusRegs_GetStatus}, 
    {"GetuFrame", _wrap_CameraStatusRegs_GetuFrame}, 
    {"GetMostRecentFrame", _wrap_CameraStatusRegs_GetMostRecentFrame}, 
    {"GetReadyFrame", _wrap_CameraStatusRegs_GetReadyFrame}, 
    {"GetCurrentFrame", _wrap_CameraStatusRegs_GetCurrentFrame}, 
    {"GetFetchCount", _wrap_CameraStatusRegs_GetFetchCount}, 
    {"GetDataAvailFlag", _wrap_CameraStatusRegs_GetDataAvailFlag}, 
    {"QueryStatusRegs", _wrap_CameraStatusRegs_QueryStatusRegs}, 
    {"GetStatusStr", _wrap_CameraStatusRegs_GetStatusStr}, 
    {"Update", _wrap_CameraStatusRegs_Update}, 
    {0,0}
};
static swig_attribute swig_CameraStatusRegs_attributes[] = {
    {0,0,0}
};
static swig_class *swig_CameraStatusRegs_bases[] = {0};
static const char * swig_CameraStatusRegs_base_names[] = {0};
static swig_class _wrap_class_CameraStatusRegs = { "CameraStatusRegs", &SWIGTYPE_p_CameraStatusRegs,_wrap_new_CameraStatusRegs, swig_delete_CameraStatusRegs, swig_CameraStatusRegs_methods, swig_CameraStatusRegs_attributes, swig_CameraStatusRegs_bases,swig_CameraStatusRegs_base_names, &swig_module };
SWIGINTERN int
_wrap_new_FindDeviceEthernet(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  FindDeviceEthernet *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_FindDeviceEthernet ") == TCL_ERROR) SWIG_fail;
  {
    try {
      result = (FindDeviceEthernet *)new FindDeviceEthernet();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_FindDeviceEthernet,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_FindDeviceEthernet(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  FindDeviceEthernet *arg1 = (FindDeviceEthernet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_FindDeviceEthernet self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_FindDeviceEthernet, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_FindDeviceEthernet" "', argument " "1"" of type '" "FindDeviceEthernet *""'"); 
  }
  arg1 = reinterpret_cast< FindDeviceEthernet * >(argp1);
  {
    try {
      delete arg1;
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_FindDeviceEthernet_Find(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  FindDeviceEthernet *arg1 = (FindDeviceEthernet *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  std::string result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:FindDeviceEthernet_Find self subnet ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_FindDeviceEthernet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FindDeviceEthernet_Find" "', argument " "1"" of type '" "FindDeviceEthernet *""'"); 
  }
  arg1 = reinterpret_cast< FindDeviceEthernet * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FindDeviceEthernet_Find" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FindDeviceEthernet_Find" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (arg1)->Find((std::string const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(result)));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_FindDeviceEthernet_GetElapsedSecs(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  FindDeviceEthernet *arg1 = (FindDeviceEthernet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int32_t result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:FindDeviceEthernet_GetElapsedSecs self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_FindDeviceEthernet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FindDeviceEthernet_GetElapsedSecs" "', argument " "1"" of type '" "FindDeviceEthernet *""'"); 
  }
  arg1 = reinterpret_cast< FindDeviceEthernet * >(argp1);
  {
    try {
      result = (arg1)->GetElapsedSecs();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new int32_t(static_cast< const int32_t& >(result))), SWIGTYPE_p_int32_t, SWIG_POINTER_OWN | 0 ));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_FindDeviceEthernet_GetTimeout(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  FindDeviceEthernet *arg1 = (FindDeviceEthernet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int32_t result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:FindDeviceEthernet_GetTimeout self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_FindDeviceEthernet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FindDeviceEthernet_GetTimeout" "', argument " "1"" of type '" "FindDeviceEthernet *""'"); 
  }
  arg1 = reinterpret_cast< FindDeviceEthernet * >(argp1);
  {
    try {
      result = (arg1)->GetTimeout();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new int32_t(static_cast< const int32_t& >(result))), SWIGTYPE_p_int32_t, SWIG_POINTER_OWN | 0 ));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_FindDeviceEthernet(void *obj) {
FindDeviceEthernet *arg1 = (FindDeviceEthernet *) obj;
delete arg1;
}
static swig_method swig_FindDeviceEthernet_methods[] = {
    {"Find", _wrap_FindDeviceEthernet_Find}, 
    {"GetElapsedSecs", _wrap_FindDeviceEthernet_GetElapsedSecs}, 
    {"GetTimeout", _wrap_FindDeviceEthernet_GetTimeout}, 
    {0,0}
};
static swig_attribute swig_FindDeviceEthernet_attributes[] = {
    {0,0,0}
};
static swig_class *swig_FindDeviceEthernet_bases[] = {0};
static const char * swig_FindDeviceEthernet_base_names[] = {0};
static swig_class _wrap_class_FindDeviceEthernet = { "FindDeviceEthernet", &SWIGTYPE_p_FindDeviceEthernet,_wrap_new_FindDeviceEthernet, swig_delete_FindDeviceEthernet, swig_FindDeviceEthernet_methods, swig_FindDeviceEthernet_attributes, swig_FindDeviceEthernet_bases,swig_FindDeviceEthernet_base_names, &swig_module };
SWIGINTERN int
_wrap_delete_FindDeviceUsb(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  FindDeviceUsb *arg1 = (FindDeviceUsb *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_FindDeviceUsb self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_FindDeviceUsb, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_FindDeviceUsb" "', argument " "1"" of type '" "FindDeviceUsb *""'"); 
  }
  arg1 = reinterpret_cast< FindDeviceUsb * >(argp1);
  {
    try {
      delete arg1;
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_FindDeviceUsb_Find(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  FindDeviceUsb *arg1 = (FindDeviceUsb *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:FindDeviceUsb_Find self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_FindDeviceUsb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FindDeviceUsb_Find" "', argument " "1"" of type '" "FindDeviceUsb *""'"); 
  }
  arg1 = reinterpret_cast< FindDeviceUsb * >(argp1);
  {
    try {
      result = (arg1)->Find();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_FindDeviceUsb(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  FindDeviceUsb *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_FindDeviceUsb ") == TCL_ERROR) SWIG_fail;
  {
    try {
      result = (FindDeviceUsb *)new FindDeviceUsb();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_FindDeviceUsb,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_FindDeviceUsb(void *obj) {
FindDeviceUsb *arg1 = (FindDeviceUsb *) obj;
delete arg1;
}
static swig_method swig_FindDeviceUsb_methods[] = {
    {"Find", _wrap_FindDeviceUsb_Find}, 
    {0,0}
};
static swig_attribute swig_FindDeviceUsb_attributes[] = {
    {0,0,0}
};
static swig_class *swig_FindDeviceUsb_bases[] = {0};
static const char * swig_FindDeviceUsb_base_names[] = {0};
static swig_class _wrap_class_FindDeviceUsb = { "FindDeviceUsb", &SWIGTYPE_p_FindDeviceUsb,_wrap_new_FindDeviceUsb, swig_delete_FindDeviceUsb, swig_FindDeviceUsb_methods, swig_FindDeviceUsb_attributes, swig_FindDeviceUsb_bases,swig_FindDeviceUsb_base_names, &swig_module };
SWIGINTERN int
_wrap_new_Gee(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Gee *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_Gee ") == TCL_ERROR) SWIG_fail;
  {
    try {
      result = (Gee *)new Gee();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_Gee,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_Gee(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Gee *arg1 = (Gee *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_Gee self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Gee, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Gee" "', argument " "1"" of type '" "Gee *""'"); 
  }
  arg1 = reinterpret_cast< Gee * >(argp1);
  {
    try {
      delete arg1;
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Gee_OpenConnection(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Gee *arg1 = (Gee *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  uint16_t arg4 ;
  uint16_t arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooooo:Gee_OpenConnection self ioType DeviceAddr FirmwareRev Id ",(void *)0,(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Gee, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Gee_OpenConnection" "', argument " "1"" of type '" "Gee *""'"); 
  }
  arg1 = reinterpret_cast< Gee * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Gee_OpenConnection" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Gee_OpenConnection" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[3], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Gee_OpenConnection" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Gee_OpenConnection" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  ecode4 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Gee_OpenConnection" "', argument " "4"" of type '" "uint16_t""'");
  } 
  arg4 = static_cast< uint16_t >(val4);
  ecode5 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[5], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Gee_OpenConnection" "', argument " "5"" of type '" "uint16_t""'");
  } 
  arg5 = static_cast< uint16_t >(val5);
  {
    try {
      (arg1)->OpenConnection((std::string const &)*arg2,(std::string const &)*arg3,arg4,arg5);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Gee_CloseConnection(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Gee *arg1 = (Gee *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Gee_CloseConnection self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Gee, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Gee_CloseConnection" "', argument " "1"" of type '" "Gee *""'"); 
  }
  arg1 = reinterpret_cast< Gee * >(argp1);
  {
    try {
      (arg1)->CloseConnection();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Gee_StartExposure(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Gee *arg1 = (Gee *) 0 ;
  double arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:Gee_StartExposure self Duration IsLight ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Gee, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Gee_StartExposure" "', argument " "1"" of type '" "Gee *""'"); 
  }
  arg1 = reinterpret_cast< Gee * >(argp1);
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Gee_StartExposure" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_bool SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Gee_StartExposure" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->StartExposure(arg2,arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Gee_GetNumAdChannels(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Gee *arg1 = (Gee *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int32_t result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Gee_GetNumAdChannels self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Gee, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Gee_GetNumAdChannels" "', argument " "1"" of type '" "Gee *""'"); 
  }
  arg1 = reinterpret_cast< Gee * >(argp1);
  {
    try {
      result = (arg1)->GetNumAdChannels();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new int32_t(static_cast< const int32_t& >(result))), SWIGTYPE_p_int32_t, SWIG_POINTER_OWN | 0 ));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_Gee(void *obj) {
Gee *arg1 = (Gee *) obj;
delete arg1;
}
static swig_method swig_Gee_methods[] = {
    {"OpenConnection", _wrap_Gee_OpenConnection}, 
    {"CloseConnection", _wrap_Gee_CloseConnection}, 
    {"StartExposure", _wrap_Gee_StartExposure}, 
    {"GetNumAdChannels", _wrap_Gee_GetNumAdChannels}, 
    {0,0}
};
static swig_attribute swig_Gee_attributes[] = {
    {0,0,0}
};
static swig_class *swig_Gee_bases[] = {0,0};
static const char * swig_Gee_base_names[] = {"CamGen2Base *",0};
static swig_class _wrap_class_Gee = { "Gee", &SWIGTYPE_p_Gee,_wrap_new_Gee, swig_delete_Gee, swig_Gee_methods, swig_Gee_attributes, swig_Gee_bases,swig_Gee_base_names, &swig_module };
SWIGINTERN int
_wrap_new_Quad(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Quad *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_Quad ") == TCL_ERROR) SWIG_fail;
  {
    try {
      result = (Quad *)new Quad();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_Quad,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_Quad(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Quad *arg1 = (Quad *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_Quad self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Quad, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Quad" "', argument " "1"" of type '" "Quad *""'"); 
  }
  arg1 = reinterpret_cast< Quad * >(argp1);
  {
    try {
      delete arg1;
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Quad_OpenConnection(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Quad *arg1 = (Quad *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  uint16_t arg4 ;
  uint16_t arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooooo:Quad_OpenConnection self ioType DeviceAddr FirmwareRev Id ",(void *)0,(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Quad, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quad_OpenConnection" "', argument " "1"" of type '" "Quad *""'"); 
  }
  arg1 = reinterpret_cast< Quad * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Quad_OpenConnection" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Quad_OpenConnection" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[3], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Quad_OpenConnection" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Quad_OpenConnection" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  ecode4 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Quad_OpenConnection" "', argument " "4"" of type '" "uint16_t""'");
  } 
  arg4 = static_cast< uint16_t >(val4);
  ecode5 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[5], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Quad_OpenConnection" "', argument " "5"" of type '" "uint16_t""'");
  } 
  arg5 = static_cast< uint16_t >(val5);
  {
    try {
      (arg1)->OpenConnection((std::string const &)*arg2,(std::string const &)*arg3,arg4,arg5);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Quad_StartExposure(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Quad *arg1 = (Quad *) 0 ;
  double arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:Quad_StartExposure self Duration IsLight ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Quad, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quad_StartExposure" "', argument " "1"" of type '" "Quad *""'"); 
  }
  arg1 = reinterpret_cast< Quad * >(argp1);
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Quad_StartExposure" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_bool SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Quad_StartExposure" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->StartExposure(arg2,arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Quad_IsPixelReorderOn(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Quad *arg1 = (Quad *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Quad_IsPixelReorderOn self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Quad, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quad_IsPixelReorderOn" "', argument " "1"" of type '" "Quad *""'"); 
  }
  arg1 = reinterpret_cast< Quad * >(argp1);
  {
    try {
      result = (bool)(arg1)->IsPixelReorderOn();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast< bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Quad_SetPixelReorder(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Quad *arg1 = (Quad *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Quad_SetPixelReorder self TurnOn ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Quad, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quad_SetPixelReorder" "', argument " "1"" of type '" "Quad *""'"); 
  }
  arg1 = reinterpret_cast< Quad * >(argp1);
  ecode2 = SWIG_AsVal_bool SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Quad_SetPixelReorder" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->SetPixelReorder(arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Quad_GetNumAdChannels(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Quad *arg1 = (Quad *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int32_t result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Quad_GetNumAdChannels self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Quad, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quad_GetNumAdChannels" "', argument " "1"" of type '" "Quad *""'"); 
  }
  arg1 = reinterpret_cast< Quad * >(argp1);
  {
    try {
      result = (arg1)->GetNumAdChannels();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new int32_t(static_cast< const int32_t& >(result))), SWIGTYPE_p_int32_t, SWIG_POINTER_OWN | 0 ));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_Quad(void *obj) {
Quad *arg1 = (Quad *) obj;
delete arg1;
}
static swig_method swig_Quad_methods[] = {
    {"OpenConnection", _wrap_Quad_OpenConnection}, 
    {"StartExposure", _wrap_Quad_StartExposure}, 
    {"IsPixelReorderOn", _wrap_Quad_IsPixelReorderOn}, 
    {"SetPixelReorder", _wrap_Quad_SetPixelReorder}, 
    {"GetNumAdChannels", _wrap_Quad_GetNumAdChannels}, 
    {0,0}
};
static swig_attribute swig_Quad_attributes[] = {
    {0,0,0}
};
static swig_class *swig_Quad_bases[] = {0,0};
static const char * swig_Quad_base_names[] = {"CamGen2Base *",0};
static swig_class _wrap_class_Quad = { "Quad", &SWIGTYPE_p_Quad,_wrap_new_Quad, swig_delete_Quad, swig_Quad_methods, swig_Quad_attributes, swig_Quad_bases,swig_Quad_base_names, &swig_module };
SWIGINTERN int
_wrap_new_HiC(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HiC *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_HiC ") == TCL_ERROR) SWIG_fail;
  {
    try {
      result = (HiC *)new HiC();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_HiC,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_HiC(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HiC *arg1 = (HiC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_HiC self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HiC, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_HiC" "', argument " "1"" of type '" "HiC *""'"); 
  }
  arg1 = reinterpret_cast< HiC * >(argp1);
  {
    try {
      delete arg1;
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HiC_SetSerialNumber(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HiC *arg1 = (HiC *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:HiC_SetSerialNumber self num ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HiC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HiC_SetSerialNumber" "', argument " "1"" of type '" "HiC *""'"); 
  }
  arg1 = reinterpret_cast< HiC * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HiC_SetSerialNumber" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HiC_SetSerialNumber" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->SetSerialNumber((std::string const &)*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HiC_GetCamInfo(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HiC *arg1 = (HiC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  CamInfo::StrDb result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:HiC_GetCamInfo self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HiC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HiC_GetCamInfo" "', argument " "1"" of type '" "HiC *""'"); 
  }
  arg1 = reinterpret_cast< HiC * >(argp1);
  {
    try {
      result = (arg1)->GetCamInfo();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new CamInfo::StrDb(static_cast< const CamInfo::StrDb& >(result))), SWIGTYPE_p_CamInfo__StrDb, SWIG_POINTER_OWN | 0 ));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HiC_SetCamInfo(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HiC *arg1 = (HiC *) 0 ;
  CamInfo::StrDb *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:HiC_SetCamInfo self info ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HiC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HiC_SetCamInfo" "', argument " "1"" of type '" "HiC *""'"); 
  }
  arg1 = reinterpret_cast< HiC * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_CamInfo__StrDb,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HiC_SetCamInfo" "', argument " "2"" of type '" "CamInfo::StrDb &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HiC_SetCamInfo" "', argument " "2"" of type '" "CamInfo::StrDb &""'"); 
  }
  arg2 = reinterpret_cast< CamInfo::StrDb * >(argp2);
  {
    try {
      (arg1)->SetCamInfo(*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HiC_Get4kby4kImage(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HiC *arg1 = (HiC *) 0 ;
  std::vector< uint16_t > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< uint16_t > data2 ;
  
  {
    arg2 = &data2;
  }
  if (SWIG_GetArgs(interp, objc, objv,"o:HiC_Get4kby4kImage self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_HiC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HiC_Get4kby4kImage" "', argument " "1"" of type '" "HiC *""'"); 
  }
  arg1 = reinterpret_cast< HiC * >(argp1);
  {
    try {
      (arg1)->Get4kby4kImage(*arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_HiC(void *obj) {
HiC *arg1 = (HiC *) obj;
delete arg1;
}
static swig_method swig_HiC_methods[] = {
    {"SetSerialNumber", _wrap_HiC_SetSerialNumber}, 
    {"GetCamInfo", _wrap_HiC_GetCamInfo}, 
    {"SetCamInfo", _wrap_HiC_SetCamInfo}, 
    {"Get4kby4kImage", _wrap_HiC_Get4kby4kImage}, 
    {0,0}
};
static swig_attribute swig_HiC_attributes[] = {
    {0,0,0}
};
static swig_class *swig_HiC_bases[] = {0,0};
static const char * swig_HiC_base_names[] = {"Quad *",0};
static swig_class _wrap_class_HiC = { "HiC", &SWIGTYPE_p_HiC,_wrap_new_HiC, swig_delete_HiC, swig_HiC_methods, swig_HiC_attributes, swig_HiC_bases,swig_HiC_base_names, &swig_module };

static swig_command_info swig_commands[] = {
    { SWIG_prefix "cdata", (swig_wrapper_func) _wrap_cdata, NULL},
    { SWIG_prefix "memmove", (swig_wrapper_func) _wrap_memmove, NULL},
    { SWIG_prefix "new_ushortArray", (swig_wrapper_func) _wrap_new_ushortArray, NULL},
    { SWIG_prefix "delete_ushortArray", (swig_wrapper_func) _wrap_delete_ushortArray, NULL},
    { SWIG_prefix "ushortArray_getitem", (swig_wrapper_func) _wrap_ushortArray_getitem, NULL},
    { SWIG_prefix "ushortArray_setitem", (swig_wrapper_func) _wrap_ushortArray_setitem, NULL},
    { SWIG_prefix "ushortArray_cast", (swig_wrapper_func) _wrap_ushortArray_cast, NULL},
    { SWIG_prefix "ushortArray_frompointer", (swig_wrapper_func) _wrap_ushortArray_frompointer, NULL},
    { SWIG_prefix "ushortArray", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_ushortArray},
    { SWIG_prefix "delete_ApogeeCam", (swig_wrapper_func) _wrap_delete_ApogeeCam, NULL},
    { SWIG_prefix "ApogeeCam_Reset", (swig_wrapper_func) _wrap_ApogeeCam_Reset, NULL},
    { SWIG_prefix "ApogeeCam_ReadReg", (swig_wrapper_func) _wrap_ApogeeCam_ReadReg, NULL},
    { SWIG_prefix "ApogeeCam_WriteReg", (swig_wrapper_func) _wrap_ApogeeCam_WriteReg, NULL},
    { SWIG_prefix "ApogeeCam_SetRoiNumRows", (swig_wrapper_func) _wrap_ApogeeCam_SetRoiNumRows, NULL},
    { SWIG_prefix "ApogeeCam_SetRoiNumCols", (swig_wrapper_func) _wrap_ApogeeCam_SetRoiNumCols, NULL},
    { SWIG_prefix "ApogeeCam_GetRoiNumRows", (swig_wrapper_func) _wrap_ApogeeCam_GetRoiNumRows, NULL},
    { SWIG_prefix "ApogeeCam_GetRoiNumCols", (swig_wrapper_func) _wrap_ApogeeCam_GetRoiNumCols, NULL},
    { SWIG_prefix "ApogeeCam_SetRoiStartRow", (swig_wrapper_func) _wrap_ApogeeCam_SetRoiStartRow, NULL},
    { SWIG_prefix "ApogeeCam_SetRoiStartCol", (swig_wrapper_func) _wrap_ApogeeCam_SetRoiStartCol, NULL},
    { SWIG_prefix "ApogeeCam_GetRoiStartRow", (swig_wrapper_func) _wrap_ApogeeCam_GetRoiStartRow, NULL},
    { SWIG_prefix "ApogeeCam_GetRoiStartCol", (swig_wrapper_func) _wrap_ApogeeCam_GetRoiStartCol, NULL},
    { SWIG_prefix "ApogeeCam_SetRoiBinRow", (swig_wrapper_func) _wrap_ApogeeCam_SetRoiBinRow, NULL},
    { SWIG_prefix "ApogeeCam_GetRoiBinRow", (swig_wrapper_func) _wrap_ApogeeCam_GetRoiBinRow, NULL},
    { SWIG_prefix "ApogeeCam_SetRoiBinCol", (swig_wrapper_func) _wrap_ApogeeCam_SetRoiBinCol, NULL},
    { SWIG_prefix "ApogeeCam_GetRoiBinCol", (swig_wrapper_func) _wrap_ApogeeCam_GetRoiBinCol, NULL},
    { SWIG_prefix "ApogeeCam_GetFirmwareRev", (swig_wrapper_func) _wrap_ApogeeCam_GetFirmwareRev, NULL},
    { SWIG_prefix "ApogeeCam_SetImageCount", (swig_wrapper_func) _wrap_ApogeeCam_SetImageCount, NULL},
    { SWIG_prefix "ApogeeCam_GetImageCount", (swig_wrapper_func) _wrap_ApogeeCam_GetImageCount, NULL},
    { SWIG_prefix "ApogeeCam_GetImgSequenceCount", (swig_wrapper_func) _wrap_ApogeeCam_GetImgSequenceCount, NULL},
    { SWIG_prefix "ApogeeCam_SetSequenceDelay", (swig_wrapper_func) _wrap_ApogeeCam_SetSequenceDelay, NULL},
    { SWIG_prefix "ApogeeCam_GetSequenceDelay", (swig_wrapper_func) _wrap_ApogeeCam_GetSequenceDelay, NULL},
    { SWIG_prefix "ApogeeCam_SetVariableSequenceDelay", (swig_wrapper_func) _wrap_ApogeeCam_SetVariableSequenceDelay, NULL},
    { SWIG_prefix "ApogeeCam_GetVariableSequenceDelay", (swig_wrapper_func) _wrap_ApogeeCam_GetVariableSequenceDelay, NULL},
    { SWIG_prefix "ApogeeCam_SetTdiRate", (swig_wrapper_func) _wrap_ApogeeCam_SetTdiRate, NULL},
    { SWIG_prefix "ApogeeCam_GetTdiRate", (swig_wrapper_func) _wrap_ApogeeCam_GetTdiRate, NULL},
    { SWIG_prefix "ApogeeCam_SetTdiRows", (swig_wrapper_func) _wrap_ApogeeCam_SetTdiRows, NULL},
    { SWIG_prefix "ApogeeCam_GetTdiRows", (swig_wrapper_func) _wrap_ApogeeCam_GetTdiRows, NULL},
    { SWIG_prefix "ApogeeCam_GetTdiCounter", (swig_wrapper_func) _wrap_ApogeeCam_GetTdiCounter, NULL},
    { SWIG_prefix "ApogeeCam_SetTdiBinningRows", (swig_wrapper_func) _wrap_ApogeeCam_SetTdiBinningRows, NULL},
    { SWIG_prefix "ApogeeCam_GetTdiBinningRows", (swig_wrapper_func) _wrap_ApogeeCam_GetTdiBinningRows, NULL},
    { SWIG_prefix "ApogeeCam_SetKineticsSectionHeight", (swig_wrapper_func) _wrap_ApogeeCam_SetKineticsSectionHeight, NULL},
    { SWIG_prefix "ApogeeCam_GetKineticsSectionHeight", (swig_wrapper_func) _wrap_ApogeeCam_GetKineticsSectionHeight, NULL},
    { SWIG_prefix "ApogeeCam_SetKineticsSections", (swig_wrapper_func) _wrap_ApogeeCam_SetKineticsSections, NULL},
    { SWIG_prefix "ApogeeCam_GetKineticsSections", (swig_wrapper_func) _wrap_ApogeeCam_GetKineticsSections, NULL},
    { SWIG_prefix "ApogeeCam_SetKineticsShiftInterval", (swig_wrapper_func) _wrap_ApogeeCam_SetKineticsShiftInterval, NULL},
    { SWIG_prefix "ApogeeCam_GetKineticsShiftInterval", (swig_wrapper_func) _wrap_ApogeeCam_GetKineticsShiftInterval, NULL},
    { SWIG_prefix "ApogeeCam_SetShutterStrobePosition", (swig_wrapper_func) _wrap_ApogeeCam_SetShutterStrobePosition, NULL},
    { SWIG_prefix "ApogeeCam_GetShutterStrobePosition", (swig_wrapper_func) _wrap_ApogeeCam_GetShutterStrobePosition, NULL},
    { SWIG_prefix "ApogeeCam_SetShutterStrobePeriod", (swig_wrapper_func) _wrap_ApogeeCam_SetShutterStrobePeriod, NULL},
    { SWIG_prefix "ApogeeCam_GetShutterStrobePeriod", (swig_wrapper_func) _wrap_ApogeeCam_GetShutterStrobePeriod, NULL},
    { SWIG_prefix "ApogeeCam_SetShutterCloseDelay", (swig_wrapper_func) _wrap_ApogeeCam_SetShutterCloseDelay, NULL},
    { SWIG_prefix "ApogeeCam_GetShutterCloseDelay", (swig_wrapper_func) _wrap_ApogeeCam_GetShutterCloseDelay, NULL},
    { SWIG_prefix "ApogeeCam_SetCoolerBackoffPoint", (swig_wrapper_func) _wrap_ApogeeCam_SetCoolerBackoffPoint, NULL},
    { SWIG_prefix "ApogeeCam_GetCoolerBackoffPoint", (swig_wrapper_func) _wrap_ApogeeCam_GetCoolerBackoffPoint, NULL},
    { SWIG_prefix "ApogeeCam_SetCoolerSetPoint", (swig_wrapper_func) _wrap_ApogeeCam_SetCoolerSetPoint, NULL},
    { SWIG_prefix "ApogeeCam_GetCoolerSetPoint", (swig_wrapper_func) _wrap_ApogeeCam_GetCoolerSetPoint, NULL},
    { SWIG_prefix "ApogeeCam_GetMacAddress", (swig_wrapper_func) _wrap_ApogeeCam_GetMacAddress, NULL},
    { SWIG_prefix "ApogeeCam_GetCameraMode", (swig_wrapper_func) _wrap_ApogeeCam_GetCameraMode, NULL},
    { SWIG_prefix "ApogeeCam_SetCameraMode", (swig_wrapper_func) _wrap_ApogeeCam_SetCameraMode, NULL},
    { SWIG_prefix "ApogeeCam_SetFastSequence", (swig_wrapper_func) _wrap_ApogeeCam_SetFastSequence, NULL},
    { SWIG_prefix "ApogeeCam_IsFastSequenceOn", (swig_wrapper_func) _wrap_ApogeeCam_IsFastSequenceOn, NULL},
    { SWIG_prefix "ApogeeCam_SetBulkDownload", (swig_wrapper_func) _wrap_ApogeeCam_SetBulkDownload, NULL},
    { SWIG_prefix "ApogeeCam_IsBulkDownloadOn", (swig_wrapper_func) _wrap_ApogeeCam_IsBulkDownloadOn, NULL},
    { SWIG_prefix "ApogeeCam_SetIoPortAssignment", (swig_wrapper_func) _wrap_ApogeeCam_SetIoPortAssignment, NULL},
    { SWIG_prefix "ApogeeCam_GetIoPortAssignment", (swig_wrapper_func) _wrap_ApogeeCam_GetIoPortAssignment, NULL},
    { SWIG_prefix "ApogeeCam_SetIoPortBlankingBits", (swig_wrapper_func) _wrap_ApogeeCam_SetIoPortBlankingBits, NULL},
    { SWIG_prefix "ApogeeCam_GetIoPortBlankingBits", (swig_wrapper_func) _wrap_ApogeeCam_GetIoPortBlankingBits, NULL},
    { SWIG_prefix "ApogeeCam_SetIoPortDirection", (swig_wrapper_func) _wrap_ApogeeCam_SetIoPortDirection, NULL},
    { SWIG_prefix "ApogeeCam_GetIoPortDirection", (swig_wrapper_func) _wrap_ApogeeCam_GetIoPortDirection, NULL},
    { SWIG_prefix "ApogeeCam_SetIoPortData", (swig_wrapper_func) _wrap_ApogeeCam_SetIoPortData, NULL},
    { SWIG_prefix "ApogeeCam_GetIoPortData", (swig_wrapper_func) _wrap_ApogeeCam_GetIoPortData, NULL},
    { SWIG_prefix "ApogeeCam_SetPreFlash", (swig_wrapper_func) _wrap_ApogeeCam_SetPreFlash, NULL},
    { SWIG_prefix "ApogeeCam_GetPreFlash", (swig_wrapper_func) _wrap_ApogeeCam_GetPreFlash, NULL},
    { SWIG_prefix "ApogeeCam_SetExternalTrigger", (swig_wrapper_func) _wrap_ApogeeCam_SetExternalTrigger, NULL},
    { SWIG_prefix "ApogeeCam_IsTriggerNormEachOn", (swig_wrapper_func) _wrap_ApogeeCam_IsTriggerNormEachOn, NULL},
    { SWIG_prefix "ApogeeCam_IsTriggerNormGroupOn", (swig_wrapper_func) _wrap_ApogeeCam_IsTriggerNormGroupOn, NULL},
    { SWIG_prefix "ApogeeCam_IsTriggerTdiKinEachOn", (swig_wrapper_func) _wrap_ApogeeCam_IsTriggerTdiKinEachOn, NULL},
    { SWIG_prefix "ApogeeCam_IsTriggerTdiKinGroupOn", (swig_wrapper_func) _wrap_ApogeeCam_IsTriggerTdiKinGroupOn, NULL},
    { SWIG_prefix "ApogeeCam_IsTriggerExternalShutterOn", (swig_wrapper_func) _wrap_ApogeeCam_IsTriggerExternalShutterOn, NULL},
    { SWIG_prefix "ApogeeCam_IsTriggerExternalReadoutOn", (swig_wrapper_func) _wrap_ApogeeCam_IsTriggerExternalReadoutOn, NULL},
    { SWIG_prefix "ApogeeCam_SetShutterState", (swig_wrapper_func) _wrap_ApogeeCam_SetShutterState, NULL},
    { SWIG_prefix "ApogeeCam_GetShutterState", (swig_wrapper_func) _wrap_ApogeeCam_GetShutterState, NULL},
    { SWIG_prefix "ApogeeCam_IsShutterForcedOpen", (swig_wrapper_func) _wrap_ApogeeCam_IsShutterForcedOpen, NULL},
    { SWIG_prefix "ApogeeCam_IsShutterForcedClosed", (swig_wrapper_func) _wrap_ApogeeCam_IsShutterForcedClosed, NULL},
    { SWIG_prefix "ApogeeCam_IsShutterOpen", (swig_wrapper_func) _wrap_ApogeeCam_IsShutterOpen, NULL},
    { SWIG_prefix "ApogeeCam_SetShutterAmpCtrl", (swig_wrapper_func) _wrap_ApogeeCam_SetShutterAmpCtrl, NULL},
    { SWIG_prefix "ApogeeCam_IsShutterAmpCtrlOn", (swig_wrapper_func) _wrap_ApogeeCam_IsShutterAmpCtrlOn, NULL},
    { SWIG_prefix "ApogeeCam_Init", (swig_wrapper_func) _wrap_ApogeeCam_Init, NULL},
    { SWIG_prefix "ApogeeCam_SetCooler", (swig_wrapper_func) _wrap_ApogeeCam_SetCooler, NULL},
    { SWIG_prefix "ApogeeCam_GetCoolerStatus", (swig_wrapper_func) _wrap_ApogeeCam_GetCoolerStatus, NULL},
    { SWIG_prefix "ApogeeCam_IsCoolerOn", (swig_wrapper_func) _wrap_ApogeeCam_IsCoolerOn, NULL},
    { SWIG_prefix "ApogeeCam_GetTempCcd", (swig_wrapper_func) _wrap_ApogeeCam_GetTempCcd, NULL},
    { SWIG_prefix "ApogeeCam_GetTempHeatsink", (swig_wrapper_func) _wrap_ApogeeCam_GetTempHeatsink, NULL},
    { SWIG_prefix "ApogeeCam_SetCcdAdcResolution", (swig_wrapper_func) _wrap_ApogeeCam_SetCcdAdcResolution, NULL},
    { SWIG_prefix "ApogeeCam_GetCcdAdcResolution", (swig_wrapper_func) _wrap_ApogeeCam_GetCcdAdcResolution, NULL},
    { SWIG_prefix "ApogeeCam_SetCcdAdcSpeed", (swig_wrapper_func) _wrap_ApogeeCam_SetCcdAdcSpeed, NULL},
    { SWIG_prefix "ApogeeCam_GetCcdAdcSpeed", (swig_wrapper_func) _wrap_ApogeeCam_GetCcdAdcSpeed, NULL},
    { SWIG_prefix "ApogeeCam_GetMaxBinCols", (swig_wrapper_func) _wrap_ApogeeCam_GetMaxBinCols, NULL},
    { SWIG_prefix "ApogeeCam_GetMaxBinRows", (swig_wrapper_func) _wrap_ApogeeCam_GetMaxBinRows, NULL},
    { SWIG_prefix "ApogeeCam_GetMaxImgCols", (swig_wrapper_func) _wrap_ApogeeCam_GetMaxImgCols, NULL},
    { SWIG_prefix "ApogeeCam_GetMaxImgRows", (swig_wrapper_func) _wrap_ApogeeCam_GetMaxImgRows, NULL},
    { SWIG_prefix "ApogeeCam_GetTotalRows", (swig_wrapper_func) _wrap_ApogeeCam_GetTotalRows, NULL},
    { SWIG_prefix "ApogeeCam_GetTotalCols", (swig_wrapper_func) _wrap_ApogeeCam_GetTotalCols, NULL},
    { SWIG_prefix "ApogeeCam_GetNumOverscanCols", (swig_wrapper_func) _wrap_ApogeeCam_GetNumOverscanCols, NULL},
    { SWIG_prefix "ApogeeCam_IsInterline", (swig_wrapper_func) _wrap_ApogeeCam_IsInterline, NULL},
    { SWIG_prefix "ApogeeCam_GetPlatformType", (swig_wrapper_func) _wrap_ApogeeCam_GetPlatformType, NULL},
    { SWIG_prefix "ApogeeCam_SetLedAState", (swig_wrapper_func) _wrap_ApogeeCam_SetLedAState, NULL},
    { SWIG_prefix "ApogeeCam_GetLedAState", (swig_wrapper_func) _wrap_ApogeeCam_GetLedAState, NULL},
    { SWIG_prefix "ApogeeCam_SetLedBState", (swig_wrapper_func) _wrap_ApogeeCam_SetLedBState, NULL},
    { SWIG_prefix "ApogeeCam_GetLedBState", (swig_wrapper_func) _wrap_ApogeeCam_GetLedBState, NULL},
    { SWIG_prefix "ApogeeCam_SetLedMode", (swig_wrapper_func) _wrap_ApogeeCam_SetLedMode, NULL},
    { SWIG_prefix "ApogeeCam_GetLedMode", (swig_wrapper_func) _wrap_ApogeeCam_GetLedMode, NULL},
    { SWIG_prefix "ApogeeCam_GetInfo", (swig_wrapper_func) _wrap_ApogeeCam_GetInfo, NULL},
    { SWIG_prefix "ApogeeCam_GetModel", (swig_wrapper_func) _wrap_ApogeeCam_GetModel, NULL},
    { SWIG_prefix "ApogeeCam_GetSensor", (swig_wrapper_func) _wrap_ApogeeCam_GetSensor, NULL},
    { SWIG_prefix "ApogeeCam_SetFlushCommands", (swig_wrapper_func) _wrap_ApogeeCam_SetFlushCommands, NULL},
    { SWIG_prefix "ApogeeCam_AreFlushCmdsDisabled", (swig_wrapper_func) _wrap_ApogeeCam_AreFlushCmdsDisabled, NULL},
    { SWIG_prefix "ApogeeCam_SetPostExposeFlushing", (swig_wrapper_func) _wrap_ApogeeCam_SetPostExposeFlushing, NULL},
    { SWIG_prefix "ApogeeCam_IsPostExposeFlushingDisabled", (swig_wrapper_func) _wrap_ApogeeCam_IsPostExposeFlushingDisabled, NULL},
    { SWIG_prefix "ApogeeCam_GetPixelWidth", (swig_wrapper_func) _wrap_ApogeeCam_GetPixelWidth, NULL},
    { SWIG_prefix "ApogeeCam_GetPixelHeight", (swig_wrapper_func) _wrap_ApogeeCam_GetPixelHeight, NULL},
    { SWIG_prefix "ApogeeCam_GetMinExposureTime", (swig_wrapper_func) _wrap_ApogeeCam_GetMinExposureTime, NULL},
    { SWIG_prefix "ApogeeCam_GetMaxExposureTime", (swig_wrapper_func) _wrap_ApogeeCam_GetMaxExposureTime, NULL},
    { SWIG_prefix "ApogeeCam_IsColor", (swig_wrapper_func) _wrap_ApogeeCam_IsColor, NULL},
    { SWIG_prefix "ApogeeCam_IsCoolingSupported", (swig_wrapper_func) _wrap_ApogeeCam_IsCoolingSupported, NULL},
    { SWIG_prefix "ApogeeCam_IsCoolingRegulated", (swig_wrapper_func) _wrap_ApogeeCam_IsCoolingRegulated, NULL},
    { SWIG_prefix "ApogeeCam_GetInputVoltage", (swig_wrapper_func) _wrap_ApogeeCam_GetInputVoltage, NULL},
    { SWIG_prefix "ApogeeCam_GetInterfaceType", (swig_wrapper_func) _wrap_ApogeeCam_GetInterfaceType, NULL},
    { SWIG_prefix "ApogeeCam_GetUsbVendorInfo", (swig_wrapper_func) _wrap_ApogeeCam_GetUsbVendorInfo, NULL},
    { SWIG_prefix "ApogeeCam_IsCCD", (swig_wrapper_func) _wrap_ApogeeCam_IsCCD, NULL},
    { SWIG_prefix "ApogeeCam_PauseTimer", (swig_wrapper_func) _wrap_ApogeeCam_PauseTimer, NULL},
    { SWIG_prefix "ApogeeCam_IsSerialASupported", (swig_wrapper_func) _wrap_ApogeeCam_IsSerialASupported, NULL},
    { SWIG_prefix "ApogeeCam_IsSerialBSupported", (swig_wrapper_func) _wrap_ApogeeCam_IsSerialBSupported, NULL},
    { SWIG_prefix "ApogeeCam_SetFlushBinningRows", (swig_wrapper_func) _wrap_ApogeeCam_SetFlushBinningRows, NULL},
    { SWIG_prefix "ApogeeCam_GetFlushBinningRows", (swig_wrapper_func) _wrap_ApogeeCam_GetFlushBinningRows, NULL},
    { SWIG_prefix "ApogeeCam_IsOverscanDigitized", (swig_wrapper_func) _wrap_ApogeeCam_IsOverscanDigitized, NULL},
    { SWIG_prefix "ApogeeCam_SetDigitizeOverscan", (swig_wrapper_func) _wrap_ApogeeCam_SetDigitizeOverscan, NULL},
    { SWIG_prefix "ApogeeCam_SetAdcGain", (swig_wrapper_func) _wrap_ApogeeCam_SetAdcGain, NULL},
    { SWIG_prefix "ApogeeCam_GetAdcGain", (swig_wrapper_func) _wrap_ApogeeCam_GetAdcGain, NULL},
    { SWIG_prefix "ApogeeCam_SetAdcOffset", (swig_wrapper_func) _wrap_ApogeeCam_SetAdcOffset, NULL},
    { SWIG_prefix "ApogeeCam_GetAdcOffset", (swig_wrapper_func) _wrap_ApogeeCam_GetAdcOffset, NULL},
    { SWIG_prefix "ApogeeCam_IsInitialized", (swig_wrapper_func) _wrap_ApogeeCam_IsInitialized, NULL},
    { SWIG_prefix "ApogeeCam_IsConnected", (swig_wrapper_func) _wrap_ApogeeCam_IsConnected, NULL},
    { SWIG_prefix "ApogeeCam_SetAdSimMode", (swig_wrapper_func) _wrap_ApogeeCam_SetAdSimMode, NULL},
    { SWIG_prefix "ApogeeCam_IsAdSimModeOn", (swig_wrapper_func) _wrap_ApogeeCam_IsAdSimModeOn, NULL},
    { SWIG_prefix "ApogeeCam_SetLedBrightness", (swig_wrapper_func) _wrap_ApogeeCam_SetLedBrightness, NULL},
    { SWIG_prefix "ApogeeCam_GetLedBrightness", (swig_wrapper_func) _wrap_ApogeeCam_GetLedBrightness, NULL},
    { SWIG_prefix "ApogeeCam_GetDriverVersion", (swig_wrapper_func) _wrap_ApogeeCam_GetDriverVersion, NULL},
    { SWIG_prefix "ApogeeCam_GetUsbFirmwareVersion", (swig_wrapper_func) _wrap_ApogeeCam_GetUsbFirmwareVersion, NULL},
    { SWIG_prefix "ApogeeCam_GetSerialNumber", (swig_wrapper_func) _wrap_ApogeeCam_GetSerialNumber, NULL},
    { SWIG_prefix "ApogeeCam_CloseConnection", (swig_wrapper_func) _wrap_ApogeeCam_CloseConnection, NULL},
    { SWIG_prefix "ApogeeCam_OpenConnection", (swig_wrapper_func) _wrap_ApogeeCam_OpenConnection, NULL},
    { SWIG_prefix "ApogeeCam_StartExposure", (swig_wrapper_func) _wrap_ApogeeCam_StartExposure, NULL},
    { SWIG_prefix "ApogeeCam_GetStatus", (swig_wrapper_func) _wrap_ApogeeCam_GetStatus, NULL},
    { SWIG_prefix "ApogeeCam_GetImagingStatus", (swig_wrapper_func) _wrap_ApogeeCam_GetImagingStatus, NULL},
    { SWIG_prefix "ApogeeCam_GetImage", (swig_wrapper_func) _wrap_ApogeeCam_GetImage, NULL},
    { SWIG_prefix "ApogeeCam_StopExposure", (swig_wrapper_func) _wrap_ApogeeCam_StopExposure, NULL},
    { SWIG_prefix "ApogeeCam_GetAvailableMemory", (swig_wrapper_func) _wrap_ApogeeCam_GetAvailableMemory, NULL},
    { SWIG_prefix "ApogeeCam_GetNumAds", (swig_wrapper_func) _wrap_ApogeeCam_GetNumAds, NULL},
    { SWIG_prefix "ApogeeCam_GetNumAdChannels", (swig_wrapper_func) _wrap_ApogeeCam_GetNumAdChannels, NULL},
    { SWIG_prefix "ApogeeCam_GetCoolerDrive", (swig_wrapper_func) _wrap_ApogeeCam_GetCoolerDrive, NULL},
    { SWIG_prefix "ApogeeCam_SetFanMode", (swig_wrapper_func) _wrap_ApogeeCam_SetFanMode, NULL},
    { SWIG_prefix "ApogeeCam_GetFanMode", (swig_wrapper_func) _wrap_ApogeeCam_GetFanMode, NULL},
    { SWIG_prefix "ApogeeCam", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_ApogeeCam},
    { SWIG_prefix "delete_CamGen2Base", (swig_wrapper_func) _wrap_delete_CamGen2Base, NULL},
    { SWIG_prefix "CamGen2Base_GetStatus", (swig_wrapper_func) _wrap_CamGen2Base_GetStatus, NULL},
    { SWIG_prefix "CamGen2Base_GetImagingStatus", (swig_wrapper_func) _wrap_CamGen2Base_GetImagingStatus, NULL},
    { SWIG_prefix "CamGen2Base_GetImage", (swig_wrapper_func) _wrap_CamGen2Base_GetImage, NULL},
    { SWIG_prefix "CamGen2Base_StopExposure", (swig_wrapper_func) _wrap_CamGen2Base_StopExposure, NULL},
    { SWIG_prefix "CamGen2Base_GetAvailableMemory", (swig_wrapper_func) _wrap_CamGen2Base_GetAvailableMemory, NULL},
    { SWIG_prefix "CamGen2Base_GetNumAds", (swig_wrapper_func) _wrap_CamGen2Base_GetNumAds, NULL},
    { SWIG_prefix "CamGen2Base_GetCoolerDrive", (swig_wrapper_func) _wrap_CamGen2Base_GetCoolerDrive, NULL},
    { SWIG_prefix "CamGen2Base_SetFanMode", (swig_wrapper_func) _wrap_CamGen2Base_SetFanMode, NULL},
    { SWIG_prefix "CamGen2Base_GetFanMode", (swig_wrapper_func) _wrap_CamGen2Base_GetFanMode, NULL},
    { SWIG_prefix "CamGen2Base", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_CamGen2Base},
    { SWIG_prefix "new_Alta", (swig_wrapper_func) _wrap_new_Alta, NULL},
    { SWIG_prefix "delete_Alta", (swig_wrapper_func) _wrap_delete_Alta, NULL},
    { SWIG_prefix "Alta_OpenConnection", (swig_wrapper_func) _wrap_Alta_OpenConnection, NULL},
    { SWIG_prefix "Alta_StartExposure", (swig_wrapper_func) _wrap_Alta_StartExposure, NULL},
    { SWIG_prefix "Alta_GetStatus", (swig_wrapper_func) _wrap_Alta_GetStatus, NULL},
    { SWIG_prefix "Alta_GetImagingStatus", (swig_wrapper_func) _wrap_Alta_GetImagingStatus, NULL},
    { SWIG_prefix "Alta_GetImage", (swig_wrapper_func) _wrap_Alta_GetImage, NULL},
    { SWIG_prefix "Alta_StopExposure", (swig_wrapper_func) _wrap_Alta_StopExposure, NULL},
    { SWIG_prefix "Alta_GetAvailableMemory", (swig_wrapper_func) _wrap_Alta_GetAvailableMemory, NULL},
    { SWIG_prefix "Alta_SetCcdAdc12BitGain", (swig_wrapper_func) _wrap_Alta_SetCcdAdc12BitGain, NULL},
    { SWIG_prefix "Alta_SetCcdAdc12BitOffset", (swig_wrapper_func) _wrap_Alta_SetCcdAdc12BitOffset, NULL},
    { SWIG_prefix "Alta_GetCcdAdc12BitGain", (swig_wrapper_func) _wrap_Alta_GetCcdAdc12BitGain, NULL},
    { SWIG_prefix "Alta_GetCcdAdc12BitOffset", (swig_wrapper_func) _wrap_Alta_GetCcdAdc12BitOffset, NULL},
    { SWIG_prefix "Alta_GetCcdAdc16BitGain", (swig_wrapper_func) _wrap_Alta_GetCcdAdc16BitGain, NULL},
    { SWIG_prefix "Alta_GetNumAds", (swig_wrapper_func) _wrap_Alta_GetNumAds, NULL},
    { SWIG_prefix "Alta_GetNumAdChannels", (swig_wrapper_func) _wrap_Alta_GetNumAdChannels, NULL},
    { SWIG_prefix "Alta_GetCoolerDrive", (swig_wrapper_func) _wrap_Alta_GetCoolerDrive, NULL},
    { SWIG_prefix "Alta_SetFanMode", (swig_wrapper_func) _wrap_Alta_SetFanMode, NULL},
    { SWIG_prefix "Alta_GetFanMode", (swig_wrapper_func) _wrap_Alta_GetFanMode, NULL},
    { SWIG_prefix "Alta", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_Alta},
    { SWIG_prefix "new_ApogeeFilterWheel", (swig_wrapper_func) _wrap_new_ApogeeFilterWheel, NULL},
    { SWIG_prefix "delete_ApogeeFilterWheel", (swig_wrapper_func) _wrap_delete_ApogeeFilterWheel, NULL},
    { SWIG_prefix "ApogeeFilterWheel_Init", (swig_wrapper_func) _wrap_ApogeeFilterWheel_Init, NULL},
    { SWIG_prefix "ApogeeFilterWheel_Close", (swig_wrapper_func) _wrap_ApogeeFilterWheel_Close, NULL},
    { SWIG_prefix "ApogeeFilterWheel_GetVendorId", (swig_wrapper_func) _wrap_ApogeeFilterWheel_GetVendorId, NULL},
    { SWIG_prefix "ApogeeFilterWheel_GetProductId", (swig_wrapper_func) _wrap_ApogeeFilterWheel_GetProductId, NULL},
    { SWIG_prefix "ApogeeFilterWheel_GetDeviceId", (swig_wrapper_func) _wrap_ApogeeFilterWheel_GetDeviceId, NULL},
    { SWIG_prefix "ApogeeFilterWheel_GetUsbFirmwareRev", (swig_wrapper_func) _wrap_ApogeeFilterWheel_GetUsbFirmwareRev, NULL},
    { SWIG_prefix "ApogeeFilterWheel_GetType", (swig_wrapper_func) _wrap_ApogeeFilterWheel_GetType, NULL},
    { SWIG_prefix "ApogeeFilterWheel_GetName", (swig_wrapper_func) _wrap_ApogeeFilterWheel_GetName, NULL},
    { SWIG_prefix "ApogeeFilterWheel_GetStatus", (swig_wrapper_func) _wrap_ApogeeFilterWheel_GetStatus, NULL},
    { SWIG_prefix "ApogeeFilterWheel_GetMaxPositions", (swig_wrapper_func) _wrap_ApogeeFilterWheel_GetMaxPositions, NULL},
    { SWIG_prefix "ApogeeFilterWheel_SetPosition", (swig_wrapper_func) _wrap_ApogeeFilterWheel_SetPosition, NULL},
    { SWIG_prefix "ApogeeFilterWheel_GetPosition", (swig_wrapper_func) _wrap_ApogeeFilterWheel_GetPosition, NULL},
    { SWIG_prefix "ApogeeFilterWheel", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_ApogeeFilterWheel},
    { SWIG_prefix "new_Ascent", (swig_wrapper_func) _wrap_new_Ascent, NULL},
    { SWIG_prefix "Ascent_OpenConnection", (swig_wrapper_func) _wrap_Ascent_OpenConnection, NULL},
    { SWIG_prefix "delete_Ascent", (swig_wrapper_func) _wrap_delete_Ascent, NULL},
    { SWIG_prefix "Ascent_FilterWheelOpen", (swig_wrapper_func) _wrap_Ascent_FilterWheelOpen, NULL},
    { SWIG_prefix "Ascent_FilterWheelClose", (swig_wrapper_func) _wrap_Ascent_FilterWheelClose, NULL},
    { SWIG_prefix "Ascent_SetFilterWheelPos", (swig_wrapper_func) _wrap_Ascent_SetFilterWheelPos, NULL},
    { SWIG_prefix "Ascent_GetFilterWheelPos", (swig_wrapper_func) _wrap_Ascent_GetFilterWheelPos, NULL},
    { SWIG_prefix "Ascent_GetFilterWheelStatus", (swig_wrapper_func) _wrap_Ascent_GetFilterWheelStatus, NULL},
    { SWIG_prefix "Ascent_GetFilterWheelType", (swig_wrapper_func) _wrap_Ascent_GetFilterWheelType, NULL},
    { SWIG_prefix "Ascent_GetFilterWheelName", (swig_wrapper_func) _wrap_Ascent_GetFilterWheelName, NULL},
    { SWIG_prefix "Ascent_GetFilterWheelMaxPositions", (swig_wrapper_func) _wrap_Ascent_GetFilterWheelMaxPositions, NULL},
    { SWIG_prefix "Ascent_StartExposure", (swig_wrapper_func) _wrap_Ascent_StartExposure, NULL},
    { SWIG_prefix "Ascent_GetNumAdChannels", (swig_wrapper_func) _wrap_Ascent_GetNumAdChannels, NULL},
    { SWIG_prefix "Ascent", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_Ascent},
    { SWIG_prefix "StrDb_FactorySn_set", (swig_wrapper_func) _wrap_StrDb_FactorySn_set, NULL},
    { SWIG_prefix "StrDb_FactorySn_get", (swig_wrapper_func) _wrap_StrDb_FactorySn_get, NULL},
    { SWIG_prefix "StrDb_CustomerSn_set", (swig_wrapper_func) _wrap_StrDb_CustomerSn_set, NULL},
    { SWIG_prefix "StrDb_CustomerSn_get", (swig_wrapper_func) _wrap_StrDb_CustomerSn_get, NULL},
    { SWIG_prefix "StrDb_Id_set", (swig_wrapper_func) _wrap_StrDb_Id_set, NULL},
    { SWIG_prefix "StrDb_Id_get", (swig_wrapper_func) _wrap_StrDb_Id_get, NULL},
    { SWIG_prefix "StrDb_Platform_set", (swig_wrapper_func) _wrap_StrDb_Platform_set, NULL},
    { SWIG_prefix "StrDb_Platform_get", (swig_wrapper_func) _wrap_StrDb_Platform_get, NULL},
    { SWIG_prefix "StrDb_PartNum_set", (swig_wrapper_func) _wrap_StrDb_PartNum_set, NULL},
    { SWIG_prefix "StrDb_PartNum_get", (swig_wrapper_func) _wrap_StrDb_PartNum_get, NULL},
    { SWIG_prefix "StrDb_Ccd_set", (swig_wrapper_func) _wrap_StrDb_Ccd_set, NULL},
    { SWIG_prefix "StrDb_Ccd_get", (swig_wrapper_func) _wrap_StrDb_Ccd_get, NULL},
    { SWIG_prefix "StrDb_CcdSn_set", (swig_wrapper_func) _wrap_StrDb_CcdSn_set, NULL},
    { SWIG_prefix "StrDb_CcdSn_get", (swig_wrapper_func) _wrap_StrDb_CcdSn_get, NULL},
    { SWIG_prefix "StrDb_CcdGrade_set", (swig_wrapper_func) _wrap_StrDb_CcdGrade_set, NULL},
    { SWIG_prefix "StrDb_CcdGrade_get", (swig_wrapper_func) _wrap_StrDb_CcdGrade_get, NULL},
    { SWIG_prefix "StrDb_ProcBoardRev_set", (swig_wrapper_func) _wrap_StrDb_ProcBoardRev_set, NULL},
    { SWIG_prefix "StrDb_ProcBoardRev_get", (swig_wrapper_func) _wrap_StrDb_ProcBoardRev_get, NULL},
    { SWIG_prefix "StrDb_DriveBoardRev_set", (swig_wrapper_func) _wrap_StrDb_DriveBoardRev_set, NULL},
    { SWIG_prefix "StrDb_DriveBoardRev_get", (swig_wrapper_func) _wrap_StrDb_DriveBoardRev_get, NULL},
    { SWIG_prefix "StrDb_Shutter_set", (swig_wrapper_func) _wrap_StrDb_Shutter_set, NULL},
    { SWIG_prefix "StrDb_Shutter_get", (swig_wrapper_func) _wrap_StrDb_Shutter_get, NULL},
    { SWIG_prefix "StrDb_WindowType_set", (swig_wrapper_func) _wrap_StrDb_WindowType_set, NULL},
    { SWIG_prefix "StrDb_WindowType_get", (swig_wrapper_func) _wrap_StrDb_WindowType_get, NULL},
    { SWIG_prefix "StrDb_MechCfg_set", (swig_wrapper_func) _wrap_StrDb_MechCfg_set, NULL},
    { SWIG_prefix "StrDb_MechCfg_get", (swig_wrapper_func) _wrap_StrDb_MechCfg_get, NULL},
    { SWIG_prefix "StrDb_MechRev_set", (swig_wrapper_func) _wrap_StrDb_MechRev_set, NULL},
    { SWIG_prefix "StrDb_MechRev_get", (swig_wrapper_func) _wrap_StrDb_MechRev_get, NULL},
    { SWIG_prefix "StrDb_CoolingType_set", (swig_wrapper_func) _wrap_StrDb_CoolingType_set, NULL},
    { SWIG_prefix "StrDb_CoolingType_get", (swig_wrapper_func) _wrap_StrDb_CoolingType_get, NULL},
    { SWIG_prefix "StrDb_FinishFront_set", (swig_wrapper_func) _wrap_StrDb_FinishFront_set, NULL},
    { SWIG_prefix "StrDb_FinishFront_get", (swig_wrapper_func) _wrap_StrDb_FinishFront_get, NULL},
    { SWIG_prefix "StrDb_FinishBack_set", (swig_wrapper_func) _wrap_StrDb_FinishBack_set, NULL},
    { SWIG_prefix "StrDb_FinishBack_get", (swig_wrapper_func) _wrap_StrDb_FinishBack_get, NULL},
    { SWIG_prefix "StrDb_MpiRev_set", (swig_wrapper_func) _wrap_StrDb_MpiRev_set, NULL},
    { SWIG_prefix "StrDb_MpiRev_get", (swig_wrapper_func) _wrap_StrDb_MpiRev_get, NULL},
    { SWIG_prefix "StrDb_TestDate_set", (swig_wrapper_func) _wrap_StrDb_TestDate_set, NULL},
    { SWIG_prefix "StrDb_TestDate_get", (swig_wrapper_func) _wrap_StrDb_TestDate_get, NULL},
    { SWIG_prefix "StrDb_TestedBy_set", (swig_wrapper_func) _wrap_StrDb_TestedBy_set, NULL},
    { SWIG_prefix "StrDb_TestedBy_get", (swig_wrapper_func) _wrap_StrDb_TestedBy_get, NULL},
    { SWIG_prefix "StrDb_TestedDllRev_set", (swig_wrapper_func) _wrap_StrDb_TestedDllRev_set, NULL},
    { SWIG_prefix "StrDb_TestedDllRev_get", (swig_wrapper_func) _wrap_StrDb_TestedDllRev_get, NULL},
    { SWIG_prefix "StrDb_TestedFwRev_set", (swig_wrapper_func) _wrap_StrDb_TestedFwRev_set, NULL},
    { SWIG_prefix "StrDb_TestedFwRev_get", (swig_wrapper_func) _wrap_StrDb_TestedFwRev_get, NULL},
    { SWIG_prefix "StrDb_Gain_set", (swig_wrapper_func) _wrap_StrDb_Gain_set, NULL},
    { SWIG_prefix "StrDb_Gain_get", (swig_wrapper_func) _wrap_StrDb_Gain_get, NULL},
    { SWIG_prefix "StrDb_Noise_set", (swig_wrapper_func) _wrap_StrDb_Noise_set, NULL},
    { SWIG_prefix "StrDb_Noise_get", (swig_wrapper_func) _wrap_StrDb_Noise_get, NULL},
    { SWIG_prefix "StrDb_Bias_set", (swig_wrapper_func) _wrap_StrDb_Bias_set, NULL},
    { SWIG_prefix "StrDb_Bias_get", (swig_wrapper_func) _wrap_StrDb_Bias_get, NULL},
    { SWIG_prefix "StrDb_TestTemp_set", (swig_wrapper_func) _wrap_StrDb_TestTemp_set, NULL},
    { SWIG_prefix "StrDb_TestTemp_get", (swig_wrapper_func) _wrap_StrDb_TestTemp_get, NULL},
    { SWIG_prefix "StrDb_DarkCount_set", (swig_wrapper_func) _wrap_StrDb_DarkCount_set, NULL},
    { SWIG_prefix "StrDb_DarkCount_get", (swig_wrapper_func) _wrap_StrDb_DarkCount_get, NULL},
    { SWIG_prefix "StrDb_DarkDuration_set", (swig_wrapper_func) _wrap_StrDb_DarkDuration_set, NULL},
    { SWIG_prefix "StrDb_DarkDuration_get", (swig_wrapper_func) _wrap_StrDb_DarkDuration_get, NULL},
    { SWIG_prefix "StrDb_DarkTemp_set", (swig_wrapper_func) _wrap_StrDb_DarkTemp_set, NULL},
    { SWIG_prefix "StrDb_DarkTemp_get", (swig_wrapper_func) _wrap_StrDb_DarkTemp_get, NULL},
    { SWIG_prefix "StrDb_CoolingDelta_set", (swig_wrapper_func) _wrap_StrDb_CoolingDelta_set, NULL},
    { SWIG_prefix "StrDb_CoolingDelta_get", (swig_wrapper_func) _wrap_StrDb_CoolingDelta_get, NULL},
    { SWIG_prefix "StrDb_Ad1Offset_set", (swig_wrapper_func) _wrap_StrDb_Ad1Offset_set, NULL},
    { SWIG_prefix "StrDb_Ad1Offset_get", (swig_wrapper_func) _wrap_StrDb_Ad1Offset_get, NULL},
    { SWIG_prefix "StrDb_Ad1Gain_set", (swig_wrapper_func) _wrap_StrDb_Ad1Gain_set, NULL},
    { SWIG_prefix "StrDb_Ad1Gain_get", (swig_wrapper_func) _wrap_StrDb_Ad1Gain_get, NULL},
    { SWIG_prefix "StrDb_Ad2Offset_set", (swig_wrapper_func) _wrap_StrDb_Ad2Offset_set, NULL},
    { SWIG_prefix "StrDb_Ad2Offset_get", (swig_wrapper_func) _wrap_StrDb_Ad2Offset_get, NULL},
    { SWIG_prefix "StrDb_Ad2Gain_set", (swig_wrapper_func) _wrap_StrDb_Ad2Gain_set, NULL},
    { SWIG_prefix "StrDb_Ad2Gain_get", (swig_wrapper_func) _wrap_StrDb_Ad2Gain_get, NULL},
    { SWIG_prefix "StrDb_Rma1_set", (swig_wrapper_func) _wrap_StrDb_Rma1_set, NULL},
    { SWIG_prefix "StrDb_Rma1_get", (swig_wrapper_func) _wrap_StrDb_Rma1_get, NULL},
    { SWIG_prefix "StrDb_Rma2_set", (swig_wrapper_func) _wrap_StrDb_Rma2_set, NULL},
    { SWIG_prefix "StrDb_Rma2_get", (swig_wrapper_func) _wrap_StrDb_Rma2_get, NULL},
    { SWIG_prefix "StrDb_Comment1_set", (swig_wrapper_func) _wrap_StrDb_Comment1_set, NULL},
    { SWIG_prefix "StrDb_Comment1_get", (swig_wrapper_func) _wrap_StrDb_Comment1_get, NULL},
    { SWIG_prefix "StrDb_Comment2_set", (swig_wrapper_func) _wrap_StrDb_Comment2_set, NULL},
    { SWIG_prefix "StrDb_Comment2_get", (swig_wrapper_func) _wrap_StrDb_Comment2_get, NULL},
    { SWIG_prefix "StrDb_Comment3_set", (swig_wrapper_func) _wrap_StrDb_Comment3_set, NULL},
    { SWIG_prefix "StrDb_Comment3_get", (swig_wrapper_func) _wrap_StrDb_Comment3_get, NULL},
    { SWIG_prefix "new_StrDb", (swig_wrapper_func) _wrap_new_StrDb, NULL},
    { SWIG_prefix "delete_StrDb", (swig_wrapper_func) _wrap_delete_StrDb, NULL},
    { SWIG_prefix "StrDb", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_CamInfo_StrDb},
    { SWIG_prefix "MkStrVectFromStrDb", (swig_wrapper_func) _wrap_MkStrVectFromStrDb, NULL},
    { SWIG_prefix "MkStrDbFromStrVect", (swig_wrapper_func) _wrap_MkStrDbFromStrVect, NULL},
    { SWIG_prefix "GetNoOpDb", (swig_wrapper_func) _wrap_GetNoOpDb, NULL},
    { SWIG_prefix "IsAlta", (swig_wrapper_func) _wrap_IsAlta, NULL},
    { SWIG_prefix "IsGen2Platform", (swig_wrapper_func) _wrap_IsGen2Platform, NULL},
    { SWIG_prefix "IsFirmwareRevGood", (swig_wrapper_func) _wrap_IsFirmwareRevGood, NULL},
    { SWIG_prefix "MaskRawId", (swig_wrapper_func) _wrap_MaskRawId, NULL},
    { SWIG_prefix "GetPlatformType", (swig_wrapper_func) _wrap_GetPlatformType, NULL},
    { SWIG_prefix "GetPlatformStr", (swig_wrapper_func) _wrap_GetPlatformStr, NULL},
    { SWIG_prefix "GetModelStr", (swig_wrapper_func) _wrap_GetModelStr, NULL},
    { SWIG_prefix "GetNoOpFirmwareRev", (swig_wrapper_func) _wrap_GetNoOpFirmwareRev, NULL},
    { SWIG_prefix "new_CameraStatusRegs", (swig_wrapper_func) _wrap_new_CameraStatusRegs, NULL},
    { SWIG_prefix "delete_CameraStatusRegs", (swig_wrapper_func) _wrap_delete_CameraStatusRegs, NULL},
    { SWIG_prefix "CameraStatusRegs_GetTempHeatSink", (swig_wrapper_func) _wrap_CameraStatusRegs_GetTempHeatSink, NULL},
    { SWIG_prefix "CameraStatusRegs_GetTempCcd", (swig_wrapper_func) _wrap_CameraStatusRegs_GetTempCcd, NULL},
    { SWIG_prefix "CameraStatusRegs_GetCoolerDrive", (swig_wrapper_func) _wrap_CameraStatusRegs_GetCoolerDrive, NULL},
    { SWIG_prefix "CameraStatusRegs_GetInputVoltage", (swig_wrapper_func) _wrap_CameraStatusRegs_GetInputVoltage, NULL},
    { SWIG_prefix "CameraStatusRegs_GetTdiCounter", (swig_wrapper_func) _wrap_CameraStatusRegs_GetTdiCounter, NULL},
    { SWIG_prefix "CameraStatusRegs_GetSequenceCounter", (swig_wrapper_func) _wrap_CameraStatusRegs_GetSequenceCounter, NULL},
    { SWIG_prefix "CameraStatusRegs_GetStatus", (swig_wrapper_func) _wrap_CameraStatusRegs_GetStatus, NULL},
    { SWIG_prefix "CameraStatusRegs_GetuFrame", (swig_wrapper_func) _wrap_CameraStatusRegs_GetuFrame, NULL},
    { SWIG_prefix "CameraStatusRegs_GetMostRecentFrame", (swig_wrapper_func) _wrap_CameraStatusRegs_GetMostRecentFrame, NULL},
    { SWIG_prefix "CameraStatusRegs_GetReadyFrame", (swig_wrapper_func) _wrap_CameraStatusRegs_GetReadyFrame, NULL},
    { SWIG_prefix "CameraStatusRegs_GetCurrentFrame", (swig_wrapper_func) _wrap_CameraStatusRegs_GetCurrentFrame, NULL},
    { SWIG_prefix "CameraStatusRegs_GetFetchCount", (swig_wrapper_func) _wrap_CameraStatusRegs_GetFetchCount, NULL},
    { SWIG_prefix "CameraStatusRegs_GetDataAvailFlag", (swig_wrapper_func) _wrap_CameraStatusRegs_GetDataAvailFlag, NULL},
    { SWIG_prefix "CameraStatusRegs_QueryStatusRegs", (swig_wrapper_func) _wrap_CameraStatusRegs_QueryStatusRegs, NULL},
    { SWIG_prefix "CameraStatusRegs_GetStatusStr", (swig_wrapper_func) _wrap_CameraStatusRegs_GetStatusStr, NULL},
    { SWIG_prefix "CameraStatusRegs_Update", (swig_wrapper_func) _wrap_CameraStatusRegs_Update, NULL},
    { SWIG_prefix "CameraStatusRegs", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_CameraStatusRegs},
    { SWIG_prefix "new_FindDeviceEthernet", (swig_wrapper_func) _wrap_new_FindDeviceEthernet, NULL},
    { SWIG_prefix "delete_FindDeviceEthernet", (swig_wrapper_func) _wrap_delete_FindDeviceEthernet, NULL},
    { SWIG_prefix "FindDeviceEthernet_Find", (swig_wrapper_func) _wrap_FindDeviceEthernet_Find, NULL},
    { SWIG_prefix "FindDeviceEthernet_GetElapsedSecs", (swig_wrapper_func) _wrap_FindDeviceEthernet_GetElapsedSecs, NULL},
    { SWIG_prefix "FindDeviceEthernet_GetTimeout", (swig_wrapper_func) _wrap_FindDeviceEthernet_GetTimeout, NULL},
    { SWIG_prefix "FindDeviceEthernet", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_FindDeviceEthernet},
    { SWIG_prefix "delete_FindDeviceUsb", (swig_wrapper_func) _wrap_delete_FindDeviceUsb, NULL},
    { SWIG_prefix "FindDeviceUsb_Find", (swig_wrapper_func) _wrap_FindDeviceUsb_Find, NULL},
    { SWIG_prefix "new_FindDeviceUsb", (swig_wrapper_func) _wrap_new_FindDeviceUsb, NULL},
    { SWIG_prefix "FindDeviceUsb", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_FindDeviceUsb},
    { SWIG_prefix "new_Gee", (swig_wrapper_func) _wrap_new_Gee, NULL},
    { SWIG_prefix "delete_Gee", (swig_wrapper_func) _wrap_delete_Gee, NULL},
    { SWIG_prefix "Gee_OpenConnection", (swig_wrapper_func) _wrap_Gee_OpenConnection, NULL},
    { SWIG_prefix "Gee_CloseConnection", (swig_wrapper_func) _wrap_Gee_CloseConnection, NULL},
    { SWIG_prefix "Gee_StartExposure", (swig_wrapper_func) _wrap_Gee_StartExposure, NULL},
    { SWIG_prefix "Gee_GetNumAdChannels", (swig_wrapper_func) _wrap_Gee_GetNumAdChannels, NULL},
    { SWIG_prefix "Gee", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_Gee},
    { SWIG_prefix "new_Quad", (swig_wrapper_func) _wrap_new_Quad, NULL},
    { SWIG_prefix "delete_Quad", (swig_wrapper_func) _wrap_delete_Quad, NULL},
    { SWIG_prefix "Quad_OpenConnection", (swig_wrapper_func) _wrap_Quad_OpenConnection, NULL},
    { SWIG_prefix "Quad_StartExposure", (swig_wrapper_func) _wrap_Quad_StartExposure, NULL},
    { SWIG_prefix "Quad_IsPixelReorderOn", (swig_wrapper_func) _wrap_Quad_IsPixelReorderOn, NULL},
    { SWIG_prefix "Quad_SetPixelReorder", (swig_wrapper_func) _wrap_Quad_SetPixelReorder, NULL},
    { SWIG_prefix "Quad_GetNumAdChannels", (swig_wrapper_func) _wrap_Quad_GetNumAdChannels, NULL},
    { SWIG_prefix "Quad", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_Quad},
    { SWIG_prefix "new_HiC", (swig_wrapper_func) _wrap_new_HiC, NULL},
    { SWIG_prefix "delete_HiC", (swig_wrapper_func) _wrap_delete_HiC, NULL},
    { SWIG_prefix "HiC_SetSerialNumber", (swig_wrapper_func) _wrap_HiC_SetSerialNumber, NULL},
    { SWIG_prefix "HiC_GetCamInfo", (swig_wrapper_func) _wrap_HiC_GetCamInfo, NULL},
    { SWIG_prefix "HiC_SetCamInfo", (swig_wrapper_func) _wrap_HiC_SetCamInfo, NULL},
    { SWIG_prefix "HiC_Get4kby4kImage", (swig_wrapper_func) _wrap_HiC_Get4kby4kImage, NULL},
    { SWIG_prefix "HiC", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_HiC},
    {0, 0, 0}
};

static swig_var_info swig_variables[] = {
    { SWIG_prefix "FIRMWARE_PLATFORM_MASK", 0, (swig_variable_func) _wrap_FIRMWARE_PLATFORM_MASK_get,(swig_variable_func) swig_readonly},
    { SWIG_prefix "MAX_ALTA_FIRMWARE_REV", 0, (swig_variable_func) _wrap_MAX_ALTA_FIRMWARE_REV_get,(swig_variable_func) swig_readonly},
    { SWIG_prefix "MIN_GEN2_FIRMWARE", 0, (swig_variable_func) _wrap_MIN_GEN2_FIRMWARE_get,(swig_variable_func) swig_readonly},
    { SWIG_prefix "MAX_GEN2_FIRMWARE", 0, (swig_variable_func) _wrap_MAX_GEN2_FIRMWARE_get,(swig_variable_func) swig_readonly},
    { SWIG_prefix "ALTA_CAMERA_ID_MASK", 0, (swig_variable_func) _wrap_ALTA_CAMERA_ID_MASK_get,(swig_variable_func) swig_readonly},
    { SWIG_prefix "GEN2_CAMERA_ID_MASK", 0, (swig_variable_func) _wrap_GEN2_CAMERA_ID_MASK_get,(swig_variable_func) swig_readonly},
    { SWIG_prefix "NO_OP_FRMWR_REV", 0, (swig_variable_func) _wrap_NO_OP_FRMWR_REV_get,(swig_variable_func) swig_readonly},
    {0,0,0,0}
};

static swig_const_info swig_constants[] = {
    {0,0,0,0,0,0}
};

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_HiCTo_p_ApogeeCam(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ApogeeCam *) (CamGen2Base *)(Quad *) ((HiC *) x));
}
static void *_p_AltaTo_p_ApogeeCam(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ApogeeCam *)  ((Alta *) x));
}
static void *_p_AscentTo_p_ApogeeCam(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ApogeeCam *) (CamGen2Base *) ((Ascent *) x));
}
static void *_p_GeeTo_p_ApogeeCam(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ApogeeCam *) (CamGen2Base *) ((Gee *) x));
}
static void *_p_QuadTo_p_ApogeeCam(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ApogeeCam *) (CamGen2Base *) ((Quad *) x));
}
static void *_p_CamGen2BaseTo_p_ApogeeCam(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ApogeeCam *)  ((CamGen2Base *) x));
}
static void *_p_ushortArrayTo_p_unsigned_short(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((unsigned short *)  ((ushortArray *) x));
}
static void *_p_HiCTo_p_Quad(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Quad *)  ((HiC *) x));
}
static void *_p_HiCTo_p_CamGen2Base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CamGen2Base *) (Quad *) ((HiC *) x));
}
static void *_p_AscentTo_p_CamGen2Base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CamGen2Base *)  ((Ascent *) x));
}
static void *_p_GeeTo_p_CamGen2Base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CamGen2Base *)  ((Gee *) x));
}
static void *_p_QuadTo_p_CamGen2Base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CamGen2Base *)  ((Quad *) x));
}
static swig_type_info _swigt__p_Alta = {"_p_Alta", "Alta *", 0, 0, (void*)&_wrap_class_Alta, 0};
static swig_type_info _swigt__p_ApogeeCam = {"_p_ApogeeCam", "ApogeeCam *", 0, 0, (void*)&_wrap_class_ApogeeCam, 0};
static swig_type_info _swigt__p_ApogeeFilterWheel = {"_p_ApogeeFilterWheel", "ApogeeFilterWheel *", 0, 0, (void*)&_wrap_class_ApogeeFilterWheel, 0};
static swig_type_info _swigt__p_Ascent = {"_p_Ascent", "Ascent *", 0, 0, (void*)&_wrap_class_Ascent, 0};
static swig_type_info _swigt__p_CamGen2Base = {"_p_CamGen2Base", "CamGen2Base *", 0, 0, (void*)&_wrap_class_CamGen2Base, 0};
static swig_type_info _swigt__p_CamInfo__StrDb = {"_p_CamInfo__StrDb", "CamInfo::StrDb *", 0, 0, (void*)&_wrap_class_CamInfo_StrDb, 0};
static swig_type_info _swigt__p_CameraStatusRegs = {"_p_CameraStatusRegs", "CameraStatusRegs *", 0, 0, (void*)&_wrap_class_CameraStatusRegs, 0};
static swig_type_info _swigt__p_CameraStatusRegs__AdvStatus = {"_p_CameraStatusRegs__AdvStatus", "CameraStatusRegs::AdvStatus *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CameraStatusRegs__BasicStatus = {"_p_CameraStatusRegs__BasicStatus", "CameraStatusRegs::BasicStatus *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FindDeviceEthernet = {"_p_FindDeviceEthernet", "FindDeviceEthernet *", 0, 0, (void*)&_wrap_class_FindDeviceEthernet, 0};
static swig_type_info _swigt__p_FindDeviceUsb = {"_p_FindDeviceUsb", "FindDeviceUsb *", 0, 0, (void*)&_wrap_class_FindDeviceUsb, 0};
static swig_type_info _swigt__p_Gee = {"_p_Gee", "Gee *", 0, 0, (void*)&_wrap_class_Gee, 0};
static swig_type_info _swigt__p_HiC = {"_p_HiC", "HiC *", 0, 0, (void*)&_wrap_class_HiC, 0};
static swig_type_info _swigt__p_Quad = {"_p_Quad", "Quad *", 0, 0, (void*)&_wrap_class_Quad, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int32_t = {"_p_int32_t", "int32_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__string_t = {"_p_std__vectorT_std__string_t", "std::vector< std::string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_unsigned_short_t = {"_p_std__vectorT_unsigned_short_t", "std::vector< unsigned short > *|std::vector< uint16_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_uint32_t = {"_p_uint32_t", "uint32_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "unsigned short *|uint16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ushortArray = {"_p_ushortArray", "ushortArray *", 0, 0, (void*)&_wrap_class_ushortArray, 0};
static swig_type_info _swigt__std__ptrdiff_t = {"_std__ptrdiff_t", "std::ptrdiff_t", 0, 0, (void*)0, 0};
static swig_type_info _swigt__std__size_t = {"_std__size_t", "std::size_t", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_Alta,
  &_swigt__p_ApogeeCam,
  &_swigt__p_ApogeeFilterWheel,
  &_swigt__p_Ascent,
  &_swigt__p_CamGen2Base,
  &_swigt__p_CamInfo__StrDb,
  &_swigt__p_CameraStatusRegs,
  &_swigt__p_CameraStatusRegs__AdvStatus,
  &_swigt__p_CameraStatusRegs__BasicStatus,
  &_swigt__p_FindDeviceEthernet,
  &_swigt__p_FindDeviceUsb,
  &_swigt__p_Gee,
  &_swigt__p_HiC,
  &_swigt__p_Quad,
  &_swigt__p_char,
  &_swigt__p_int32_t,
  &_swigt__p_std__vectorT_std__string_t,
  &_swigt__p_std__vectorT_unsigned_short_t,
  &_swigt__p_uint32_t,
  &_swigt__p_unsigned_short,
  &_swigt__p_ushortArray,
  &_swigt__std__ptrdiff_t,
  &_swigt__std__size_t,
};

static swig_cast_info _swigc__p_Alta[] = {  {&_swigt__p_Alta, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ApogeeCam[] = {  {&_swigt__p_Alta, _p_AltaTo_p_ApogeeCam, 0, 0},  {&_swigt__p_ApogeeCam, 0, 0, 0},  {&_swigt__p_HiC, _p_HiCTo_p_ApogeeCam, 0, 0},  {&_swigt__p_Ascent, _p_AscentTo_p_ApogeeCam, 0, 0},  {&_swigt__p_Quad, _p_QuadTo_p_ApogeeCam, 0, 0},  {&_swigt__p_Gee, _p_GeeTo_p_ApogeeCam, 0, 0},  {&_swigt__p_CamGen2Base, _p_CamGen2BaseTo_p_ApogeeCam, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ApogeeFilterWheel[] = {  {&_swigt__p_ApogeeFilterWheel, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Ascent[] = {  {&_swigt__p_Ascent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CamGen2Base[] = {  {&_swigt__p_HiC, _p_HiCTo_p_CamGen2Base, 0, 0},  {&_swigt__p_Ascent, _p_AscentTo_p_CamGen2Base, 0, 0},  {&_swigt__p_Quad, _p_QuadTo_p_CamGen2Base, 0, 0},  {&_swigt__p_CamGen2Base, 0, 0, 0},  {&_swigt__p_Gee, _p_GeeTo_p_CamGen2Base, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CamInfo__StrDb[] = {  {&_swigt__p_CamInfo__StrDb, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CameraStatusRegs[] = {  {&_swigt__p_CameraStatusRegs, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CameraStatusRegs__AdvStatus[] = {  {&_swigt__p_CameraStatusRegs__AdvStatus, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CameraStatusRegs__BasicStatus[] = {  {&_swigt__p_CameraStatusRegs__BasicStatus, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FindDeviceEthernet[] = {  {&_swigt__p_FindDeviceEthernet, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FindDeviceUsb[] = {  {&_swigt__p_FindDeviceUsb, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gee[] = {  {&_swigt__p_Gee, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HiC[] = {  {&_swigt__p_HiC, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Quad[] = {  {&_swigt__p_Quad, 0, 0, 0},  {&_swigt__p_HiC, _p_HiCTo_p_Quad, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int32_t[] = {  {&_swigt__p_int32_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__string_t[] = {  {&_swigt__p_std__vectorT_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_unsigned_short_t[] = {  {&_swigt__p_std__vectorT_unsigned_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uint32_t[] = {  {&_swigt__p_uint32_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_ushortArray, _p_ushortArrayTo_p_unsigned_short, 0, 0},  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ushortArray[] = {  {&_swigt__p_ushortArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__std__ptrdiff_t[] = {  {&_swigt__std__ptrdiff_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__std__size_t[] = {  {&_swigt__std__size_t, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_Alta,
  _swigc__p_ApogeeCam,
  _swigc__p_ApogeeFilterWheel,
  _swigc__p_Ascent,
  _swigc__p_CamGen2Base,
  _swigc__p_CamInfo__StrDb,
  _swigc__p_CameraStatusRegs,
  _swigc__p_CameraStatusRegs__AdvStatus,
  _swigc__p_CameraStatusRegs__BasicStatus,
  _swigc__p_FindDeviceEthernet,
  _swigc__p_FindDeviceUsb,
  _swigc__p_Gee,
  _swigc__p_HiC,
  _swigc__p_Quad,
  _swigc__p_char,
  _swigc__p_int32_t,
  _swigc__p_std__vectorT_std__string_t,
  _swigc__p_std__vectorT_unsigned_short_t,
  _swigc__p_uint32_t,
  _swigc__p_unsigned_short,
  _swigc__p_ushortArray,
  _swigc__std__ptrdiff_t,
  _swigc__std__size_t,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

#ifdef __cplusplus
}
#endif
/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;
  
  clientdata = clientdata;
  
  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }
  
  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);
    
    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }
  
  /* When multiple interpeters are used, a module could have already been initialized in
       a different interpreter, but not yet have a pointer in this interpreter.
       In this case, we do not want to continue adding types... everything should be
       set up already */
  if (init == 0) return;
  
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif
    
    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }
    
    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast) ret = 0;
        }
      }
      
      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
  
#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;
  
  if (init_run) return;
  init_run = 1;
  
  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{
  /* c-mode */
#endif
}
#endif


#ifdef __cplusplus
extern "C" {
#endif
  
  /* -----------------------------------------------------------------------------
   * constants/methods manipulation
   * ----------------------------------------------------------------------------- */
  
  /* Install Constants */
  
  SWIGINTERN void
  SWIG_Tcl_InstallConstants(Tcl_Interp *interp, swig_const_info constants[]) {
    int i;
    Tcl_Obj *obj;
    
    if (!swigconstTableinit) {
      Tcl_InitHashTable(&swigconstTable, TCL_STRING_KEYS);
      swigconstTableinit = 1;
    }
    for (i = 0; constants[i].type; i++) {
      switch(constants[i].type) {
      case SWIG_TCL_POINTER:
        obj = SWIG_NewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
        break;
      case SWIG_TCL_BINARY:
        obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
        break;
      default:
        obj = 0;
        break;
      }
      if (obj) {
        SWIG_Tcl_SetConstantObj(interp, constants[i].name, obj);
      }
    }
  }
  
#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

SWIGEXPORT int SWIG_init(Tcl_Interp *interp) {
  int i;
  if (interp == 0) return TCL_ERROR;
#ifdef USE_TCL_STUBS
  /* (char*) cast is required to avoid compiler warning/error for Tcl < 8.4. */
  if (Tcl_InitStubs(interp, (char*)SWIG_TCL_STUBS_VERSION, 0) == NULL) {
    return TCL_ERROR;
  }
#endif  
#ifdef USE_TK_STUBS
  /* (char*) cast is required to avoid compiler warning/error. */
  if (Tk_InitStubs(interp, (char*)SWIG_TCL_STUBS_VERSION, 0) == NULL) {
    return TCL_ERROR;
  }
#endif
  
  Tcl_PkgProvide(interp, (char*)SWIG_name, (char*)SWIG_version);
  
#ifdef SWIG_namespace
  Tcl_Eval(interp, "namespace eval " SWIG_namespace " { }");
#endif
  
  SWIG_InitializeModule((void *) interp);
  SWIG_PropagateClientData();
  
  for (i = 0; swig_commands[i].name; i++) {
    Tcl_CreateObjCommand(interp, (char *) swig_commands[i].name, (swig_wrapper_func) swig_commands[i].wrapper,
      swig_commands[i].clientdata, NULL);
  }
  for (i = 0; swig_variables[i].name; i++) {
    Tcl_SetVar(interp, (char *) swig_variables[i].name, (char *) "", TCL_GLOBAL_ONLY);
    Tcl_TraceVar(interp, (char *) swig_variables[i].name, TCL_TRACE_READS | TCL_GLOBAL_ONLY, 
      (Tcl_VarTraceProc *) swig_variables[i].get, (ClientData) swig_variables[i].addr);
    Tcl_TraceVar(interp, (char *) swig_variables[i].name, TCL_TRACE_WRITES | TCL_GLOBAL_ONLY, 
      (Tcl_VarTraceProc *) swig_variables[i].set, (ClientData) swig_variables[i].addr);
  }
  
  SWIG_Tcl_InstallConstants(interp, swig_constants);
  
  
  
  
  SWIG_Tcl_SetConstantObj(interp, "ApogeeFilterWheel_UNKNOWN_TYPE", SWIG_From_int(static_cast< int >(ApogeeFilterWheel::UNKNOWN_TYPE)));
  SWIG_Tcl_SetConstantObj(interp, "ApogeeFilterWheel_FW50_9R", SWIG_From_int(static_cast< int >(ApogeeFilterWheel::FW50_9R)));
  SWIG_Tcl_SetConstantObj(interp, "ApogeeFilterWheel_FW50_7S", SWIG_From_int(static_cast< int >(ApogeeFilterWheel::FW50_7S)));
  SWIG_Tcl_SetConstantObj(interp, "ApogeeFilterWheel_AFW50_10S", SWIG_From_int(static_cast< int >(ApogeeFilterWheel::AFW50_10S)));
  SWIG_Tcl_SetConstantObj(interp, "ApogeeFilterWheel_UNKNOWN_STATUS", SWIG_From_int(static_cast< int >(ApogeeFilterWheel::UNKNOWN_STATUS)));
  SWIG_Tcl_SetConstantObj(interp, "ApogeeFilterWheel_NOT_CONNECTED", SWIG_From_int(static_cast< int >(ApogeeFilterWheel::NOT_CONNECTED)));
  SWIG_Tcl_SetConstantObj(interp, "ApogeeFilterWheel_READY", SWIG_From_int(static_cast< int >(ApogeeFilterWheel::READY)));
  SWIG_Tcl_SetConstantObj(interp, "ApogeeFilterWheel_ACTIVE", SWIG_From_int(static_cast< int >(ApogeeFilterWheel::ACTIVE)));
  SWIG_Tcl_SetConstantObj(interp, "Ascent_FW_UNKNOWN_TYPE", SWIG_From_int(static_cast< int >(Ascent::FW_UNKNOWN_TYPE)));
  SWIG_Tcl_SetConstantObj(interp, "Ascent_CFW25_6R", SWIG_From_int(static_cast< int >(Ascent::CFW25_6R)));
  SWIG_Tcl_SetConstantObj(interp, "Ascent_CFW31_8R", SWIG_From_int(static_cast< int >(Ascent::CFW31_8R)));
  SWIG_Tcl_SetConstantObj(interp, "UNKNOWN_INTERFACE", SWIG_From_int(static_cast< int >(CamModel::UNKNOWN_INTERFACE)));
  SWIG_Tcl_SetConstantObj(interp, "USB", SWIG_From_int(static_cast< int >(CamModel::USB)));
  SWIG_Tcl_SetConstantObj(interp, "ETHERNET", SWIG_From_int(static_cast< int >(CamModel::ETHERNET)));
  SWIG_Tcl_SetConstantObj(interp, "UNKNOWN_PLATFORM", SWIG_From_int(static_cast< int >(CamModel::UNKNOWN_PLATFORM)));
  SWIG_Tcl_SetConstantObj(interp, "ALTAU", SWIG_From_int(static_cast< int >(CamModel::ALTAU)));
  SWIG_Tcl_SetConstantObj(interp, "ALTAE", SWIG_From_int(static_cast< int >(CamModel::ALTAE)));
  SWIG_Tcl_SetConstantObj(interp, "ASCENT", SWIG_From_int(static_cast< int >(CamModel::ASCENT)));
  SWIG_Tcl_SetConstantObj(interp, "GEE", SWIG_From_int(static_cast< int >(CamModel::GEE)));
  SWIG_Tcl_SetConstantObj(interp, "HIC", SWIG_From_int(static_cast< int >(CamModel::HIC)));
  SWIG_Tcl_SetConstantObj(interp, "ALTAF", SWIG_From_int(static_cast< int >(CamModel::ALTAF)));
  SWIG_Tcl_SetConstantObj(interp, "QUAD", SWIG_From_int(static_cast< int >(CamModel::QUAD)));
  SWIG_Tcl_SetConstantObj(interp, "Status_ConnectionError", SWIG_From_int(static_cast< int >(Apg::Status_ConnectionError)));
  SWIG_Tcl_SetConstantObj(interp, "Status_DataError", SWIG_From_int(static_cast< int >(Apg::Status_DataError)));
  SWIG_Tcl_SetConstantObj(interp, "Status_PatternError", SWIG_From_int(static_cast< int >(Apg::Status_PatternError)));
  SWIG_Tcl_SetConstantObj(interp, "Status_Idle", SWIG_From_int(static_cast< int >(Apg::Status_Idle)));
  SWIG_Tcl_SetConstantObj(interp, "Status_Exposing", SWIG_From_int(static_cast< int >(Apg::Status_Exposing)));
  SWIG_Tcl_SetConstantObj(interp, "Status_ImagingActive", SWIG_From_int(static_cast< int >(Apg::Status_ImagingActive)));
  SWIG_Tcl_SetConstantObj(interp, "Status_ImageReady", SWIG_From_int(static_cast< int >(Apg::Status_ImageReady)));
  SWIG_Tcl_SetConstantObj(interp, "Status_Flushing", SWIG_From_int(static_cast< int >(Apg::Status_Flushing)));
  SWIG_Tcl_SetConstantObj(interp, "Status_WaitingOnTrigger", SWIG_From_int(static_cast< int >(Apg::Status_WaitingOnTrigger)));
  SWIG_Tcl_SetConstantObj(interp, "CameraMode_Normal", SWIG_From_int(static_cast< int >(Apg::CameraMode_Normal)));
  SWIG_Tcl_SetConstantObj(interp, "CameraMode_TDI", SWIG_From_int(static_cast< int >(Apg::CameraMode_TDI)));
  SWIG_Tcl_SetConstantObj(interp, "CameraMode_Test", SWIG_From_int(static_cast< int >(Apg::CameraMode_Test)));
  SWIG_Tcl_SetConstantObj(interp, "CameraMode_ExternalTrigger", SWIG_From_int(static_cast< int >(Apg::CameraMode_ExternalTrigger)));
  SWIG_Tcl_SetConstantObj(interp, "CameraMode_ExternalShutter", SWIG_From_int(static_cast< int >(Apg::CameraMode_ExternalShutter)));
  SWIG_Tcl_SetConstantObj(interp, "CameraMode_Kinetics", SWIG_From_int(static_cast< int >(Apg::CameraMode_Kinetics)));
  SWIG_Tcl_SetConstantObj(interp, "CameraMode_Unknown", SWIG_From_int(static_cast< int >(Apg::CameraMode_Unknown)));
  SWIG_Tcl_SetConstantObj(interp, "Resolution_SixteenBit", SWIG_From_int(static_cast< int >(Apg::Resolution_SixteenBit)));
  SWIG_Tcl_SetConstantObj(interp, "Resolution_TwelveBit", SWIG_From_int(static_cast< int >(Apg::Resolution_TwelveBit)));
  SWIG_Tcl_SetConstantObj(interp, "AdcSpeed_Unknown", SWIG_From_int(static_cast< int >(Apg::AdcSpeed_Unknown)));
  SWIG_Tcl_SetConstantObj(interp, "AdcSpeed_Normal", SWIG_From_int(static_cast< int >(Apg::AdcSpeed_Normal)));
  SWIG_Tcl_SetConstantObj(interp, "AdcSpeed_Fast", SWIG_From_int(static_cast< int >(Apg::AdcSpeed_Fast)));
  SWIG_Tcl_SetConstantObj(interp, "AdcSpeed_Video", SWIG_From_int(static_cast< int >(Apg::AdcSpeed_Video)));
  SWIG_Tcl_SetConstantObj(interp, "CoolerStatus_Off", SWIG_From_int(static_cast< int >(Apg::CoolerStatus_Off)));
  SWIG_Tcl_SetConstantObj(interp, "CoolerStatus_RampingToSetPoint", SWIG_From_int(static_cast< int >(Apg::CoolerStatus_RampingToSetPoint)));
  SWIG_Tcl_SetConstantObj(interp, "CoolerStatus_AtSetPoint", SWIG_From_int(static_cast< int >(Apg::CoolerStatus_AtSetPoint)));
  SWIG_Tcl_SetConstantObj(interp, "CoolerStatus_Revision", SWIG_From_int(static_cast< int >(Apg::CoolerStatus_Revision)));
  SWIG_Tcl_SetConstantObj(interp, "CoolerStatus_Suspended", SWIG_From_int(static_cast< int >(Apg::CoolerStatus_Suspended)));
  SWIG_Tcl_SetConstantObj(interp, "FanMode_Off", SWIG_From_int(static_cast< int >(Apg::FanMode_Off)));
  SWIG_Tcl_SetConstantObj(interp, "FanMode_Low", SWIG_From_int(static_cast< int >(Apg::FanMode_Low)));
  SWIG_Tcl_SetConstantObj(interp, "FanMode_Medium", SWIG_From_int(static_cast< int >(Apg::FanMode_Medium)));
  SWIG_Tcl_SetConstantObj(interp, "FanMode_High", SWIG_From_int(static_cast< int >(Apg::FanMode_High)));
  SWIG_Tcl_SetConstantObj(interp, "FanMode_Unknown", SWIG_From_int(static_cast< int >(Apg::FanMode_Unknown)));
  SWIG_Tcl_SetConstantObj(interp, "LedState_Expose", SWIG_From_int(static_cast< int >(Apg::LedState_Expose)));
  SWIG_Tcl_SetConstantObj(interp, "LedState_ImageActive", SWIG_From_int(static_cast< int >(Apg::LedState_ImageActive)));
  SWIG_Tcl_SetConstantObj(interp, "LedState_Flushing", SWIG_From_int(static_cast< int >(Apg::LedState_Flushing)));
  SWIG_Tcl_SetConstantObj(interp, "LedState_ExtTriggerWaiting", SWIG_From_int(static_cast< int >(Apg::LedState_ExtTriggerWaiting)));
  SWIG_Tcl_SetConstantObj(interp, "LedState_ExtTriggerReceived", SWIG_From_int(static_cast< int >(Apg::LedState_ExtTriggerReceived)));
  SWIG_Tcl_SetConstantObj(interp, "LedState_ExtShutterInput", SWIG_From_int(static_cast< int >(Apg::LedState_ExtShutterInput)));
  SWIG_Tcl_SetConstantObj(interp, "LedState_ExtStartReadout", SWIG_From_int(static_cast< int >(Apg::LedState_ExtStartReadout)));
  SWIG_Tcl_SetConstantObj(interp, "LedState_AtTemp", SWIG_From_int(static_cast< int >(Apg::LedState_AtTemp)));
  SWIG_Tcl_SetConstantObj(interp, "LedState_Unknown", SWIG_From_int(static_cast< int >(Apg::LedState_Unknown)));
  SWIG_Tcl_SetConstantObj(interp, "LedMode_DisableAll", SWIG_From_int(static_cast< int >(Apg::LedMode_DisableAll)));
  SWIG_Tcl_SetConstantObj(interp, "LedMode_DisableWhileExpose", SWIG_From_int(static_cast< int >(Apg::LedMode_DisableWhileExpose)));
  SWIG_Tcl_SetConstantObj(interp, "LedMode_EnableAll", SWIG_From_int(static_cast< int >(Apg::LedMode_EnableAll)));
  SWIG_Tcl_SetConstantObj(interp, "LedMode_Unknown", SWIG_From_int(static_cast< int >(Apg::LedMode_Unknown)));
  SWIG_Tcl_SetConstantObj(interp, "TriggerMode_Unknown", SWIG_From_int(static_cast< int >(Apg::TriggerMode_Unknown)));
  SWIG_Tcl_SetConstantObj(interp, "TriggerMode_Normal", SWIG_From_int(static_cast< int >(Apg::TriggerMode_Normal)));
  SWIG_Tcl_SetConstantObj(interp, "TriggerMode_TdiKinetics", SWIG_From_int(static_cast< int >(Apg::TriggerMode_TdiKinetics)));
  SWIG_Tcl_SetConstantObj(interp, "TriggerMode_ExternalShutter", SWIG_From_int(static_cast< int >(Apg::TriggerMode_ExternalShutter)));
  SWIG_Tcl_SetConstantObj(interp, "TriggerMode_ExternalReadoutIo", SWIG_From_int(static_cast< int >(Apg::TriggerMode_ExternalReadoutIo)));
  SWIG_Tcl_SetConstantObj(interp, "TriggerType_Unkown", SWIG_From_int(static_cast< int >(Apg::TriggerType_Unkown)));
  SWIG_Tcl_SetConstantObj(interp, "TriggerType_Each", SWIG_From_int(static_cast< int >(Apg::TriggerType_Each)));
  SWIG_Tcl_SetConstantObj(interp, "TriggerType_Group", SWIG_From_int(static_cast< int >(Apg::TriggerType_Group)));
  SWIG_Tcl_SetConstantObj(interp, "ShutterState_Unkown", SWIG_From_int(static_cast< int >(Apg::ShutterState_Unkown)));
  SWIG_Tcl_SetConstantObj(interp, "ShutterState_Normal", SWIG_From_int(static_cast< int >(Apg::ShutterState_Normal)));
  SWIG_Tcl_SetConstantObj(interp, "ShutterState_ForceOpen", SWIG_From_int(static_cast< int >(Apg::ShutterState_ForceOpen)));
  SWIG_Tcl_SetConstantObj(interp, "ShutterState_ForceClosed", SWIG_From_int(static_cast< int >(Apg::ShutterState_ForceClosed)));
  SWIG_Tcl_SetConstantObj(interp, "ErrorType_Connection", SWIG_From_int(static_cast< int >(Apg::ErrorType_Connection)));
  SWIG_Tcl_SetConstantObj(interp, "ErrorType_Critical", SWIG_From_int(static_cast< int >(Apg::ErrorType_Critical)));
  SWIG_Tcl_SetConstantObj(interp, "ErrorType_Serious", SWIG_From_int(static_cast< int >(Apg::ErrorType_Serious)));
  SWIG_Tcl_SetConstantObj(interp, "ErrorType_Configuration", SWIG_From_int(static_cast< int >(Apg::ErrorType_Configuration)));
  SWIG_Tcl_SetConstantObj(interp, "ErrorType_InvalidMode", SWIG_From_int(static_cast< int >(Apg::ErrorType_InvalidMode)));
  SWIG_Tcl_SetConstantObj(interp, "ErrorType_InvalidOperation", SWIG_From_int(static_cast< int >(Apg::ErrorType_InvalidOperation)));
  SWIG_Tcl_SetConstantObj(interp, "ErrorType_InvalidUsage", SWIG_From_int(static_cast< int >(Apg::ErrorType_InvalidUsage)));
  return TCL_OK;
}
SWIGEXPORT int Tcllibapogee_SafeInit(Tcl_Interp *interp) {
  return SWIG_init(interp);
}

