#!/usr/bin/env python
# -*- coding: UTF8 -*-


# Python module dcd.py
# Autogenerated from dcd.glade
# Generated on Mon Aug 22 09:34:08 2005

# Warning: Do not delete or modify comments related to context
# They are required to keep user's code

import os
import gtk
from SimpleGladeApp import SimpleGladeApp
from gindi import *
import time
glade_dir = ""
global  running
import sys
global hostlist
global treestore
class runner:
	def __init__(self):
		self.running=True
running=runner()

# Put your modules and data here

# From here through main() codegen inserts/updates a class for
# every top-level widget in the .glade file.

class con:
	def __init__(self, host,port):
		self.host=host
		self.port=port
		self.name=str(host)+":"+str(port)
	def get_host(self):
		return self.host
	def get_port(self):
		return self.port


# Put your modules and data here

# From here through main() codegen inserts/updates a class for
# every top-level widget in the .glade file.

class Connections(SimpleGladeApp):
	def __init__(self, path="dcd.glade", root="connections", domain=None, **kwargs):
		path = os.path.join(glade_dir, path)
		SimpleGladeApp.__init__(self, path, root, domain, **kwargs)

	def new(self):
		#context Connections.new {
		a=1
		#context Connections.new }

	#context Connections custom methods {
	#--- Write your own methods here ---#
	#context Connections custom methods }

	def on_connections_delete_event(self, widget, *args):
		#context Connections.on_connections_delete_event {
		running.running=False
		#context Connections.on_connections_delete_event }

	def on_addbutton_clicked(self, widget, *args):
		#context Connections.on_addbutton_clicked {
		connection.main_widget.show()
		#context Connections.on_addbutton_clicked }

	def on_deletebutton_clicked(self, widget, *args):
		#context Connections.on_deletebutton_clicked {
		global hostlist
		treeselection=self.treeview.get_selection()
		(model, iter) = treeselection.get_selected()
		name=model.get_value(iter,0)
		for c in hostlist:
			if c.name==name:
				hostlist.remove(c)
		writeconfig()
		hostlist=[]
		treestore = gtk.TreeStore(str)
		treeview.set_model(treestore)
		readconfig(hostlist,treestore)
		#context Connections.on_deletebutton_clicked }

	def on_connectbutton_clicked(self, widget, *args):
		#context Connections.on_connectbutton_clicked {
		treeselection=self.treeview.get_selection()
		(model, iter) = treeselection.get_selected()
		name=model.get_value(iter,0)
		for c in hostlist:
			if c.name==name:
				#try:
					dcd.connect(c.host,c.port)
				#except:
				#	print "Could not connect to host: "+str(c.host)+" port: "+str(c.port)
		#context Connections.on_connectbutton_clicked }

class Connection(SimpleGladeApp):
	def __init__(self, path="dcd.glade", root="connection", domain=None, **kwargs):
		path = os.path.join(glade_dir, path)
		SimpleGladeApp.__init__(self, path, root, domain, **kwargs)

	def new(self):
		#context Connection.new {
		a=1
		#context Connection.new }

	#context Connection custom methods {
	#--- Write your own methods here ---#
	#context Connection custom methods }

	def on_connection_delete_event(self, widget, *args):
		#context Connection.on_connection_delete_event {
		self.main_widget.hide()
		return True
		#context Connection.on_connection_delete_event }

	def on_okbutton_clicked(self, widget, *args):
		#context Connection.on_okbutton_clicked {
		try:
			string=self.entry1.get_text()+":"+self.entry2.get_text()
			list=[string]
			c=con(self.entry1.get_text(),int(self.entry2.get_text()))
		except:
			return
		hostlist.append(c)
		connections.treeview.get_model().append(None,list)
		self.main_widget.hide()
		#context Connection.on_okbutton_clicked }

	def on_cancelbutton_clicked(self, widget, *args):
		#context Connection.on_cancelbutton_clicked {
		self.main_widget.hide()
		#context Connection.on_cancelbutton_clicked }

def writeconfig():
	h=open('hosts', 'w')
	p=open('port', 'w')
	v=open('viewer', 'w')
	for element in hostlist:
		h.write(str(element.get_host())+"\n")
		p.write(str(element.get_port())+"\n")
	v.write(dcd.widget.get_text())
	h.close()
	p.close()
	v.close()

def normalize(s):
	t=""
	for c in s:
		if c!="\n":
			t=t+c
	return t
	
def readconfig(hostlist,treestore):
	h=open('hosts', 'r')
	p=open('port', 'r')
	v=open('viewer', 'r')
	host=normalize(h.readline())
	port=normalize(p.readline())
	while (port!="") and (host!=""):
		c=con(host,int(port))
		hostlist.append(c)
		treestore.append(None, [str(host)+":"+str(port) ])
		host=normalize(h.readline())
		port=normalize(p.readline())
	dcd.widget.set_text(v.readline())
	h.close()
	p.close()
	v.close()

def main():
	global connections
	global connection	
	connections = Connections()
	connection = Connection()
	connection.main_widget.hide()

#print gtk.gdk.visual_get_system().byte_order

global dcd
main()
dcd=gindi(connections.fitsviewerentry)
c=con("localhost","7624")
hostlist=[]
treeview=connections.treeview
treestore = gtk.TreeStore(str)
treeview.set_model(treestore)
tvcolumn = gtk.TreeViewColumn('Connections')
treeview.append_column(tvcolumn)
cell = gtk.CellRendererText()
tvcolumn.pack_start(cell, True)
tvcolumn.add_attribute(cell, 'text', 0)
treeselection=treeview.get_selection()
treeselection.select_path("0")
readconfig(hostlist,treestore)

while running.running:
	#print time.time() , running.running
	dcd.process_events()
	while gtk.events_pending():
		gtk.main_iteration_do(False)	
	time.sleep(0.01)
dcd.quit()
writeconfig()
sys.exit()
#test.indi.tell()
#test.indi.quit()

