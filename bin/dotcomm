#!/bin/sh

PATH=.:/bin:/usr/bin:/usr/local/bin:/usr/X11R6/lib:/usr/bin/X11

#  Script to start 1m telescope remote control programs

# trap signals
trap  ' ' 2 3 15
#trap

# Default location of files
BIN=/usr/local/bin
TOCC=/export/tocc
SPEC=/export/spec
PI=/export/pi

# Default file names to use for communication
STAT=statr
CMD=tocccmd
RESP=toccr
PICMD=picmd
PIRESP=pirespon
SPECCMD=speccmd
SPECRESP=specresp
RESTART=restart

export BIN

# Kill any existing processes, at least on the current machine
killtcomm
killtcomm
ssh -l tcomm eyeball.apo.nmsu.edu killtcomm
ssh -l tcomm eyeball.apo.nmsu.edu killtcomm

ulimit -s 32768 2>/dev/null

# start program to monitor 3.5m dome
shutter35m 2> /dev/null &

# Clean up any files which might be leftover from previous sessions
rm -f com2port port2com com2ccd ccd2com stat2port port2stat
rm -f com2gccd gccd2com
rm -f $TOCC/$STAT.fin $TOCC/$STAT.doc
rm -f $TOCC/$CMD.doc $TOCC/$CMD.fin
rm -f $TOCC/$RESP.doc $TOCC/$RESP.fin
rm -f $PI/$PICMD.doc $PI/$PICMD.fin
rm -f $PI/$PIRESP.doc $PI/$PIRESP.fin
rm -f $SPEC/$SPECCMD.doc $SPEC/$SPECCMD.fin
rm -f $SPEC/$SPECRESP.doc $SPEC/$SPECRESP.fin
rm -f ccdstatus.* guidestatus.*
rm -f /export/tocc/louver.dat /export/tocc/35*
sleep 2

# Create FIFOs
mkfifo com2port port2com
mkfifo stat2port port2stat
mkfifo com2ccd ccd2com
mkfifo com2gccd gccd2com

# Touch restart file which will let telescope computer know we've restarted
rm -f $TOCC/$RESTART.doc $SPEC/$RESTART.doc
touch $TOCC/$RESTART.doc $SPEC/$RESTART.doc
chmod 777 $TOCC/$RESTART.doc $SPEC/$RESTART.doc
sleep 5

# Now we start all of the "child" processes in their own xterms. We do this
# using csh because, otherwise, under Linux, the child processes get killed
# during a CTRL-C in the main program, even if it is trapped. In order to
# be able to kill the children when we are done, start them using a dummy
# command tcomm_xterm, which is just a link to xterm, so they can easily
# be found with a ps and killed

# Start the power control program
rm -f /export/power/*
$BIN/power &
job0=$!
sleep 2

# Start the  port program to talk with telescope computer
rm -f start_port
echo ' 
tcomm_xterm -fn 6x10 -sb -sl 1000 -geometry 78x9-10-30 -T "Telescope Control" -e \
 '$BIN/port' &
' > start_port
csh -f start_port
job1=$!

# Start the status program
rm -f start_status
echo ' 
tcomm_xterm -fn fixed -geometry 80x21-10+80 -T "Telescope and CCD Status" -e \
  '$BIN/status' &
' > start_status
csh -f start_status
job2=$!

# Start the ccd program to talk with the PI computer
#rm -f start_ccd
#echo ' 
#tcomm_xterm -fn 6x10 -sb -sl 1000 -geometry 78x9-10-270 -T "PI CCD Control" -e \
#  '$BIN/ccd' &
#' > start_ccd
#csh -f start_ccd
#job3=$!

# Start the ccd program to talk with the Apogee computer
 rm -f start_accd
 echo ' 
 tcomm_xterm -fn 6x10 -sb -sl 1000 -geometry 78x9-10-270 -T "Apogee CCD Control" -e \
   ssh -l tcomm eyeball.apo.nmsu.edu '$BIN/accd' &
 ' > start_accd
 csh -f start_accd
 job5=$!

# Start the ccd program to talk with the Leach computer
#rm -f start_lccd
#echo ' 
#tcomm_xterm -fn 6x10 -sb -sl 1000 -geometry 78x9-10-270 -T "Leach CCD Control" -e \
#  ssh -l tcomm ccd1m.apo.nmsu.edu '$BIN/lccd' &
#' > start_lccd
#csh -f start_lccd
#job5=$!

# Start the gccd program to talk with the spectrasource computer
#rm -f start_gccd
#echo ' 
#tcomm_xterm -fn 6x10 -sb -sl 1000 -geometry 78x9-10-155 -T "Guider Control" -e \
#  '$BIN/gccd' &
#' > start_gccd
#csh -f start_gccd
#job4=$!
 rm -f start_fccd
 ssh -f -l tcomm ccd1m.apo.nmsu.edu 'xterm -fn 6x10 -sb -sl 1000 -geometry 78x9-10-155 -T "FLI CCD Control" -e fccd'
# echo ' 
# tcomm_xterm -fn 6x10 -sb -sl 1000 -geometry 78x9-10-270 -T "FLI CCD Control" -e \
#   ssh -l tcomm ccd1m.apo.nmsu.edu '$BIN/fccd' &
# ' > start_fccd
# csh -f start_fccd
# job5=$!

# Finally, start the command program from the current window
$BIN/command 

# When done, make sure all started jobs get killed
echo "stopping rvideo ...."
touch /export/rvideo/quit

echo "Killing processes ...."
killtcomm
killtcomm
ssh -l tcomm eyeball.apo.nmsu.edu killtcomm
ssh -l tcomm eyeball.apo.nmsu.edu killtcomm

# Clean up files and FIFOs
echo "cleaning up files..."
rm -f com2port port2com com2ccd ccd2com stat2port port2stat 
rm -f com2gccd gccd2com
rm -f $TOCC/$STAT.fin
mv $TOCC/$STAT.doc.3 $TOCC/$STAT.doc.4
mv $TOCC/$STAT.doc.2 $TOCC/$STAT.doc.3
mv $TOCC/$STAT.doc.1 $TOCC/$STAT.doc.2
mv $TOCC/$STAT.doc $TOCC/$STAT.doc.1
rm -f $TOCC/$CMD.doc $TOCC/$CMD.fin
mv $TOCC/$RESP.doc.3 $TOCC/$RESP.doc.4
mv $TOCC/$RESP.doc.2 $TOCC/$RESP.doc.3
mv $TOCC/$RESP.doc.1 $TOCC/$RESP.doc.2
mv $TOCC/$RESP.doc $TOCC/$RESP.doc.1
rm -f $TOCC/$RESP.doc $TOCC/$RESP.fin
rm -f $PI/$PICMD.doc $PI/$PICMD.fin
rm -f $PI/$PIRESP.doc $PI/$PIRESP.fin
rm -f $SPEC/$SPECCMD.doc $SPEC/$SPECCMD.fin
mv $SPEC/$SPECRESP.doc.3 $SPEC/$SPECRESP.doc.4
mv $SPEC/$SPECRESP.doc.2 $SPEC/$SPECRESP.doc.3
mv $SPEC/$SPECRESP.doc.1 $SPEC/$SPECRESP.doc.2
mv $SPEC/$SPECRESP.doc $SPEC/$SPECRESP.doc.1
rm -f $SPEC/$SPECRESP.doc $SPEC/$SPECRESP.fin
rm -f /export/tocc/louver.dat /export/tocc/35*
